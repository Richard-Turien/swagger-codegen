package $packageName$ {


import $exceptionPackageName$.ApiErrorCodes;
import $exceptionPackageName$.ApiError;
import $modelPackageName$.*;


$imports:{ import |
import $import$;
}$

    /**
     * NOTE: This class is auto generated by the drive code generator program so please do not edit the class manually.
     * @author deepak
     *
     */
    public class $resource$ extends $extends$ {

		/**
		 * Constructor for the $resource$ api client
		 * @param apiCredentials Wrapper object for tokens and hostName required towards authentication
		 * @param eventDispatcher Optional event dispatcher that when provided is used by the SDK to dispatch any Response
		 */
		public function $resource$(apiCredentials: ApiUserCredentials, eventDispatcher: EventDispatcher = null) {
			super(apiCredentials, eventDispatcher);
		}


$methods:{ method |
        /**
         * $method.description$
$method.arguments:{ argument |
         * @param $argument.name$  $argument.description$
    $if(argument.allowedValues)$
         *        Allowed values are - $argument.allowedValues$
    $endif$}$
         *
$if(!method.responseVoid)$
         * @return $method.returnValue$ {@link $method.returnClassName$} $endif$
         */
$if(method.hasArguments)$
        [MethodArgumentNames(value="$method.argumentNames; separator=", "$")]$endif$
        public function $method.name$($method.argumentDefinitions; separator=", "$): String {

$if(method.authToken)$
            if(authToken == null || authToken.length == 0) {
                throw new ApiError(ApiErrorCodes.AUTH_TOKEN_NOT_VALID);
            }$endif$
            var requestId: String = getUniqueId();
            //parse inputs
            var resourcePath: String = "$method.resourcePath$";
            resourcePath = resourcePath.replace("{format}","xml");
            var method: String = "$method.methodType$";
            var queryParams:Dictionary = new Dictionary();
$if(!method.inputModel)$
$method.queryParameters:{ argument |
            if( $argument.name$ != null) {
                queryParams["$argument.name$"] = toPathValue($argument.name$);
            }
}$
$method.pathParameters:{ argument |
            if( $argument.name$ != null) {
                resourcePath = resourcePath.replace("{$argument.name$}", $argument.name$);
            }
}$
$endif$
$if(method.inputModel)$
$method.queryParameters:{ argument |
            if( $argument.inputModelClassArgument$ != null && $argument.methodNameFromModelClass$ != null) {
                queryParams["$argument.name$"] = $argument.methodNameFromModelClass$;
            }
}$
$method.pathParameters:{ argument |
            if( $argument.inputModelClassArgument$ != null && $argument.methodNameFromModelClass$ != null) {
                resourcePath = resourcePath.replace("{$argument.name$}", $argument.methodNameFromModelClass$);
            }
}$
$endif$
            //make the API Call
$if(method.postObject)$
$if(method.authToken)$
            var token:AsyncToken = getApiInvoker().invokeAPI(authToken, resourcePath, method, queryParams, postData);
$endif$
$if(!method.authToken)$
            var token:AsyncToken = getApiInvoker().invokeAPI(null, resourcePath, method, queryParams, postData);
$endif$
$endif$

$if(!method.postObject)$
$if(method.authToken)$
            var token:AsyncToken = getApiInvoker().invokeAPI(authToken, resourcePath, method, queryParams, null);
$endif$
$if(!method.authToken)$
            var token:AsyncToken = getApiInvoker().invokeAPI(null, resourcePath, method, queryParams, null);
$endif$
$endif$

            token.requestId = requestId;
			token.completionEventType = "$method.name$";

            //create output objects if the response has more than one object
$if(!method.responseVoid)$
            token.returnType = $method.returnClassName$;

$endif$
            return requestId;
        }
}$
    }
}
