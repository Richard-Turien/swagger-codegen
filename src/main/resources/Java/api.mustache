package {{package}};

import {{invokerPackage}}.ApiException;
import {{invokerPackage}}.ApiInvoker;

{{#imports}}import {{import}};
{{/imports}}

import com.sun.jersey.multipart.FormDataMultiPart;

import javax.ws.rs.core.MediaType;

import java.io.File;
import java.util.*;

{{#operations}}
public class {{classname}} {
  String _basePath = "{{basePath}}";
  ApiInvoker _apiInvoker = ApiInvoker.getInstance();

  public ApiInvoker getInvoker() {
    return _apiInvoker;
  }
  
  public void setBasePath(String _basePath) {
    this._basePath = _basePath;
  }
  
  public String getBasePath() {
    return _basePath;
  }

  {{#operation}}
  /*
  {{#errorList}}
   * error info- code: {{code}} reason: "{{reason}}" model: {{#responseModel}}{{responseModel}}
  {{/responseModel}}{{^responseModel}}<none>
  {{/responseModel}}
  {{/errorList}}  
   */
  public {{#returnType}}{{{returnType}}} {{/returnType}}{{^returnType}}void {{/returnType}} {{nickname}} ({{#allParams}}{{{dataType}}} {{paramName}}{{#hasMore}}, {{/hasMore}}{{/allParams}}) throws ApiException {
    Object _postBody = {{#bodyParam}}{{bodyParam}}{{/bodyParam}}{{^bodyParam}}null{{/bodyParam}};
    {{#requiredParamCount}}
    // verify required params are set
    if({{/requiredParamCount}}{{#requiredParams}} {{paramName}} == null {{#hasMore}}|| {{/hasMore}}{{/requiredParams}}{{#requiredParamCount}}) {
       throw new ApiException(400, "missing required params");
    }
    {{/requiredParamCount}}

    // create path and map variables
    String _path = "{{path}}".replaceAll("\\{format\\}","json"){{#pathParams}}.replaceAll("\\{" + "{{paramName}}" + "\\}", _apiInvoker.escapeString({{{paramName}}}.toString())){{/pathParams}};

    // query params
    Map<String, String> _queryParams = new HashMap<String, String>();
    Map<String, String> _headerParams = new HashMap<String, String>();
    Map<String, String> _formParams = new HashMap<String, String>();

    {{#queryParams}}if(!"null".equals(String.valueOf({{paramName}})))
      _queryParams.put("{{baseName}}", String.valueOf({{paramName}}));
    {{/queryParams}}

    {{#headerParams}}_headerParams.put("{{baseName}}", {{paramName}});
    {{/headerParams}}

    String[] _contentTypes = {
      {{#consumes}}"{{mediaType}}"{{#hasMore}},{{/hasMore}}{{/consumes}}
    };

    String _contentType = _contentTypes.length > 0 ? _contentTypes[0] : "application/json";

    if(_contentType.startsWith("multipart/form-data")) {
      boolean _hasFields = false;
      FormDataMultiPart _mp = new FormDataMultiPart();
      {{#formParams}}
      {{#notFile}}
      _hasFields = true;
      _mp.field("{{baseName}}", {{paramName}}, MediaType.MULTIPART_FORM_DATA_TYPE);
      {{/notFile}}
      {{#isFile}}
      _hasFields = true;
      _mp.field("{{baseName}}", {{paramName}}, MediaType.MULTIPART_FORM_DATA_TYPE);
      {{/isFile}}
      {{/formParams}}
      if(_hasFields)
        _postBody = _mp;
    }
    else {
      {{#formParams}}
      {{#notFile}}
      _formParams.put("{{baseName}}", String.valueOf({{paramName}}));
      {{/notFile}}
      {{/formParams}}
    }

    try {
      String response = _apiInvoker.invokeAPI(_basePath, _path, "{{httpMethod}}", _queryParams, _postBody, _headerParams, _formParams, _contentType);
      if(response != null){
        return {{#returnType}}({{{returnType}}}) ApiInvoker.deserialize(response, "{{returnContainer}}", {{returnBaseType}}.class){{/returnType}};
      }
      else {
        return {{#returnType}}null{{/returnType}};
      }
    } catch (ApiException ex) {
      if(ex.getCode() == 404) {
      	return {{#returnType}} null{{/returnType}};
      }
      else {
        throw ex;
      }
    }
  }
  {{/operation}}
}
{{/operations}}
