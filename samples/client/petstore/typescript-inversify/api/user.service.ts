/**
 * Swagger Petstore
 * This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Observable } from "rxjs/Observable";
import 'rxjs/add/operator/map';
import 'rxjs/add/operator/toPromise';
import IHttpClient from "../IHttpClient";
import { inject, injectable } from "inversify";
import { IAPIConfiguration } from "../IAPIConfiguration"
import { Headers } from "../Headers"

import { User } from '../model/user';

import { COLLECTION_FORMATS }  from '../variables';



@injectable()
export class UserService {
    private basePath: string = 'http://petstore.swagger.io/v2';

    constructor(@inject("IApiHttpClient") private httpClient: IHttpClient,
        @inject("IAPIConfiguration") private APIConfiguration: IAPIConfiguration ) {
        if(this.APIConfiguration.basePath)
            this.basePath = this.APIConfiguration.basePath;
    }


    /**
     * Create user
     * This can only be done by the logged in user.
     * @param body Created user object
     
     */

    public createUser(body: User, headers: Headers = {}): Promise<any> {
        if (!body){
            throw new Error('Required parameter body was null or undefined when calling createUser.');
        }

        headers['Accept'] = 'application/xml';
        headers['Content-Type'] = 'application/json';


        return this.httpClient.post(`${this.basePath}/user`, body , headers)
                    .map(httpResponse => <any>(httpResponse.response))
                    .toPromise();
    }


    /**
     * Creates list of users with given input array
     * 
     * @param body List of user object
     
     */

    public createUsersWithArrayInput(body: Array<User>, headers: Headers = {}): Promise<any> {
        if (!body){
            throw new Error('Required parameter body was null or undefined when calling createUsersWithArrayInput.');
        }

        headers['Accept'] = 'application/xml';
        headers['Content-Type'] = 'application/json';


        return this.httpClient.post(`${this.basePath}/user/createWithArray`, body , headers)
                    .map(httpResponse => <any>(httpResponse.response))
                    .toPromise();
    }


    /**
     * Creates list of users with given input array
     * 
     * @param body List of user object
     
     */

    public createUsersWithListInput(body: Array<User>, headers: Headers = {}): Promise<any> {
        if (!body){
            throw new Error('Required parameter body was null or undefined when calling createUsersWithListInput.');
        }

        headers['Accept'] = 'application/xml';
        headers['Content-Type'] = 'application/json';


        return this.httpClient.post(`${this.basePath}/user/createWithList`, body , headers)
                    .map(httpResponse => <any>(httpResponse.response))
                    .toPromise();
    }


    /**
     * Delete user
     * This can only be done by the logged in user.
     * @param username The name that needs to be deleted
     
     */

    public deleteUser(username: string, headers: Headers = {}): Promise<any> {
        if (!username){
            throw new Error('Required parameter username was null or undefined when calling deleteUser.');
        }

        headers['Accept'] = 'application/xml';


        return this.httpClient.delete(`${this.basePath}/user/${encodeURIComponent(String(username))}`, headers)
                    .map(httpResponse => <any>(httpResponse.response))
                    .toPromise();
    }


    /**
     * Get user by user name
     * 
     * @param username The name that needs to be fetched. Use user1 for testing.
     
     */

    public getUserByName(username: string, headers: Headers = {}): Promise<User> {
        if (!username){
            throw new Error('Required parameter username was null or undefined when calling getUserByName.');
        }

        headers['Accept'] = 'application/xml';


        return this.httpClient.get(`${this.basePath}/user/${encodeURIComponent(String(username))}`, headers)
                    .map(httpResponse => <User>(httpResponse.response))
                    .toPromise();
    }


    /**
     * Logs user into the system
     * 
     * @param username The user name for login
     * @param password The password for login in clear text
     
     */

    public loginUser(username: string, password: string, headers: Headers = {}): Promise<string> {
        if (!username){
            throw new Error('Required parameter username was null or undefined when calling loginUser.');
        }
        if (!password){
            throw new Error('Required parameter password was null or undefined when calling loginUser.');
        }
        let queryParameters: string[] = [];
        if (username !== undefined) {
            queryParameters.push("username="+encodeURIComponent(String(username)));
        }
        if (password !== undefined) {
            queryParameters.push("password="+encodeURIComponent(String(password)));
        }


        headers['Accept'] = 'application/xml';


        return this.httpClient.get(`${this.basePath}/user/login?${queryParameters.join('&')}`, headers)
                    .map(httpResponse => <string>(httpResponse.response))
                    .toPromise();
    }


    /**
     * Logs out current logged in user session
     * 
     
     */

    public logoutUser(headers: Headers = {}): Promise<any> {

        headers['Accept'] = 'application/xml';


        return this.httpClient.get(`${this.basePath}/user/logout`, headers)
                    .map(httpResponse => <any>(httpResponse.response))
                    .toPromise();
    }


    /**
     * Updated user
     * This can only be done by the logged in user.
     * @param username name that need to be deleted
     * @param body Updated user object
     
     */

    public updateUser(username: string, body: User, headers: Headers = {}): Promise<any> {
        if (!username){
            throw new Error('Required parameter username was null or undefined when calling updateUser.');
        }
        if (!body){
            throw new Error('Required parameter body was null or undefined when calling updateUser.');
        }

        headers['Accept'] = 'application/xml';
        headers['Content-Type'] = 'application/json';


        return this.httpClient.put(`${this.basePath}/user/${encodeURIComponent(String(username))}`, body , headers)
                    .map(httpResponse => <any>(httpResponse.response))
                    .toPromise();
    }

}
