/**
 * Swagger Petstore
 * This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Observable } from "rxjs/Observable";
import 'rxjs/add/operator/map';
import 'rxjs/add/operator/toPromise';
import IHttpClient from "../IHttpClient";
import { inject, injectable } from "inversify";
import { IAPIConfiguration } from "../IAPIConfiguration"
import { Headers } from "../Headers"

import { ApiResponse } from '../model/apiResponse';
import { Pet } from '../model/pet';

import { COLLECTION_FORMATS }  from '../variables';



@injectable()
export class PetService {
    private basePath: string = 'http://petstore.swagger.io/v2';

    constructor(@inject("IApiHttpClient") private httpClient: IHttpClient,
        @inject("IAPIConfiguration") private APIConfiguration: IAPIConfiguration ) {
        if(this.APIConfiguration.basePath)
            this.basePath = this.APIConfiguration.basePath;
    }


    /**
     * Add a new pet to the store
     * 
     * @param body Pet object that needs to be added to the store
     
     */

    public addPet(body: Pet, headers: Headers = {}): Promise<any> {
        if (!body){
            throw new Error('Required parameter body was null or undefined when calling addPet.');
        }

        // authentication (petstore_auth) required
        if (this.APIConfiguration.accessToken) {
            let accessToken = typeof this.APIConfiguration.accessToken === 'function'
                ? this.APIConfiguration.accessToken()
                : this.APIConfiguration.accessToken;
            headers['Authorization'] = 'Bearer ' + accessToken;
        }
        headers['Accept'] = 'application/xml';
        headers['Content-Type'] = 'application/json';


        return this.httpClient.post(`${this.basePath}/pet`, body , headers)
                    .map(httpResponse => <any>(httpResponse.response))
                    .toPromise();
    }


    /**
     * Deletes a pet
     * 
     * @param petId Pet id to delete
     * @param apiKey 
     
     */

    public deletePet(petId: number, apiKey?: string, headers: Headers = {}): Promise<any> {
        if (!petId){
            throw new Error('Required parameter petId was null or undefined when calling deletePet.');
        }
        if (apiKey) {
            headers['api_key'] = String(apiKey);
        }

        // authentication (petstore_auth) required
        if (this.APIConfiguration.accessToken) {
            let accessToken = typeof this.APIConfiguration.accessToken === 'function'
                ? this.APIConfiguration.accessToken()
                : this.APIConfiguration.accessToken;
            headers['Authorization'] = 'Bearer ' + accessToken;
        }
        headers['Accept'] = 'application/xml';


        return this.httpClient.delete(`${this.basePath}/pet/${encodeURIComponent(String(petId))}`, headers)
                    .map(httpResponse => <any>(httpResponse.response))
                    .toPromise();
    }


    /**
     * Finds Pets by status
     * Multiple status values can be provided with comma separated strings
     * @param status Status values that need to be considered for filter
     
     */

    public findPetsByStatus(status: Array<'available' | 'pending' | 'sold'>, headers: Headers = {}): Promise<Array<Pet>> {
        if (!status){
            throw new Error('Required parameter status was null or undefined when calling findPetsByStatus.');
        }
        let queryParameters: string[] = [];
        if (status) {
            queryParameters.push("status="+encodeURIComponent(status.join(COLLECTION_FORMATS['csv'])));
        }


        // authentication (petstore_auth) required
        if (this.APIConfiguration.accessToken) {
            let accessToken = typeof this.APIConfiguration.accessToken === 'function'
                ? this.APIConfiguration.accessToken()
                : this.APIConfiguration.accessToken;
            headers['Authorization'] = 'Bearer ' + accessToken;
        }
        headers['Accept'] = 'application/xml';


        return this.httpClient.get(`${this.basePath}/pet/findByStatus?${queryParameters.join('&')}`, headers)
                    .map(httpResponse => <Array<Pet>>(httpResponse.response))
                    .toPromise();
    }


    /**
     * Finds Pets by tags
     * Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
     * @param tags Tags to filter by
     
     */

    public findPetsByTags(tags: Array<string>, headers: Headers = {}): Promise<Array<Pet>> {
        if (!tags){
            throw new Error('Required parameter tags was null or undefined when calling findPetsByTags.');
        }
        let queryParameters: string[] = [];
        if (tags) {
            queryParameters.push("tags="+encodeURIComponent(tags.join(COLLECTION_FORMATS['csv'])));
        }


        // authentication (petstore_auth) required
        if (this.APIConfiguration.accessToken) {
            let accessToken = typeof this.APIConfiguration.accessToken === 'function'
                ? this.APIConfiguration.accessToken()
                : this.APIConfiguration.accessToken;
            headers['Authorization'] = 'Bearer ' + accessToken;
        }
        headers['Accept'] = 'application/xml';


        return this.httpClient.get(`${this.basePath}/pet/findByTags?${queryParameters.join('&')}`, headers)
                    .map(httpResponse => <Array<Pet>>(httpResponse.response))
                    .toPromise();
    }


    /**
     * Find pet by ID
     * Returns a single pet
     * @param petId ID of pet to return
     
     */

    public getPetById(petId: number, headers: Headers = {}): Promise<Pet> {
        if (!petId){
            throw new Error('Required parameter petId was null or undefined when calling getPetById.');
        }

        // authentication (api_key) required
        if (this.APIConfiguration.apiKeys["api_key"]) {
            headers['api_key'] = this.APIConfiguration.apiKeys["api_key"];
        }
        headers['Accept'] = 'application/xml';


        return this.httpClient.get(`${this.basePath}/pet/${encodeURIComponent(String(petId))}`, headers)
                    .map(httpResponse => <Pet>(httpResponse.response))
                    .toPromise();
    }


    /**
     * Update an existing pet
     * 
     * @param body Pet object that needs to be added to the store
     
     */

    public updatePet(body: Pet, headers: Headers = {}): Promise<any> {
        if (!body){
            throw new Error('Required parameter body was null or undefined when calling updatePet.');
        }

        // authentication (petstore_auth) required
        if (this.APIConfiguration.accessToken) {
            let accessToken = typeof this.APIConfiguration.accessToken === 'function'
                ? this.APIConfiguration.accessToken()
                : this.APIConfiguration.accessToken;
            headers['Authorization'] = 'Bearer ' + accessToken;
        }
        headers['Accept'] = 'application/xml';
        headers['Content-Type'] = 'application/json';


        return this.httpClient.put(`${this.basePath}/pet`, body , headers)
                    .map(httpResponse => <any>(httpResponse.response))
                    .toPromise();
    }


    /**
     * Updates a pet in the store with form data
     * 
     * @param petId ID of pet that needs to be updated
     * @param name Updated name of the pet
     * @param status Updated status of the pet
     
     */

    public updatePetWithForm(petId: number, name?: string, status?: string, headers: Headers = {}): Promise<any> {
        if (!petId){
            throw new Error('Required parameter petId was null or undefined when calling updatePetWithForm.');
        }

        // authentication (petstore_auth) required
        if (this.APIConfiguration.accessToken) {
            let accessToken = typeof this.APIConfiguration.accessToken === 'function'
                ? this.APIConfiguration.accessToken()
                : this.APIConfiguration.accessToken;
            headers['Authorization'] = 'Bearer ' + accessToken;
        }
        headers['Accept'] = 'application/xml';

        let formData: FormData = new FormData();
        headers['Content-Type'] = 'application/x-www-form-urlencoded;charset=UTF-8';
        if (name !== undefined) {
            formData.append('name', <any>name);
        }
        if (status !== undefined) {
            formData.append('status', <any>status);
        }


        return this.httpClient.post(`${this.basePath}/pet/${encodeURIComponent(String(petId))}`, body, headers)
                    .map(httpResponse => <any>(httpResponse.response))
                    .toPromise();
    }


    /**
     * uploads an image
     * 
     * @param petId ID of pet to update
     * @param additionalMetadata Additional data to pass to server
     * @param file file to upload
     
     */

    public uploadFile(petId: number, additionalMetadata?: string, file?: Blob, headers: Headers = {}): Promise<ApiResponse> {
        if (!petId){
            throw new Error('Required parameter petId was null or undefined when calling uploadFile.');
        }

        // authentication (petstore_auth) required
        if (this.APIConfiguration.accessToken) {
            let accessToken = typeof this.APIConfiguration.accessToken === 'function'
                ? this.APIConfiguration.accessToken()
                : this.APIConfiguration.accessToken;
            headers['Authorization'] = 'Bearer ' + accessToken;
        }
        headers['Accept'] = 'application/json';

        let formData: FormData = new FormData();
        headers['Content-Type'] = 'application/x-www-form-urlencoded;charset=UTF-8';
        if (additionalMetadata !== undefined) {
            formData.append('additionalMetadata', <any>additionalMetadata);
        }
        if (file !== undefined) {
            formData.append('file', <any>file);
        }


        return this.httpClient.post(`${this.basePath}/pet/${encodeURIComponent(String(petId))}/uploadImage`, body, headers)
                    .map(httpResponse => <ApiResponse>(httpResponse.response))
                    .toPromise();
    }

}
