/**
 * Swagger Petstore
 * This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Observable } from "rxjs/Observable";
import 'rxjs/add/operator/map';
import 'rxjs/add/operator/toPromise';
import IHttpClient from "../IHttpClient";
import { inject, injectable } from "inversify";
import { IAPIConfiguration } from "../IAPIConfiguration"
import { Headers } from "../Headers"

import { Order } from '../model/order';

import { COLLECTION_FORMATS }  from '../variables';



@injectable()
export class StoreService {
    private basePath: string = 'http://petstore.swagger.io/v2';

    constructor(@inject("IApiHttpClient") private httpClient: IHttpClient,
        @inject("IAPIConfiguration") private APIConfiguration: IAPIConfiguration ) {
        if(this.APIConfiguration.basePath)
            this.basePath = this.APIConfiguration.basePath;
    }


    /**
     * Delete purchase order by ID
     * For valid response try integer IDs with value &lt; 1000. Anything above 1000 or nonintegers will generate API errors
     * @param orderId ID of the order that needs to be deleted
     
     */

    public deleteOrder(orderId: string, headers: Headers = {}): Promise<any> {
        if (!orderId){
            throw new Error('Required parameter orderId was null or undefined when calling deleteOrder.');
        }

        headers['Accept'] = 'application/xml';


        return this.httpClient.delete(`${this.basePath}/store/order/${encodeURIComponent(String(orderId))}`, headers)
                    .map(httpResponse => <any>(httpResponse.response))
                    .toPromise();
    }


    /**
     * Returns pet inventories by status
     * Returns a map of status codes to quantities
     
     */

    public getInventory(headers: Headers = {}): Promise<{ [key: string]: number; }> {

        // authentication (api_key) required
        if (this.APIConfiguration.apiKeys["api_key"]) {
            headers['api_key'] = this.APIConfiguration.apiKeys["api_key"];
        }
        headers['Accept'] = 'application/json';


        return this.httpClient.get(`${this.basePath}/store/inventory`, headers)
                    .map(httpResponse => <{ [key: string]: number; }>(httpResponse.response))
                    .toPromise();
    }


    /**
     * Find purchase order by ID
     * For valid response try integer IDs with value &lt;&#x3D; 5 or &gt; 10. Other values will generated exceptions
     * @param orderId ID of pet that needs to be fetched
     
     */

    public getOrderById(orderId: number, headers: Headers = {}): Promise<Order> {
        if (!orderId){
            throw new Error('Required parameter orderId was null or undefined when calling getOrderById.');
        }

        headers['Accept'] = 'application/xml';


        return this.httpClient.get(`${this.basePath}/store/order/${encodeURIComponent(String(orderId))}`, headers)
                    .map(httpResponse => <Order>(httpResponse.response))
                    .toPromise();
    }


    /**
     * Place an order for a pet
     * 
     * @param body order placed for purchasing the pet
     
     */

    public placeOrder(body: Order, headers: Headers = {}): Promise<Order> {
        if (!body){
            throw new Error('Required parameter body was null or undefined when calling placeOrder.');
        }

        headers['Accept'] = 'application/xml';
        headers['Content-Type'] = 'application/json';


        return this.httpClient.post(`${this.basePath}/store/order`, body , headers)
                    .map(httpResponse => <Order>(httpResponse.response))
                    .toPromise();
    }

}
