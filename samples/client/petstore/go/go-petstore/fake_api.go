/* 
 * Swagger Petstore
 *
 * This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

package petstore

import (
	"net/url"
	"strings"
	"time"
	"encoding/json"
)

type FakeApi struct {
	Configuration *Configuration
}

func NewFakeApi() *FakeApi {
	configuration := NewConfiguration()
	return &FakeApi{
		Configuration: configuration,
	}
}

func NewFakeApiWithBasePath(basePath string) *FakeApi {
	configuration := NewConfiguration()
	configuration.BasePath = basePath

	return &FakeApi{
		Configuration: configuration,
	}
}

/**
 * To test \&quot;client\&quot; model
 *
 * @param body client model 
 * @return *Client
 */
func (a FakeApi) TestClientModel(body Client) (*Client, *APIResponse, error) {

	var localVarHttpMethod = strings.ToUpper("Patch")
	// create path and map variables
	localVarPath := a.Configuration.BasePath + "/fake"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := make(map[string]string)
	var localVarPostBody interface{}
	var localVarFileName string
	var localVarFileBytes []byte
	// add default headers if any
	for key := range a.Configuration.DefaultHeader {
		localVarHeaderParams[key] = a.Configuration.DefaultHeader[key]
	}


	// to determine the Content-Type header
	localVarHttpContentTypes := []string{ "application/json",  }

	// set Content-Type header
	localVarHttpContentType := a.Configuration.APIClient.SelectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}
	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{
		"application/json",
		}

	// set Accept header
	localVarHttpHeaderAccept := a.Configuration.APIClient.SelectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	// body params
	localVarPostBody = &body
	var successPayload = new(Client)
	localVarHttpResponse, err := a.Configuration.APIClient.CallAPI(localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)

	var localVarURL, _ = url.Parse(localVarPath)
	localVarURL.RawQuery = localVarQueryParams.Encode()
	var localVarAPIResponse = &APIResponse{Operation: "TestClientModel", Method: localVarHttpMethod, RequestURL: localVarURL.String()}
	if localVarHttpResponse != nil {
		localVarAPIResponse.Response = localVarHttpResponse.RawResponse
		localVarAPIResponse.Payload = localVarHttpResponse.Body()
	}

	if err != nil {
		return successPayload, localVarAPIResponse, err
	}
	err = json.Unmarshal(localVarHttpResponse.Body(), &successPayload)
	return successPayload, localVarAPIResponse, err
}

/**
 * Fake endpoint for testing various parameters 假端點 偽のエンドポイント 가짜 엔드 포인트 
 * Fake endpoint for testing various parameters 假端點 偽のエンドポイント 가짜 엔드 포인트 
 *
 * @param number None 
 * @param double None 
 * @param patternWithoutDelimiter None 
 * @param byte_ None 
 * @param integer(nil) None 
 * @param int32_(nil) None 
 * @param int64_(nil) None 
 * @param float(nil) None 
 * @param string_(nil) None 
 * @param binary(nil) None 
 * @param date None 
 * @param dateTime None 
 * @param password(nil) None 
 * @param callback(nil) None 
 * @return nil
 */
func (a FakeApi) TestEndpointParameters(number float32, double float64, patternWithoutDelimiter string, byte_ string, integer interface{}, int32_ interface{}, int64_ interface{}, float interface{}, string_ interface{}, binary interface{}, date time.Time, dateTime time.Time, password interface{}, callback interface{}) (*APIResponse, error) {

	var localVarHttpMethod = strings.ToUpper("Post")
	// create path and map variables
	localVarPath := a.Configuration.BasePath + "/fake"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := make(map[string]string)
	var localVarPostBody interface{}
	var localVarFileName string
	var localVarFileBytes []byte
	// authentication '(http_basic_test)' required
	// http basic authentication required
	if a.Configuration.UserName != "" || a.Configuration.Password != ""{
		localVarHeaderParams["Authorization"] =  "Basic " + a.Configuration.GetBasicAuthEncodedString()
	}
	// add default headers if any
	for key := range a.Configuration.DefaultHeader {
		localVarHeaderParams[key] = a.Configuration.DefaultHeader[key]
	}

	if err := a.Configuration.APIClient.typeCheckParameter(integer, "int32", "integer"); err != nil {
		return  nil, err
	}
	if err := a.Configuration.APIClient.typeCheckParameter(int32_, "int32", "int32_"); err != nil {
		return  nil, err
	}
	if err := a.Configuration.APIClient.typeCheckParameter(int64_, "int64", "int64_"); err != nil {
		return  nil, err
	}
	if err := a.Configuration.APIClient.typeCheckParameter(float, "float32", "float"); err != nil {
		return  nil, err
	}
	if err := a.Configuration.APIClient.typeCheckParameter(string_, "string", "string_"); err != nil {
		return  nil, err
	}
	if err := a.Configuration.APIClient.typeCheckParameter(binary, "string", "binary"); err != nil {
		return  nil, err
	}
	if err := a.Configuration.APIClient.typeCheckParameter(password, "string", "password"); err != nil {
		return  nil, err
	}
	if err := a.Configuration.APIClient.typeCheckParameter(callback, "string", "callback"); err != nil {
		return  nil, err
	}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{ "application/xml; charset=utf-8", "application/json; charset=utf-8",  }

	// set Content-Type header
	localVarHttpContentType := a.Configuration.APIClient.SelectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}
	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{
		"application/xml; charset=utf-8",
		"application/json; charset=utf-8",
		}

	// set Accept header
	localVarHttpHeaderAccept := a.Configuration.APIClient.SelectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	localVarFormParams["integer"] = a.Configuration.APIClient.parameterToString(integer, "")
	localVarFormParams["int32_"] = a.Configuration.APIClient.parameterToString(int32_, "")
	localVarFormParams["int64_"] = a.Configuration.APIClient.parameterToString(int64_, "")
	localVarFormParams["number"] = a.Configuration.APIClient.parameterToString(number, "")
	localVarFormParams["float"] = a.Configuration.APIClient.parameterToString(float, "")
	localVarFormParams["double"] = a.Configuration.APIClient.parameterToString(double, "")
	localVarFormParams["string_"] = a.Configuration.APIClient.parameterToString(string_, "")
	localVarFormParams["patternWithoutDelimiter"] = a.Configuration.APIClient.parameterToString(patternWithoutDelimiter, "")
	localVarFormParams["byte_"] = a.Configuration.APIClient.parameterToString(byte_, "")
	localVarFormParams["binary"] = a.Configuration.APIClient.parameterToString(binary, "")
	localVarFormParams["date"] = a.Configuration.APIClient.parameterToString(date, "")
	localVarFormParams["dateTime"] = a.Configuration.APIClient.parameterToString(dateTime, "")
	localVarFormParams["password"] = a.Configuration.APIClient.parameterToString(password, "")
	localVarFormParams["callback"] = a.Configuration.APIClient.parameterToString(callback, "")
	localVarHttpResponse, err := a.Configuration.APIClient.CallAPI(localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)

	var localVarURL, _ = url.Parse(localVarPath)
	localVarURL.RawQuery = localVarQueryParams.Encode()
	var localVarAPIResponse = &APIResponse{Operation: "TestEndpointParameters", Method: localVarHttpMethod, RequestURL: localVarURL.String()}
	if localVarHttpResponse != nil {
		localVarAPIResponse.Response = localVarHttpResponse.RawResponse
		localVarAPIResponse.Payload = localVarHttpResponse.Body()
	}

	if err != nil {
		return localVarAPIResponse, err
	}
	return localVarAPIResponse, err
}

/**
 * To test enum parameters
 *
 * @param enumFormStringArray Form parameter enum test (string array) 
 * @param enumFormString(nil) Form parameter enum test (string) 
 * @param enumHeaderStringArray Header parameter enum test (string array) 
 * @param enumHeaderString(nil) Header parameter enum test (string) 
 * @param enumQueryStringArray Query parameter enum test (string array) 
 * @param enumQueryString(nil) Query parameter enum test (string) 
 * @param enumQueryInteger(nil) Query parameter enum test (double) 
 * @param enumQueryDouble(nil) Query parameter enum test (double) 
 * @return nil
 */
func (a FakeApi) TestEnumParameters(enumFormStringArray []string, enumFormString interface{}, enumHeaderStringArray []string, enumHeaderString interface{}, enumQueryStringArray []string, enumQueryString interface{}, enumQueryInteger interface{}, enumQueryDouble interface{}) (*APIResponse, error) {

	var localVarHttpMethod = strings.ToUpper("Get")
	// create path and map variables
	localVarPath := a.Configuration.BasePath + "/fake"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := make(map[string]string)
	var localVarPostBody interface{}
	var localVarFileName string
	var localVarFileBytes []byte
	// add default headers if any
	for key := range a.Configuration.DefaultHeader {
		localVarHeaderParams[key] = a.Configuration.DefaultHeader[key]
	}

	if err := a.Configuration.APIClient.typeCheckParameter(enumFormString, "string", "enumFormString"); err != nil {
		return  nil, err
	}
	if err := a.Configuration.APIClient.typeCheckParameter(enumHeaderString, "string", "enumHeaderString"); err != nil {
		return  nil, err
	}
	if err := a.Configuration.APIClient.typeCheckParameter(enumQueryString, "string", "enumQueryString"); err != nil {
		return  nil, err
	}
	if err := a.Configuration.APIClient.typeCheckParameter(enumQueryInteger, "float32", "enumQueryInteger"); err != nil {
		return  nil, err
	}
	if err := a.Configuration.APIClient.typeCheckParameter(enumQueryDouble, "float64", "enumQueryDouble"); err != nil {
		return  nil, err
	}
	if enumQueryStringArray != nil {
		localVarQueryParams.Add("enum_query_string_array", a.Configuration.APIClient.parameterToString(enumQueryStringArray, "csv"))
	}
	if enumQueryString != nil {
		localVarQueryParams.Add("enum_query_string", a.Configuration.APIClient.parameterToString(enumQueryString, ""))
	}
	if enumQueryInteger != nil {
		localVarQueryParams.Add("enum_query_integer", a.Configuration.APIClient.parameterToString(enumQueryInteger, ""))
	}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{ "*/*",  }

	// set Content-Type header
	localVarHttpContentType := a.Configuration.APIClient.SelectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}
	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{
		"*/*",
		}

	// set Accept header
	localVarHttpHeaderAccept := a.Configuration.APIClient.SelectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	// header params "enum_header_string_array"
	localVarHeaderParams["enum_header_string_array"] = a.Configuration.APIClient.parameterToString(enumHeaderStringArray, "")
	// header params "enum_header_string"
	localVarHeaderParams["enum_header_string"] = a.Configuration.APIClient.parameterToString(enumHeaderString, "")
	localVarFormParams["enumFormStringArray"] = a.Configuration.APIClient.parameterToString(enumFormStringArray, "")
	localVarFormParams["enumFormString"] = a.Configuration.APIClient.parameterToString(enumFormString, "")
	localVarFormParams["enumQueryDouble"] = a.Configuration.APIClient.parameterToString(enumQueryDouble, "")
	localVarHttpResponse, err := a.Configuration.APIClient.CallAPI(localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)

	var localVarURL, _ = url.Parse(localVarPath)
	localVarURL.RawQuery = localVarQueryParams.Encode()
	var localVarAPIResponse = &APIResponse{Operation: "TestEnumParameters", Method: localVarHttpMethod, RequestURL: localVarURL.String()}
	if localVarHttpResponse != nil {
		localVarAPIResponse.Response = localVarHttpResponse.RawResponse
		localVarAPIResponse.Payload = localVarHttpResponse.Body()
	}

	if err != nil {
		return localVarAPIResponse, err
	}
	return localVarAPIResponse, err
}

