<?php
/**
 * FakeClassnameTags123Api
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Swagger Petstore
 *
 * This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Psr\Http\Message\ResponseInterface;
use Swagger\Client\ApiException;
use Swagger\Client\MappedApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * FakeClassnameTags123Api Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class FakeClassnameTags123Api
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

	/**
	 * Returns the un-boxed content from an response.
	 *
	 * @param ResponseInterface $response
	 * @param string $targetType
	 *
	 * @return object|\Psr\Http\Message\StreamInterface|string
	 */
    protected function getContent(ResponseInterface $response, string $targetType)
    {
        $responseBody = $response->getBody();
        if ($targetType === '\SplFileObject') {
            return $responseBody; //stream goes to serializer
        } else {
            if ($targetType === 'string') {
                return $responseBody->getContents();
            }
            // by default we expect json content
            return json_decode($responseBody->getContents());
        }
    }

	/**
	 * Receive the content for operation result.
	 *
	 * @param string $operationId
	 * @param ResponseInterface $response
	 * @param string $defaultModel
	 *
	 * @return mixed
	 */
	protected function getResponseData(string $operationId, ResponseInterface $response, string $defaultModel = null)
	{
		$statusCode = $response->getStatusCode();
		$targetModel = null;

		if ($mapping = constant('self::' . $operationId . 'CodeMapping')) {
			if (isset($mapping[$statusCode])) {
				$targetModel = $mapping[$statusCode];
			} else if (isset($mapping['default'])) {
				$targetModel = $mapping['default'];
			}
		}

		// fallback for successful call
		if ($defaultModel && !$targetModel && $statusCode >= 200 && $statusCode <= 299) {
			$targetModel = $defaultModel;
		}

		if (!$targetModel) {
			throw new \LogicException(
				sprintf(
					'The operation %s has no defined response for status %d.',
					$operationId,
					$statusCode
				)
			);
		}

		return ObjectSerializer::deserialize(
			$this->getContent($response, $targetModel),
			$targetModel,
			$response->getHeaders()
		);
	}

	/**
	 * Receive exception details for failed operation, caused by an response.
	 *
	 * @param string $operationId
	 * @param ResponseInterface $response
	 * @param RequestException|null $exception
	 *
	 * @return ApiException
	 */
	protected function getResponseException(string $operationId, ResponseInterface $response = null, RequestException $exception = null): ApiException
	{
		if ($response) {
			try {
				// we try to map the exception according to the specification rules
				return new MappedApiException(
					$this->getResponseData($operationId, $response),
					sprintf('Operation %s was not successful. Code: %s', $operationId, $response->getStatusCode()),
					$response->getStatusCode(),
					$response,
					$exception
				);
			} catch (\LogicException $notMappedCode) {
				// there is no mapping available, but we have a response
				return new ApiException(
					sprintf(
						'Operation %s was not successful and it\'s response data was not mapped. Code: %s %s',
						$operationId,
						$response->getStatusCode(),
                        $exception ? $exception->getMessage() : ''
					),
					$response->getStatusCode(),
					$response,
					$exception
				);
			}
		}
		// unspecific exception, as we don't know about it's nature
		return new ApiException(
			sprintf(
                'Operation %s was not successful. Code: %s %s',
                $operationId,
                $response ? $response->getStatusCode() : -1,
                $exception ? $exception->getMessage() : ''
            ),
			$response ? $response->getStatusCode() : -1,
			$response,
			$exception
		);
	}

    protected const testClassnameCodeMapping = [
        200 => '\Swagger\Client\Model\Client'
    ];
    /**
     * Operation testClassname
     *
     * To test class name in snake case
     *
     * @param  \Swagger\Client\Model\Client $body client model (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Client
     */
    public function testClassname($body) 
    {
        return $this->testClassnameWithHttpInfo($body)[0];
    }

    /**
     * Operation testClassnameWithHttpInfo
     *
     * To test class name in snake case
     *
     * @param  \Swagger\Client\Model\Client $body client model (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Client, HTTP status code, HTTP response headers (array of strings)
     */
    public function testClassnameWithHttpInfo($body)
    {
        $request = $this->testClassnameRequest($body);

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $requestException) {
            throw $this->getResponseException('testClassname', $requestException->getResponse(), $requestException);
        }

        $statusCode = $response->getStatusCode();
        if ($statusCode < 200 || $statusCode > 299) {
            throw $this->getResponseException('testClassname', $response);
        }

        return [
            $this->getResponseData('testClassname', $response, '\Swagger\Client\Model\Client'),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    /**
     * Operation testClassnameAsync
     *
     * To test class name in snake case
     *
     * @param  \Swagger\Client\Model\Client $body client model (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function testClassnameAsync($body)
    {
        return $this->testClassnameAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation testClassnameAsyncWithHttpInfo
     *
     * To test class name in snake case
     *
     * @param  \Swagger\Client\Model\Client $body client model (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function testClassnameAsyncWithHttpInfo($body)
    {
        $returnType = '\Swagger\Client\Model\Client';
        $request = $this->testClassnameRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'testClassname'
     *
     * @param  \Swagger\Client\Model\Client $body client model (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function testClassnameRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling testClassname'
            );
        }

        $resourcePath = '/fake_classname_test';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_key_query');
        if ($apiKey !== null) {
            $queryParams['api_key_query'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
