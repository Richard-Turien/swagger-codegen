//
// CatalogAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire
import RxSwift



open class CatalogAPI: APIBase {
    /**
     Definition 1
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func definition1(completion: @escaping ((_ data: [Definition1]?, _ error: ErrorResponse?) -> Void)) {
        definition1WithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Definition 1
     
     - returns: Observable<[Definition1]>
     */
    open class func definition1() -> Observable<[Definition1]> {
        return Observable.create { observer -> Disposable in
            definition1() { data, error in
                if let error = error {
                    observer.on(.error(error as Error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return NopDisposable.instance
        }
    }

    /**
     Definition 1
     - GET /api/fakedef1
     - examples: [{contentType=application/json, example=[ {
  "Definition2" : {
    "Definition1" : [ "" ],
    "Id" : "aeiou"
  },
  "Id" : "aeiou"
} ]}, {contentType=application/xml, example=<null>
  <Id>aeiou</Id>
</null>}]
     - examples: [{contentType=application/json, example=[ {
  "Definition2" : {
    "Definition1" : [ "" ],
    "Id" : "aeiou"
  },
  "Id" : "aeiou"
} ]}, {contentType=application/xml, example=<null>
  <Id>aeiou</Id>
</null>}]

     - returns: RequestBuilder<[Definition1]> 
     */
    open class func definition1WithRequestBuilder() -> RequestBuilder<[Definition1]> {
        let path = "/api/fakedef1"
        let URLString = PetstoreClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<[Definition1]>.Type = PetstoreClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Definition 2
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func definition2(completion: @escaping ((_ data: [Definition2]?, _ error: ErrorResponse?) -> Void)) {
        definition2WithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Definition 2
     
     - returns: Observable<[Definition2]>
     */
    open class func definition2() -> Observable<[Definition2]> {
        return Observable.create { observer -> Disposable in
            definition2() { data, error in
                if let error = error {
                    observer.on(.error(error as Error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return NopDisposable.instance
        }
    }

    /**
     Definition 2
     - GET /api/fakedef2
     - examples: [{contentType=application/json, example=[ {
  "Definition1" : [ {
    "Definition2" : "",
    "Id" : "aeiou"
  } ],
  "Id" : "aeiou"
} ]}, {contentType=application/xml, example=<null>
  <Id>aeiou</Id>
</null>}]
     - examples: [{contentType=application/json, example=[ {
  "Definition1" : [ {
    "Definition2" : "",
    "Id" : "aeiou"
  } ],
  "Id" : "aeiou"
} ]}, {contentType=application/xml, example=<null>
  <Id>aeiou</Id>
</null>}]

     - returns: RequestBuilder<[Definition2]> 
     */
    open class func definition2WithRequestBuilder() -> RequestBuilder<[Definition2]> {
        let path = "/api/fakedef2"
        let URLString = PetstoreClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<[Definition2]>.Type = PetstoreClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Definition 3
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func definition3(completion: @escaping ((_ data: [Definition3]?, _ error: ErrorResponse?) -> Void)) {
        definition3WithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Definition 3
     
     - returns: Observable<[Definition3]>
     */
    open class func definition3() -> Observable<[Definition3]> {
        return Observable.create { observer -> Disposable in
            definition3() { data, error in
                if let error = error {
                    observer.on(.error(error as Error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return NopDisposable.instance
        }
    }

    /**
     Definition 3
     - GET /api/fakedef3
     - examples: [{contentType=application/json, example=[ {
  "Definition3" : [ "" ],
  "Id" : "aeiou"
} ]}, {contentType=application/xml, example=<null>
  <Id>aeiou</Id>
</null>}]
     - examples: [{contentType=application/json, example=[ {
  "Definition3" : [ "" ],
  "Id" : "aeiou"
} ]}, {contentType=application/xml, example=<null>
  <Id>aeiou</Id>
</null>}]

     - returns: RequestBuilder<[Definition3]> 
     */
    open class func definition3WithRequestBuilder() -> RequestBuilder<[Definition3]> {
        let path = "/api/fakedef3"
        let URLString = PetstoreClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<[Definition3]>.Type = PetstoreClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
