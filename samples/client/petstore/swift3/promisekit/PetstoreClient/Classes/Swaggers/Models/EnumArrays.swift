//
// EnumArrays.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation


open class EnumArrays: NSObject, NSCoding ,JSONEncodable {

    public enum JustSymbol: String { 
        case greaterThanOrEqualTo = ">="
        case dollar = "$"
    }
    public enum ArrayEnum: String { 
        case fish = "fish"
        case crab = "crab"
    }
    public var justSymbol: JustSymbol?
    public var arrayEnum: [ArrayEnum]?

    public override init() {}


    public required init?(coder aDecoder: NSCoder){
        self.justSymbol = aDecoder.decodeObject(forKey: "justSymbol") as? JustSymbol
        self.arrayEnum = aDecoder.decodeObject(forKey: "arrayEnum") as? [ArrayEnum]
    }
    // MARK: JSONEncodable
    open func encodeToJSON() -> Any {
        var nillableDictionary = [String:Any?]()
        nillableDictionary["just_symbol"] = self.justSymbol?.rawValue
        nillableDictionary["array_enum"] = self.arrayEnum?.map({$0.rawValue}).encodeToJSON()

        let dictionary: [String:Any] = APIHelper.rejectNil(nillableDictionary) ?? [:]
        return dictionary
    }

    public func encode(with aCoder: NSCoder) {
        aCoder.encode(justSymbol, forKey: "justSymbol")
        aCoder.encode(arrayEnum, forKey: "arrayEnum")
    }
}
