/**
* Swagger Petstore
* This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\
*
* OpenAPI spec version: 1.0.0
* Contact: apiteam@swagger.io
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/
package io.swagger.client.models

import com.google.gson.TypeAdapter
import com.google.gson.annotations.JsonAdapter
import com.google.gson.stream.JsonReader
import com.google.gson.stream.JsonWriter
import io.swagger.client.models.OuterEnum

/**
 * 
 * @param enum_string 
 * @param enum_string_required 
 * @param enum_integer 
 * @param enum_number 
 * @param outerEnum 
*/
data class EnumTest (
    val enum_string_required: EnumStringRequired,
    val enum_string: EnumString? = null,
    val enum_integer: EnumInteger? = null,
    val enum_number: EnumNumber? = null,
    val outerEnum: OuterEnum? = null
) {
    /**
    * 
    * Values: UPPER,LOWER,EMPTY
    */
    @JsonAdapter(EnumString.Adapter::class)
    enum class EnumString(val value: kotlin.String){
    
        UPPER("UPPER"),
    
        LOWER("lower"),
    
        EMPTY("");
    

        companion object {
            fun fromValue(text: kotlin.String): EnumString? {
                return EnumString.values().firstOrNull {
                    it.value == text
                }
            }
        }

        inner class Adapter : TypeAdapter<EnumString>() {
            override fun write(jsonWriter: JsonWriter, enumeration: EnumString) {
                jsonWriter.value(enumeration.value)
            }

            override fun read(jsonReader: JsonReader): EnumString? {
                val value = jsonReader.nextString()
                return  EnumString.fromValue(value)
            }
        }
    }

    /**
    * 
    * Values: UPPER,LOWER,EMPTY
    */
    @JsonAdapter(EnumStringRequired.Adapter::class)
    enum class EnumStringRequired(val value: kotlin.String){
    
        UPPER("UPPER"),
    
        LOWER("lower"),
    
        EMPTY("");
    

        companion object {
            fun fromValue(text: kotlin.String): EnumStringRequired? {
                return EnumStringRequired.values().firstOrNull {
                    it.value == text
                }
            }
        }

        inner class Adapter : TypeAdapter<EnumStringRequired>() {
            override fun write(jsonWriter: JsonWriter, enumeration: EnumStringRequired) {
                jsonWriter.value(enumeration.value)
            }

            override fun read(jsonReader: JsonReader): EnumStringRequired? {
                val value = jsonReader.nextString()
                return  EnumStringRequired.fromValue(value)
            }
        }
    }

    /**
    * 
    * Values: _1,MINUS1
    */
    @JsonAdapter(EnumInteger.Adapter::class)
    enum class EnumInteger(val value: kotlin.Int){
    
        _1(1),
    
        MINUS1(-1);
    

        companion object {
            fun fromValue(text: kotlin.String): EnumInteger? {
                return EnumInteger.values().firstOrNull {
                    it.value.toString() == text
                }
            }
        }

        inner class Adapter : TypeAdapter<EnumInteger>() {
            override fun write(jsonWriter: JsonWriter, enumeration: EnumInteger) {
                jsonWriter.value(enumeration.value)
            }

            override fun read(jsonReader: JsonReader): EnumInteger? {
                val value = jsonReader.nextString()
                return  EnumInteger.fromValue(value)
            }
        }
    }

    /**
    * 
    * Values: _1PERIOD1,MINUS1PERIOD2
    */
    @JsonAdapter(EnumNumber.Adapter::class)
    enum class EnumNumber(val value: kotlin.Double){
    
        _1PERIOD1(1.1),
    
        MINUS1PERIOD2(-1.2);
    

        companion object {
            fun fromValue(text: kotlin.String): EnumNumber? {
                return EnumNumber.values().firstOrNull {
                    it.value.toString() == text
                }
            }
        }

        inner class Adapter : TypeAdapter<EnumNumber>() {
            override fun write(jsonWriter: JsonWriter, enumeration: EnumNumber) {
                jsonWriter.value(enumeration.value)
            }

            override fun read(jsonReader: JsonReader): EnumNumber? {
                val value = jsonReader.nextString()
                return  EnumNumber.fromValue(value)
            }
        }
    }

}
