/**
* Swagger Petstore
* This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\
*
* OpenAPI spec version: 1.0.0
* Contact: apiteam@swagger.io
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/
package io.swagger.client.models

import com.google.gson.TypeAdapter
import com.google.gson.annotations.JsonAdapter
import com.google.gson.stream.JsonReader
import com.google.gson.stream.JsonWriter
import io.swagger.client.models.Category
import io.swagger.client.models.Tag

/**
 * 
 * @param id 
 * @param category 
 * @param name 
 * @param photoUrls 
 * @param tags 
 * @param status pet status in the store
*/
data class Pet (
    val name: kotlin.String,
    val photoUrls: kotlin.collections.List<kotlin.String>,
    val id: kotlin.Long? = null,
    val category: Category? = null,
    val tags: kotlin.collections.List<Tag>? = null,
    /* pet status in the store */
    val status: StatusEnum? = null
) {
    /**
    * pet status in the store
    * Values: AVAILABLE,PENDING,SOLD
    */
    @JsonAdapter(StatusEnum.Adapter::class)
    enum class StatusEnum(val value: kotlin.String){
    
        AVAILABLE("available"),
    
        PENDING("pending"),
    
        SOLD("sold");
    

        companion object {
            fun fromValue(text: kotlin.String): StatusEnum? {
                return StatusEnum.values().firstOrNull {
                    it.value == text
                }
            }
        }

        inner class Adapter : TypeAdapter<StatusEnum>() {
            override fun write(jsonWriter: JsonWriter, enumeration: StatusEnum) {
                jsonWriter.value(enumeration.value)
            }

            override fun read(jsonReader: JsonReader): StatusEnum? {
                val value = jsonReader.nextString()
                return  StatusEnum.fromValue(value)
            }
        }
    }

}
