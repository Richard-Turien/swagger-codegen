/**
* Swagger Petstore
* This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\
*
* OpenAPI spec version: 1.0.0
* Contact: apiteam@swagger.io
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/
package io.swagger.client.models

import com.google.gson.TypeAdapter
import com.google.gson.annotations.JsonAdapter
import com.google.gson.stream.JsonReader
import com.google.gson.stream.JsonWriter

/**
 * 
 * @param just_symbol 
 * @param array_enum 
*/
data class EnumArrays (
    val just_symbol: JustSymbolEnum? = null,
    val array_enum: kotlin.collections.List<ArrayEnum>? = null
) {
    /**
    * 
    * Values: GREATER_THANEQUAL,DOLLAR
    */
    @JsonAdapter(JustSymbolEnum.Adapter::class)
    enum class JustSymbolEnum(val value: kotlin.String){
    
        GREATER_THANEQUAL(">="),
    
        DOLLAR("$");
    

        companion object {
            fun fromValue(text: kotlin.String): JustSymbolEnum? {
                return JustSymbolEnum.values().firstOrNull {
                    it.value == text
                }
            }
        }

        inner class Adapter : TypeAdapter<JustSymbolEnum>() {
            override fun write(jsonWriter: JsonWriter, enumeration: JustSymbolEnum) {
                jsonWriter.value(enumeration.value)
            }

            override fun read(jsonReader: JsonReader): JustSymbolEnum? {
                val value = jsonReader.nextString()
                return  JustSymbolEnum.fromValue(value)
            }
        }
    }

    /**
    * 
    * Values: FISH,CRAB
    */
    @JsonAdapter(ArrayEnum.Adapter::class)
    enum class ArrayEnum(val value: kotlin.String){
    
        FISH("fish"),
    
        CRAB("crab");
    

        companion object {
            fun fromValue(text: kotlin.String): ArrayEnum? {
                return ArrayEnum.values().firstOrNull {
                    it.value == text
                }
            }
        }

        inner class Adapter : TypeAdapter<ArrayEnum>() {
            override fun write(jsonWriter: JsonWriter, enumeration: ArrayEnum) {
                jsonWriter.value(enumeration.value)
            }

            override fun read(jsonReader: JsonReader): ArrayEnum? {
                val value = jsonReader.nextString()
                return  ArrayEnum.fromValue(value)
            }
        }
    }

}
