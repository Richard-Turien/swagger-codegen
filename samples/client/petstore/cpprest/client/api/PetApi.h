/**
 * Swagger Petstore
 * This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.0-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * PetApi.h
 *
 * 
 */

#ifndef IO_SWAGGER_CLIENT_API_PetApi_H_
#define IO_SWAGGER_CLIENT_API_PetApi_H_


#include <client/ApiClient.h>

#include <client/model/ApiResponse.h>
#include <client/HttpContent.h>
#include <client/model/Pet.h>
#include <cpprest/details/basic_types.h>

#include <boost/optional.hpp>

namespace io {
namespace swagger {
namespace client {
namespace api {

using namespace io::swagger::client::model;

class  IPetApi
{
public:
    virtual ~IPetApi() = default;
    virtual pplx::task<void> addPet(
        std::shared_ptr<Pet> body
    ) = 0;
    virtual pplx::task<void> deletePet(
        int64_t petId,
        boost::optional<utility::string_t> apiKey
    ) = 0;
    virtual pplx::task<std::vector<std::shared_ptr<Pet>>> findPetsByStatus(
        std::vector<utility::string_t> status
    ) = 0;
    virtual pplx::task<std::vector<std::shared_ptr<Pet>>> findPetsByTags(
        std::vector<utility::string_t> tags
    ) = 0;
    virtual pplx::task<std::shared_ptr<Pet>> getPetById(
        int64_t petId
    ) = 0;
    virtual pplx::task<void> updatePet(
        std::shared_ptr<Pet> body
    ) = 0;
    virtual pplx::task<void> updatePetWithForm(
        int64_t petId,
        boost::optional<utility::string_t> name,
        boost::optional<utility::string_t> status
    ) = 0;
    virtual pplx::task<std::shared_ptr<ApiResponse>> uploadFile(
        int64_t petId,
        boost::optional<utility::string_t> additionalMetadata,
        boost::optional<std::shared_ptr<HttpContent>> file
    ) = 0;
};


class  PetApi : public IPetApi
{
public:
    PetApi( std::shared_ptr<ApiClient> apiClient );
    ~PetApi() override;
    /// <summary>
    /// Add a new pet to the store
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="body">Pet object that needs to be added to the store</param>
    pplx::task<void> addPet(
        std::shared_ptr<Pet> body
    ) override;
    /// <summary>
    /// Deletes a pet
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="petId">Pet id to delete</param>
    /// <param name="apiKey"> (optional)</param>
    pplx::task<void> deletePet(
        int64_t petId,
        boost::optional<utility::string_t> apiKey
    ) override;
    /// <summary>
    /// Finds Pets by status
    /// </summary>
    /// <remarks>
    /// Multiple status values can be provided with comma separated strings
    /// </remarks>
    /// <param name="status">Status values that need to be considered for filter</param>
    pplx::task<std::vector<std::shared_ptr<Pet>>> findPetsByStatus(
        std::vector<utility::string_t> status
    ) override;
    /// <summary>
    /// Finds Pets by tags
    /// </summary>
    /// <remarks>
    /// Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
    /// </remarks>
    /// <param name="tags">Tags to filter by</param>
    pplx::task<std::vector<std::shared_ptr<Pet>>> findPetsByTags(
        std::vector<utility::string_t> tags
    ) override;
    /// <summary>
    /// Find pet by ID
    /// </summary>
    /// <remarks>
    /// Returns a single pet
    /// </remarks>
    /// <param name="petId">ID of pet to return</param>
    pplx::task<std::shared_ptr<Pet>> getPetById(
        int64_t petId
    ) override;
    /// <summary>
    /// Update an existing pet
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="body">Pet object that needs to be added to the store</param>
    pplx::task<void> updatePet(
        std::shared_ptr<Pet> body
    ) override;
    /// <summary>
    /// Updates a pet in the store with form data
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="petId">ID of pet that needs to be updated</param>
    /// <param name="name">Updated name of the pet (optional)</param>
    /// <param name="status">Updated status of the pet (optional)</param>
    pplx::task<void> updatePetWithForm(
        int64_t petId,
        boost::optional<utility::string_t> name,
        boost::optional<utility::string_t> status
    ) override;
    /// <summary>
    /// uploads an image
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="petId">ID of pet to update</param>
    /// <param name="additionalMetadata">Additional data to pass to server (optional)</param>
    /// <param name="file">file to upload (optional)</param>
    pplx::task<std::shared_ptr<ApiResponse>> uploadFile(
        int64_t petId,
        boost::optional<utility::string_t> additionalMetadata,
        boost::optional<std::shared_ptr<HttpContent>> file
    ) override;

protected:
    std::shared_ptr<ApiClient> m_ApiClient;
};

}
}
}
}

#endif /* IO_SWAGGER_CLIENT_API_PetApi_H_ */

