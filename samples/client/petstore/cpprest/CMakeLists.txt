#
# Swagger Petstore
# This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.
#
# OpenAPI spec version: 1.0.0
#
# https://github.com/swagger-api/swagger-codegen.git
#
# NOTE: Auto generated by the swagger code generator program.

cmake_minimum_required (VERSION 2.8)

#PROJECT's NAME
project(CppRestSwaggerClient)


# THE LOCATION OF OUTPUT BINARIES
set(CMAKE_LIBRARY_DIR ${PROJECT_SOURCE_DIR}/lib)
set(LIBRARY_OUTPUT_PATH ${CMAKE_LIBRARY_DIR})

set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11")

if(NOT CMAKE_BUILD_TYPE)
    set(CMAKE_BUILD_TYPE Release)
endif()

# BUILD TYPE
message("A ${CMAKE_BUILD_TYPE} build configuration is detected")


# set path to cpp rest sdk (will be built as a dependency)
#set(CPPREST_ROOT ${PROJECT_SOURCE_DIR}/../../../developmentTools/3rdParty/cpprest)

if( NOT DEFINED CPPREST_ROOT )
    message( FATAL_ERROR "Failed to find cpprest SDK (or missing components). Double check that \"CPPREST_ROOT\" is properly set")
endif( NOT DEFINED CPPREST_ROOT )

# Don't build the tests and samples of cpprest
set(BUILD_TESTS OFF CACHE BOOL "Don't build cpprest tests")
set(BUILD_SAMPLES OFF CACHE BOOL "Don't build cpprest samples")

# Build cpprest
add_subdirectory(${CPPREST_ROOT} cpprest-lib)


#SUPPORTING FILES
set(SUPPORTING_FILES  "client/ApiClient"
                      "client/ApiConfiguration"
                      "client/ApiException"
                      "client/HttpContent"
                      "client/IHttpBody"
                      "client/JsonBody"
                      "client/ModelBase"
                      "client/MultipartFormData"
                      "client/Object")
#SOURCE FILES
file(GLOB SOURCE_FILES  "client/api/*"  "client/model/*")

add_library(${PROJECT_NAME} ${SUPPORTING_FILES} ${SOURCE_FILES})

target_include_directories(${PROJECT_NAME} PUBLIC ${PROJECT_SOURCE_DIR})
target_link_libraries(${PROJECT_NAME} cpprest)

