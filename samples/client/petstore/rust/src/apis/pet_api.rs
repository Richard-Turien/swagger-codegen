/* 
 * Swagger Petstore
 *
 * This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

use hyper;
use hyper::header::{HeaderName, HeaderValue};
use hyper::rt::{Future, Stream};
use serde_json;

use super::{Error, configuration};

pub struct PetApiClient<'a, C: hyper::client::connect::Connect> {
    configuration: &'a configuration::Configuration<C>,
}

impl<'a, C: hyper::client::connect::Connect> PetApiClient<'a, C> {
    pub fn new(configuration: &'a configuration::Configuration<C>) -> PetApiClient<'a, C> {
        PetApiClient {
            configuration: configuration,
        }
    }
}

pub trait PetApi {
    fn add_pet(&self, body: ::models::Pet) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn delete_pet(&self, pet_id: i64, api_key: &str) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn find_pets_by_status(&self, status: Vec<String>) -> Box<dyn Future<Item = Vec<::models::Pet>, Error = Error<serde_json::Value>>>;
    fn find_pets_by_tags(&self, tags: Vec<String>) -> Box<dyn Future<Item = Vec<::models::Pet>, Error = Error<serde_json::Value>>>;
    fn get_pet_by_id(&self, pet_id: i64) -> Box<dyn Future<Item = ::models::Pet, Error = Error<serde_json::Value>>>;
    fn update_pet(&self, body: ::models::Pet) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn update_pet_with_form(&self, pet_id: i64, name: &str, status: &str) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn upload_file(&self, pet_id: i64, additional_metadata: &str, file: ::models::File) -> Box<dyn Future<Item = ::models::ApiResponse, Error = Error<serde_json::Value>>>;
}

impl<'a, C: hyper::client::connect::Connect>PetApi for PetApiClient<'a, C> where C: 'static {
    fn add_pet(&self, body: ::models::Pet) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let method = hyper::Method::POST;
        let serialized = serde_json::to_string(&body).unwrap();
        let len = serialized.len();

        let mut auth_headers = std::collections::HashMap::<hyper::header::HeaderName, String>::new();
        let mut auth_query = std::collections::HashMap::<String, String>::new();
        if let Some(ref token) = self.configuration.oauth_access_token {
            let auth = hyper_old_types::header::Authorization(
                hyper_old_types::header::Bearer {
                    token: token.to_owned(),
                }
            );
            auth_headers.insert(hyper::header::AUTHORIZATION, auth.to_string());
        };

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());
            for (ref key, ref val) in &auth_query {
                query.append_pair(key, val);
            }
            query.finish()
        };
        let uri_str = format!("{}/pet?{}", self.configuration.base_path, query_string);

        let mut req = hyper::Request::new(hyper::Body::from(serialized));
        *req.method_mut() = method.clone();

        let uri: hyper::Uri = uri_str.parse().unwrap();
        *req.uri_mut() = uri.clone();

        if let Some(ref user_agent) = self.configuration.user_agent {
            req.headers_mut().insert(hyper::header::CONTENT_TYPE, HeaderValue::from_str(&user_agent).unwrap());
        }


        for (ref key, ref val) in auth_headers {
            req.headers_mut().insert(key, HeaderValue::from_str(&val).unwrap());
        }

        req.headers_mut().insert(hyper::header::CONTENT_TYPE, HeaderValue::from_static("application/json"));
        req.headers_mut().insert(hyper::header::CONTENT_LENGTH, HeaderValue::from_str(&len.to_string()).unwrap());

        // send request
        Box::new(
        self.configuration.client.request(req)
            .map_err(|e| Error::from(e))
            .and_then(|resp| {
                let status = resp.status();
                resp.into_body().concat2()
                    .and_then(move |body| Ok((status, body)))
                    .map_err(|e| Error::from(e))
            })
            .and_then(|(status, body)| {
                if status.is_success() {
                    Ok(body)
                } else {
                    Err(Error::from((status, &*body)))
                }
            })
            .and_then(|_| futures::future::ok(()))
        )
    }

    fn delete_pet(&self, pet_id: i64, api_key: &str) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let method = hyper::Method::DELETE;

        let mut auth_headers = std::collections::HashMap::<hyper::header::HeaderName, String>::new();
        let mut auth_query = std::collections::HashMap::<String, String>::new();
        if let Some(ref token) = self.configuration.oauth_access_token {
            let auth = hyper_old_types::header::Authorization(
                hyper_old_types::header::Bearer {
                    token: token.to_owned(),
                }
            );
            auth_headers.insert(hyper::header::AUTHORIZATION, auth.to_string());
        };

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());
            for (ref key, ref val) in &auth_query {
                query.append_pair(key, val);
            }
            query.finish()
        };
        let uri_str = format!("{}/pet/{petId}?{}", self.configuration.base_path, query_string, petId=pet_id);

        let mut req = hyper::Request::new(hyper::Body::empty());
        *req.method_mut() = method.clone();

        let uri: hyper::Uri = uri_str.parse().unwrap();
        *req.uri_mut() = uri.clone();

        if let Some(ref user_agent) = self.configuration.user_agent {
            req.headers_mut().insert(hyper::header::CONTENT_TYPE, HeaderValue::from_str(&user_agent).unwrap());
        }

        {
            let mut headers = req.headers_mut();
            headers.insert(HeaderName::from_static("api_key"), HeaderValue::from_str(api_key).unwrap());
        }

        for (ref key, ref val) in auth_headers {
            req.headers_mut().insert(key, HeaderValue::from_str(&val).unwrap());
        }


        // send request
        Box::new(
        self.configuration.client.request(req)
            .map_err(|e| Error::from(e))
            .and_then(|resp| {
                let status = resp.status();
                resp.into_body().concat2()
                    .and_then(move |body| Ok((status, body)))
                    .map_err(|e| Error::from(e))
            })
            .and_then(|(status, body)| {
                if status.is_success() {
                    Ok(body)
                } else {
                    Err(Error::from((status, &*body)))
                }
            })
            .and_then(|_| futures::future::ok(()))
        )
    }

    fn find_pets_by_status(&self, status: Vec<String>) -> Box<dyn Future<Item = Vec<::models::Pet>, Error = Error<serde_json::Value>>> {
        let method = hyper::Method::GET;

        let mut auth_headers = std::collections::HashMap::<hyper::header::HeaderName, String>::new();
        let mut auth_query = std::collections::HashMap::<String, String>::new();
        if let Some(ref token) = self.configuration.oauth_access_token {
            let auth = hyper_old_types::header::Authorization(
                hyper_old_types::header::Bearer {
                    token: token.to_owned(),
                }
            );
            auth_headers.insert(hyper::header::AUTHORIZATION, auth.to_string());
        };

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());
            query.append_pair("status", &status.join(",").to_string());
            for (ref key, ref val) in &auth_query {
                query.append_pair(key, val);
            }
            query.finish()
        };
        let uri_str = format!("{}/pet/findByStatus?{}", self.configuration.base_path, query_string);

        let mut req = hyper::Request::new(hyper::Body::empty());
        *req.method_mut() = method.clone();

        let uri: hyper::Uri = uri_str.parse().unwrap();
        *req.uri_mut() = uri.clone();

        if let Some(ref user_agent) = self.configuration.user_agent {
            req.headers_mut().insert(hyper::header::CONTENT_TYPE, HeaderValue::from_str(&user_agent).unwrap());
        }


        for (ref key, ref val) in auth_headers {
            req.headers_mut().insert(key, HeaderValue::from_str(&val).unwrap());
        }


        // send request
        Box::new(
        self.configuration.client.request(req)
            .map_err(|e| Error::from(e))
            .and_then(|resp| {
                let status = resp.status();
                resp.into_body().concat2()
                    .and_then(move |body| Ok((status, body)))
                    .map_err(|e| Error::from(e))
            })
            .and_then(|(status, body)| {
                if status.is_success() {
                    Ok(body)
                } else {
                    Err(Error::from((status, &*body)))
                }
            })
            .and_then(|body| {
                let parsed: Result<Vec<::models::Pet>, _> = serde_json::from_slice(&body);
                parsed.map_err(|e| Error::from(e))
            })
        )
    }

    fn find_pets_by_tags(&self, tags: Vec<String>) -> Box<dyn Future<Item = Vec<::models::Pet>, Error = Error<serde_json::Value>>> {
        let method = hyper::Method::GET;

        let mut auth_headers = std::collections::HashMap::<hyper::header::HeaderName, String>::new();
        let mut auth_query = std::collections::HashMap::<String, String>::new();
        if let Some(ref token) = self.configuration.oauth_access_token {
            let auth = hyper_old_types::header::Authorization(
                hyper_old_types::header::Bearer {
                    token: token.to_owned(),
                }
            );
            auth_headers.insert(hyper::header::AUTHORIZATION, auth.to_string());
        };

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());
            query.append_pair("tags", &tags.join(",").to_string());
            for (ref key, ref val) in &auth_query {
                query.append_pair(key, val);
            }
            query.finish()
        };
        let uri_str = format!("{}/pet/findByTags?{}", self.configuration.base_path, query_string);

        let mut req = hyper::Request::new(hyper::Body::empty());
        *req.method_mut() = method.clone();

        let uri: hyper::Uri = uri_str.parse().unwrap();
        *req.uri_mut() = uri.clone();

        if let Some(ref user_agent) = self.configuration.user_agent {
            req.headers_mut().insert(hyper::header::CONTENT_TYPE, HeaderValue::from_str(&user_agent).unwrap());
        }


        for (ref key, ref val) in auth_headers {
            req.headers_mut().insert(key, HeaderValue::from_str(&val).unwrap());
        }


        // send request
        Box::new(
        self.configuration.client.request(req)
            .map_err(|e| Error::from(e))
            .and_then(|resp| {
                let status = resp.status();
                resp.into_body().concat2()
                    .and_then(move |body| Ok((status, body)))
                    .map_err(|e| Error::from(e))
            })
            .and_then(|(status, body)| {
                if status.is_success() {
                    Ok(body)
                } else {
                    Err(Error::from((status, &*body)))
                }
            })
            .and_then(|body| {
                let parsed: Result<Vec<::models::Pet>, _> = serde_json::from_slice(&body);
                parsed.map_err(|e| Error::from(e))
            })
        )
    }

    fn get_pet_by_id(&self, pet_id: i64) -> Box<dyn Future<Item = ::models::Pet, Error = Error<serde_json::Value>>> {
        let method = hyper::Method::GET;

        let mut auth_headers = std::collections::HashMap::<hyper::header::HeaderName, String>::new();
        let mut auth_query = std::collections::HashMap::<String, String>::new();
        if let Some(ref apikey) = self.configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            auth_headers.insert(HeaderName::from_static("api_key"), val);
        };

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());
            for (ref key, ref val) in &auth_query {
                query.append_pair(key, val);
            }
            query.finish()
        };
        let uri_str = format!("{}/pet/{petId}?{}", self.configuration.base_path, query_string, petId=pet_id);

        let mut req = hyper::Request::new(hyper::Body::empty());
        *req.method_mut() = method.clone();

        let uri: hyper::Uri = uri_str.parse().unwrap();
        *req.uri_mut() = uri.clone();

        if let Some(ref user_agent) = self.configuration.user_agent {
            req.headers_mut().insert(hyper::header::CONTENT_TYPE, HeaderValue::from_str(&user_agent).unwrap());
        }


        for (ref key, ref val) in auth_headers {
            req.headers_mut().insert(key, HeaderValue::from_str(&val).unwrap());
        }


        // send request
        Box::new(
        self.configuration.client.request(req)
            .map_err(|e| Error::from(e))
            .and_then(|resp| {
                let status = resp.status();
                resp.into_body().concat2()
                    .and_then(move |body| Ok((status, body)))
                    .map_err(|e| Error::from(e))
            })
            .and_then(|(status, body)| {
                if status.is_success() {
                    Ok(body)
                } else {
                    Err(Error::from((status, &*body)))
                }
            })
            .and_then(|body| {
                let parsed: Result<::models::Pet, _> = serde_json::from_slice(&body);
                parsed.map_err(|e| Error::from(e))
            })
        )
    }

    fn update_pet(&self, body: ::models::Pet) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let method = hyper::Method::PUT;
        let serialized = serde_json::to_string(&body).unwrap();
        let len = serialized.len();

        let mut auth_headers = std::collections::HashMap::<hyper::header::HeaderName, String>::new();
        let mut auth_query = std::collections::HashMap::<String, String>::new();
        if let Some(ref token) = self.configuration.oauth_access_token {
            let auth = hyper_old_types::header::Authorization(
                hyper_old_types::header::Bearer {
                    token: token.to_owned(),
                }
            );
            auth_headers.insert(hyper::header::AUTHORIZATION, auth.to_string());
        };

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());
            for (ref key, ref val) in &auth_query {
                query.append_pair(key, val);
            }
            query.finish()
        };
        let uri_str = format!("{}/pet?{}", self.configuration.base_path, query_string);

        let mut req = hyper::Request::new(hyper::Body::from(serialized));
        *req.method_mut() = method.clone();

        let uri: hyper::Uri = uri_str.parse().unwrap();
        *req.uri_mut() = uri.clone();

        if let Some(ref user_agent) = self.configuration.user_agent {
            req.headers_mut().insert(hyper::header::CONTENT_TYPE, HeaderValue::from_str(&user_agent).unwrap());
        }


        for (ref key, ref val) in auth_headers {
            req.headers_mut().insert(key, HeaderValue::from_str(&val).unwrap());
        }

        req.headers_mut().insert(hyper::header::CONTENT_TYPE, HeaderValue::from_static("application/json"));
        req.headers_mut().insert(hyper::header::CONTENT_LENGTH, HeaderValue::from_str(&len.to_string()).unwrap());

        // send request
        Box::new(
        self.configuration.client.request(req)
            .map_err(|e| Error::from(e))
            .and_then(|resp| {
                let status = resp.status();
                resp.into_body().concat2()
                    .and_then(move |body| Ok((status, body)))
                    .map_err(|e| Error::from(e))
            })
            .and_then(|(status, body)| {
                if status.is_success() {
                    Ok(body)
                } else {
                    Err(Error::from((status, &*body)))
                }
            })
            .and_then(|_| futures::future::ok(()))
        )
    }

    fn update_pet_with_form(&self, pet_id: i64, name: &str, status: &str) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let method = hyper::Method::POST;

        let mut auth_headers = std::collections::HashMap::<hyper::header::HeaderName, String>::new();
        let mut auth_query = std::collections::HashMap::<String, String>::new();
        if let Some(ref token) = self.configuration.oauth_access_token {
            let auth = hyper_old_types::header::Authorization(
                hyper_old_types::header::Bearer {
                    token: token.to_owned(),
                }
            );
            auth_headers.insert(hyper::header::AUTHORIZATION, auth.to_string());
        };

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());
            for (ref key, ref val) in &auth_query {
                query.append_pair(key, val);
            }
            query.finish()
        };
        let uri_str = format!("{}/pet/{petId}?{}", self.configuration.base_path, query_string, petId=pet_id);

        let mut req = hyper::Request::new(hyper::Body::empty());
        *req.method_mut() = method.clone();

        let uri: hyper::Uri = uri_str.parse().unwrap();
        *req.uri_mut() = uri.clone();

        if let Some(ref user_agent) = self.configuration.user_agent {
            req.headers_mut().insert(hyper::header::CONTENT_TYPE, HeaderValue::from_str(&user_agent).unwrap());
        }


        for (ref key, ref val) in auth_headers {
            req.headers_mut().insert(key, HeaderValue::from_str(&val).unwrap());
        }


        // send request
        Box::new(
        self.configuration.client.request(req)
            .map_err(|e| Error::from(e))
            .and_then(|resp| {
                let status = resp.status();
                resp.into_body().concat2()
                    .and_then(move |body| Ok((status, body)))
                    .map_err(|e| Error::from(e))
            })
            .and_then(|(status, body)| {
                if status.is_success() {
                    Ok(body)
                } else {
                    Err(Error::from((status, &*body)))
                }
            })
            .and_then(|_| futures::future::ok(()))
        )
    }

    fn upload_file(&self, pet_id: i64, additional_metadata: &str, file: ::models::File) -> Box<dyn Future<Item = ::models::ApiResponse, Error = Error<serde_json::Value>>> {
        let method = hyper::Method::POST;

        let mut auth_headers = std::collections::HashMap::<hyper::header::HeaderName, String>::new();
        let mut auth_query = std::collections::HashMap::<String, String>::new();
        if let Some(ref token) = self.configuration.oauth_access_token {
            let auth = hyper_old_types::header::Authorization(
                hyper_old_types::header::Bearer {
                    token: token.to_owned(),
                }
            );
            auth_headers.insert(hyper::header::AUTHORIZATION, auth.to_string());
        };

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());
            for (ref key, ref val) in &auth_query {
                query.append_pair(key, val);
            }
            query.finish()
        };
        let uri_str = format!("{}/pet/{petId}/uploadImage?{}", self.configuration.base_path, query_string, petId=pet_id);

        let mut req = hyper::Request::new(hyper::Body::empty());
        *req.method_mut() = method.clone();

        let uri: hyper::Uri = uri_str.parse().unwrap();
        *req.uri_mut() = uri.clone();

        if let Some(ref user_agent) = self.configuration.user_agent {
            req.headers_mut().insert(hyper::header::CONTENT_TYPE, HeaderValue::from_str(&user_agent).unwrap());
        }


        for (ref key, ref val) in auth_headers {
            req.headers_mut().insert(key, HeaderValue::from_str(&val).unwrap());
        }


        // send request
        Box::new(
        self.configuration.client.request(req)
            .map_err(|e| Error::from(e))
            .and_then(|resp| {
                let status = resp.status();
                resp.into_body().concat2()
                    .and_then(move |body| Ok((status, body)))
                    .map_err(|e| Error::from(e))
            })
            .and_then(|(status, body)| {
                if status.is_success() {
                    Ok(body)
                } else {
                    Err(Error::from((status, &*body)))
                }
            })
            .and_then(|body| {
                let parsed: Result<::models::ApiResponse, _> = serde_json::from_slice(&body);
                parsed.map_err(|e| Error::from(e))
            })
        )
    }

}
