/* 
 * Swagger Petstore
 *
 * This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Definition 2
    /// </summary>
    [DataContract]
    public partial class Definition1 :  IEquatable<Definition1>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Definition1" /> class.
        /// </summary>
        /// <param name="Definition2">Definition2.</param>
        /// <param name="Id">Content Id for lookup.</param>
        public Definition1(Definition2 Definition2 = default(Definition2), string Id = default(string))
        {
            this.Definition2 = Definition2;
            this.Id = Id;
        }
        
        /// <summary>
        /// Gets or Sets Definition2
        /// </summary>
        [DataMember(Name="Definition2", EmitDefaultValue=false)]
        public Definition2 Definition2 { get; set; }
        /// <summary>
        /// Content Id for lookup
        /// </summary>
        /// <value>Content Id for lookup</value>
        [DataMember(Name="Id", EmitDefaultValue=false)]
        public string Id { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Definition1 {\n");
            sb.Append("  Definition2: ").Append(Definition2).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Definition1);
        }

        /// <summary>
        /// Returns true if Definition1 instances are equal
        /// </summary>
        /// <param name="other">Instance of Definition1 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Definition1 other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Definition2 == other.Definition2 ||
                    this.Definition2 != null &&
                    this.Definition2.Equals(other.Definition2)
                ) && 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Definition2 != null)
                    hash = hash * 59 + this.Definition2.GetHashCode();
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                return hash;
            }
        }
    }

}
