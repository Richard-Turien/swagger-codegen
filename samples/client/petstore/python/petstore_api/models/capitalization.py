# coding: utf-8

"""
    Swagger Petstore

    This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: apiteam@swagger.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401
from typing import TYPE_CHECKING

if TYPE_CHECKING:
    import typing
    import datetime  # noqa: F401
    from petstore_api.models import *

import six

from petstore_api.configuration import Configuration


class Capitalization(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'small_camel': 'str',
        'capital_camel': 'str',
        'small_snake': 'str',
        'capital_snake': 'str',
        'sca_eth_flow_points': 'str',
        'att_name': 'str'
    }

    attribute_map = {
        'small_camel': 'smallCamel',
        'capital_camel': 'CapitalCamel',
        'small_snake': 'small_Snake',
        'capital_snake': 'Capital_Snake',
        'sca_eth_flow_points': 'SCA_ETH_Flow_Points',
        'att_name': 'ATT_NAME'
    }

    def __init__(self, small_camel: "typing.Optional[str]"=None, capital_camel: "typing.Optional[str]"=None, small_snake: "typing.Optional[str]"=None, capital_snake: "typing.Optional[str]"=None, sca_eth_flow_points: "typing.Optional[str]"=None, att_name: "typing.Optional[str]"=None, _configuration: "typing.Optional[Configuration]"=None) -> None:  # noqa: E501
        """Capitalization - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration: Configuration = _configuration

        self._small_camel: "str" = None
        self._capital_camel: "str" = None
        self._small_snake: "str" = None
        self._capital_snake: "str" = None
        self._sca_eth_flow_points: "str" = None
        self._att_name: "str" = None
        self.discriminator: None = None

        if small_camel is not None:
            self.small_camel = small_camel
        if capital_camel is not None:
            self.capital_camel = capital_camel
        if small_snake is not None:
            self.small_snake = small_snake
        if capital_snake is not None:
            self.capital_snake = capital_snake
        if sca_eth_flow_points is not None:
            self.sca_eth_flow_points = sca_eth_flow_points
        if att_name is not None:
            self.att_name = att_name

    @property
    def small_camel(self) -> "str":
        """Gets the small_camel of this Capitalization.  # noqa: E501


        :return: The small_camel of this Capitalization.  # noqa: E501
        :rtype: str
        """
        return self._small_camel

    @small_camel.setter
    def small_camel(self, small_camel: "str") -> None:
        """Sets the small_camel of this Capitalization.


        :param small_camel: The small_camel of this Capitalization.  # noqa: E501
        :type: str
        """

        self._small_camel = small_camel

    @property
    def capital_camel(self) -> "str":
        """Gets the capital_camel of this Capitalization.  # noqa: E501


        :return: The capital_camel of this Capitalization.  # noqa: E501
        :rtype: str
        """
        return self._capital_camel

    @capital_camel.setter
    def capital_camel(self, capital_camel: "str") -> None:
        """Sets the capital_camel of this Capitalization.


        :param capital_camel: The capital_camel of this Capitalization.  # noqa: E501
        :type: str
        """

        self._capital_camel = capital_camel

    @property
    def small_snake(self) -> "str":
        """Gets the small_snake of this Capitalization.  # noqa: E501


        :return: The small_snake of this Capitalization.  # noqa: E501
        :rtype: str
        """
        return self._small_snake

    @small_snake.setter
    def small_snake(self, small_snake: "str") -> None:
        """Sets the small_snake of this Capitalization.


        :param small_snake: The small_snake of this Capitalization.  # noqa: E501
        :type: str
        """

        self._small_snake = small_snake

    @property
    def capital_snake(self) -> "str":
        """Gets the capital_snake of this Capitalization.  # noqa: E501


        :return: The capital_snake of this Capitalization.  # noqa: E501
        :rtype: str
        """
        return self._capital_snake

    @capital_snake.setter
    def capital_snake(self, capital_snake: "str") -> None:
        """Sets the capital_snake of this Capitalization.


        :param capital_snake: The capital_snake of this Capitalization.  # noqa: E501
        :type: str
        """

        self._capital_snake = capital_snake

    @property
    def sca_eth_flow_points(self) -> "str":
        """Gets the sca_eth_flow_points of this Capitalization.  # noqa: E501


        :return: The sca_eth_flow_points of this Capitalization.  # noqa: E501
        :rtype: str
        """
        return self._sca_eth_flow_points

    @sca_eth_flow_points.setter
    def sca_eth_flow_points(self, sca_eth_flow_points: "str") -> None:
        """Sets the sca_eth_flow_points of this Capitalization.


        :param sca_eth_flow_points: The sca_eth_flow_points of this Capitalization.  # noqa: E501
        :type: str
        """

        self._sca_eth_flow_points = sca_eth_flow_points

    @property
    def att_name(self) -> "str":
        """Gets the att_name of this Capitalization.  # noqa: E501

        Name of the pet   # noqa: E501

        :return: The att_name of this Capitalization.  # noqa: E501
        :rtype: str
        """
        return self._att_name

    @att_name.setter
    def att_name(self, att_name: "str") -> None:
        """Sets the att_name of this Capitalization.

        Name of the pet   # noqa: E501

        :param att_name: The att_name of this Capitalization.  # noqa: E501
        :type: str
        """

        self._att_name = att_name

    def to_dict(self) -> "typing.Dict[str, typing.Any]":
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Capitalization, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self) -> str:
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other: "typing.Any") -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, Capitalization):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other: "typing.Any") -> bool:
        """Returns true if both objects are not equal"""
        if not isinstance(other, Capitalization):
            return True

        return self.to_dict() != other.to_dict()
