# coding: utf-8
""""
NOTE: This file is auto generated by the swagger-codegen.
Do not edit manually.
"""

from pprint import pformat
from six import iteritems


class Pet(object):
    """
    :ivar id: 
    :type id: int
    :ivar category: 
    :type category: Category
    :ivar name: 
    :type name: str
    :ivar photo_urls: 
    :type photo_urls: list[str]
    :ivar tags: 
    :type tags: list[Tag]
    :ivar status: pet status in the store
    :type status: str
    
    """
    def __init__(self, id=None, category=None, name=None, photo_urls=None, tags=None, status=None):
        self.swagger_type_by_variable_name = {
            'id': 'int',
            'category': 'Category',
            'name': 'str',
            'photo_urls': 'list[str]',
            'tags': 'list[Tag]',
            'status': 'str',
            
        }

        self.id = id
        self.category = category
        self.name = name
        self.photo_urls = photo_urls
        self.tags = tags
        self._status = status
    
    
    
    
    
    @property
    def status(self):
        return self._status

    @status.setter
    def status(self, status):
        allowed_values = ["available", "pending", "sold"]
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status`, must be one of {0}"
                .format(allowed_values)
            )
        self._status = status

    def to_dict(self):
        def to_dict_internal(attr):
            value = getattr(self, attr)
            if isinstance(value, list):
                return [x.to_dict() if hasattr(x, "to_dict") else x for x in value]
            elif hasattr(value, "to_dict"):
                return value.to_dict()
            else:
                return value

        return {attr: to_dict_internal(attr) for attr in self.swagger_type_by_variable_name.keys()}

    def __repr__(self):
        return pformat(self.to_dict())
