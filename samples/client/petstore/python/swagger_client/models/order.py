# coding: utf-8
""""
NOTE: This file is auto generated by the swagger-codegen.
Do not edit manually.
"""

from pprint import pformat
from six import iteritems


class Order(object):
    """
    :ivar id: 
    :type id: int
    :ivar pet_id: 
    :type pet_id: int
    :ivar quantity: 
    :type quantity: int
    :ivar ship_date: 
    :type ship_date: datetime
    :ivar status: Order Status
    :type status: str
    :ivar complete: 
    :type complete: bool
    
    """
    def __init__(self, id=None, pet_id=None, quantity=None, ship_date=None, status=None, complete=None):
        self.swagger_type_by_variable_name = {
            'id': 'int',
            'pet_id': 'int',
            'quantity': 'int',
            'ship_date': 'datetime',
            'status': 'str',
            'complete': 'bool',
            
        }

        self.id = id
        self.pet_id = pet_id
        self.quantity = quantity
        self.ship_date = ship_date
        self._status = status
        self.complete = complete
    
    
    
    
    @property
    def status(self):
        return self._status

    @status.setter
    def status(self, status):
        allowed_values = ["placed", "approved", "delivered"]
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status`, must be one of {0}"
                .format(allowed_values)
            )
        self._status = status
    

    def to_dict(self):
        def to_dict_internal(attr):
            value = getattr(self, attr)
            if isinstance(value, list):
                return [x.to_dict() if hasattr(x, "to_dict") else x for x in value]
            elif hasattr(value, "to_dict"):
                return value.to_dict()
            else:
                return value

        return {attr: to_dict_internal(attr) for attr in self.swagger_type_by_variable_name.keys()}

    def __repr__(self):
        return pformat(self.to_dict())
