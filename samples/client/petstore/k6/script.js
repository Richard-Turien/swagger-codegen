/*
 * Swagger Petstore
 * This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \&quot; \\
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.13-SNAPSHOT
 */


import http from "k6/http";
import { group, check, sleep } from "k6";

const BASE_URL = "http://petstore.swagger.io:80/v2";
// Sleep duration between successive requests.
// You might want to edit the value of this variable or remove calls to the sleep function on the script.
const SLEEP_DURATION = 0.1;
// Global variables should be initialized.
let enum_header_string = "TODO_EDIT_THE_ENUM_HEADER_STRING";
let enum_header_string_array = "TODO_EDIT_THE_ENUM_HEADER_STRING_ARRAY";
let api_key = "TODO_EDIT_THE_API_KEY";

export default function() {
    group("/pet", () => {
        let url = BASE_URL + `/pet`;
        // Request No. 1
        // TODO: edit the parameters of the request body.
        let body = {"id": "integer", "category": {"id": "integer", "name": "string"}, "name": "string", "photoUrls": "array", "tags": "array", "status": "string", "body": "Pet object that needs to be added to the store"};
        let params = {headers: {"Content-Type": "application/json", "Accept": "application/json"}};
        let request = http.put(url, body, params);
        sleep(SLEEP_DURATION);

        // Request No. 2
        // TODO: edit the parameters of the request body.
        body = {"id": "integer", "category": {"id": "integer", "name": "string"}, "name": "string", "photoUrls": "array", "tags": "array", "status": "string", "body": "Pet object that needs to be added to the store"};
        params = {headers: {"Content-Type": "application/json"}};
        request = http.post(url, body, params);
        sleep(SLEEP_DURATION);
    });
    group("/pet/findByStatus", () => {
        let status = "TODO_EDIT_THE_STATUS";
        let url = BASE_URL + `/pet/findByStatus?status=${status}`;
        // Request No. 1
        let params = {headers: {"Content-Type": "application/json", "Accept": "application/json"}};
        let request = http.get(url, params);
        check(request, {
            "successful operation": (r) => r.status === 200
        });
        sleep(SLEEP_DURATION);
    });
    group("/pet/findByTags", () => {
        let tags = "TODO_EDIT_THE_TAGS";
        let url = BASE_URL + `/pet/findByTags?tags=${tags}`;
        // Request No. 1
        let params = {headers: {"Content-Type": "application/json", "Accept": "application/json"}};
        let request = http.get(url, params);
        check(request, {
            "successful operation": (r) => r.status === 200
        });
        sleep(SLEEP_DURATION);
    });
    group("/pet/{petId}", () => {
        let petId = "TODO_EDIT_THE_PETID";
        let url = BASE_URL + `/pet/${petId}`;
        // Request No. 1
        let params = {headers: {"Content-Type": "application/json", "Accept": "application/json"}};
        let request = http.get(url, params);
        check(request, {
            "successful operation": (r) => r.status === 200
        });
        sleep(SLEEP_DURATION);

        // Request No. 2
        // TODO: edit the parameters of the request body.
        body = {"name": "Updated name of the pet", "status": "Updated status of the pet"};
        params = {headers: {"Content-Type": "application/x-www-form-urlencoded"}};
        request = http.post(url, body, params);
        sleep(SLEEP_DURATION);

        // Request No. 3
        params = {headers: {"Content-Type": "application/json", "api_key": `${api_key}`}};
        request = http.delete(url, params);
        sleep(SLEEP_DURATION);
    });
    group("/pet/{petId}/uploadImage", () => {
        let petId = "TODO_EDIT_THE_PETID";
        let url = BASE_URL + `/pet/${petId}/uploadImage`;
        // Request No. 1
        // TODO: edit the parameters of the request body.
        let body = {"additionalMetadata": "Additional data to pass to server", "file": http.file(open("/path/to/file.bin", "b"), "test.bin")};
        let params = {headers: {"Content-Type": "multipart/form-data", "Accept": "application/json"}};
        let request = http.post(url, body, params);
        check(request, {
            "successful operation": (r) => r.status === 200
        });
        sleep(SLEEP_DURATION);
    });
    group("/store/inventory", () => {
        let url = BASE_URL + `/store/inventory`;
        // Request No. 1
        let params = {headers: {"Content-Type": "application/json", "Accept": "application/json"}};
        let request = http.get(url, params);
        check(request, {
            "successful operation": (r) => r.status === 200
        });
        sleep(SLEEP_DURATION);
    });
    group("/store/order", () => {
        let url = BASE_URL + `/store/order`;
        // Request No. 1
        // TODO: edit the parameters of the request body.
        let body = {"id": "integer", "petId": "integer", "quantity": "integer", "shipDate": "string", "status": "string", "complete": "boolean", "body": "order placed for purchasing the pet"};
        let params = {headers: {"Content-Type": "application/json", "Accept": "application/json"}};
        let request = http.post(url, body, params);
        check(request, {
            "successful operation": (r) => r.status === 200
        });
        sleep(SLEEP_DURATION);
    });
    group("/store/order/{order_id}", () => {
        let order_id = "TODO_EDIT_THE_ORDER_ID";
        let url = BASE_URL + `/store/order/${order_id}`;
        // Request No. 1
        let params = {headers: {"Content-Type": "application/json", "Accept": "application/json"}};
        let request = http.get(url, params);
        check(request, {
            "successful operation": (r) => r.status === 200
        });
        sleep(SLEEP_DURATION);

        // Request No. 2
        params = {headers: {"Content-Type": "application/json"}};
        request = http.delete(url, params);
        sleep(SLEEP_DURATION);
    });
    group("/user", () => {
        let url = BASE_URL + `/user`;
        // Request No. 1
        // TODO: edit the parameters of the request body.
        let body = {"id": "integer", "username": "string", "firstName": "string", "lastName": "string", "email": "string", "password": "string", "phone": "string", "userStatus": "integer", "body": "Created user object"};
        let params = {headers: {"Content-Type": "application/json", "Accept": "application/json"}};
        let request = http.post(url, body, params);
        check(request, {
            "successful operation": (r) => r.status === 200
        });
        sleep(SLEEP_DURATION);
    });
    group("/user/createWithArray", () => {
        let url = BASE_URL + `/user/createWithArray`;
        // Request No. 1
        // TODO: edit the parameters of the request body.
        let body = {"body": "List of user object"};
        let params = {headers: {"Content-Type": "application/json", "Accept": "application/json"}};
        let request = http.post(url, body, params);
        check(request, {
            "successful operation": (r) => r.status === 200
        });
        sleep(SLEEP_DURATION);
    });
    group("/user/createWithList", () => {
        let url = BASE_URL + `/user/createWithList`;
        // Request No. 1
        // TODO: edit the parameters of the request body.
        let body = {"body": "List of user object"};
        let params = {headers: {"Content-Type": "application/json", "Accept": "application/json"}};
        let request = http.post(url, body, params);
        check(request, {
            "successful operation": (r) => r.status === 200
        });
        sleep(SLEEP_DURATION);
    });
    group("/user/login", () => {
        let password = "TODO_EDIT_THE_PASSWORD";
        let username = "TODO_EDIT_THE_USERNAME";
        let url = BASE_URL + `/user/login?username=${username}&password=${password}`;
        // Request No. 1
        let params = {headers: {"Content-Type": "application/json", "Accept": "application/json"}};
        let request = http.get(url, params);
        check(request, {
            "successful operation": (r) => r.status === 200
        });
        sleep(SLEEP_DURATION);
    });
    group("/user/logout", () => {
        let url = BASE_URL + `/user/logout`;
        // Request No. 1
        let params = {headers: {"Content-Type": "application/json", "Accept": "application/json"}};
        let request = http.get(url, params);
        check(request, {
            "successful operation": (r) => r.status === 200
        });
        sleep(SLEEP_DURATION);
    });
    group("/user/{username}", () => {
        let username = "TODO_EDIT_THE_USERNAME";
        let url = BASE_URL + `/user/${username}`;
        // Request No. 1
        let params = {headers: {"Content-Type": "application/json", "Accept": "application/json"}};
        let request = http.get(url, params);
        check(request, {
            "successful operation": (r) => r.status === 200
        });
        sleep(SLEEP_DURATION);

        // Request No. 2
        // TODO: edit the parameters of the request body.
        body = {"id": "integer", "username": "string", "firstName": "string", "lastName": "string", "email": "string", "password": "string", "phone": "string", "userStatus": "integer", "body": "Updated user object"};
        params = {headers: {"Content-Type": "application/json"}};
        request = http.put(url, body, params);
        sleep(SLEEP_DURATION);

        // Request No. 3
        params = {headers: {"Content-Type": "application/json"}};
        request = http.delete(url, params);
        sleep(SLEEP_DURATION);
    });
    group("/fake_classname_test", () => {
        let url = BASE_URL + `/fake_classname_test`;
        // Request No. 1
        // TODO: edit the parameters of the request body.
        let body = {"client": "string", "body": "client model"};
        let params = {headers: {"Content-Type": "application/json", "Accept": "application/json"}};
        let request = http.patch(url, body, params);
        check(request, {
            "successful operation": (r) => r.status === 200
        });
        sleep(SLEEP_DURATION);
    });
    group("/fake", () => {
        let enum_query_string = "TODO_EDIT_THE_ENUM_QUERY_STRING";
        let enum_query_integer = "TODO_EDIT_THE_ENUM_QUERY_INTEGER";
        let enum_query_string_array = "TODO_EDIT_THE_ENUM_QUERY_STRING_ARRAY";
        let url = BASE_URL + `/fake?enum_query_string_array=${enum_query_string_array}&enum_query_string=${enum_query_string}&enum_query_integer=${enum_query_integer}`;
        // Request No. 1
        // TODO: edit the parameters of the request body.
        let body = {"enum_form_string_array": "Form parameter enum test (string array)", "enum_form_string": "Form parameter enum test (string)", "enum_query_double": "Query parameter enum test (double)"};
        let params = {headers: {"Content-Type": "*/*", "enum_header_string_array": `${enum_header_string_array}`, "enum_header_string": `${enum_header_string}`, "Accept": "*/*"}};
        let request = http.get(url, body, params);
        sleep(SLEEP_DURATION);

        // Request No. 2
        // TODO: edit the parameters of the request body.
        body = {"integer": "None", "int32": "None", "int64": "None", "number": "None", "float": "None", "double": "None", "string": "None", "pattern_without_delimiter": "None", "byte": "None", "binary": "None", "date": "None", "dateTime": "None", "password": "None", "callback": "None"};
        params = {headers: {"Content-Type": "application/xml; charset=utf-8"}};
        request = http.post(url, body, params);
        sleep(SLEEP_DURATION);

        // Request No. 3
        // TODO: edit the parameters of the request body.
        body = {"client": "string", "body": "client model"};
        params = {headers: {"Content-Type": "application/json"}};
        request = http.patch(url, body, params);
        check(request, {
            "successful operation": (r) => r.status === 200
        });
        sleep(SLEEP_DURATION);
    });
    group("/fake/outer/number", () => {
        let url = BASE_URL + `/fake/outer/number`;
        // Request No. 1
        // TODO: edit the parameters of the request body.
        let body = {"body": "Input number as post body"};
        let params = {headers: {"Content-Type": "application/json", "Accept": "application/json"}};
        let request = http.post(url, body, params);
        check(request, {
            "Output number": (r) => r.status === 200
        });
        sleep(SLEEP_DURATION);
    });
    group("/fake/outer/string", () => {
        let url = BASE_URL + `/fake/outer/string`;
        // Request No. 1
        // TODO: edit the parameters of the request body.
        let body = {"body": "Input string as post body"};
        let params = {headers: {"Content-Type": "application/json", "Accept": "application/json"}};
        let request = http.post(url, body, params);
        check(request, {
            "Output string": (r) => r.status === 200
        });
        sleep(SLEEP_DURATION);
    });
    group("/fake/outer/boolean", () => {
        let url = BASE_URL + `/fake/outer/boolean`;
        // Request No. 1
        // TODO: edit the parameters of the request body.
        let body = {"body": "Input boolean as post body"};
        let params = {headers: {"Content-Type": "application/json", "Accept": "application/json"}};
        let request = http.post(url, body, params);
        check(request, {
            "Output boolean": (r) => r.status === 200
        });
        sleep(SLEEP_DURATION);
    });
    group("/fake/outer/composite", () => {
        let url = BASE_URL + `/fake/outer/composite`;
        // Request No. 1
        // TODO: edit the parameters of the request body.
        let body = {"body": "Input composite as post body"};
        let params = {headers: {"Content-Type": "application/json", "Accept": "application/json"}};
        let request = http.post(url, body, params);
        check(request, {
            "Output composite": (r) => r.status === 200
        });
        sleep(SLEEP_DURATION);
    });
    group("/fake/jsonFormData", () => {
        let url = BASE_URL + `/fake/jsonFormData`;
        // Request No. 1
        // TODO: edit the parameters of the request body.
        let body = {"param": "field1", "param2": "field2"};
        let params = {headers: {"Content-Type": "application/json", "Accept": "application/json"}};
        let request = http.get(url, body, params);
        check(request, {
            "successful operation": (r) => r.status === 200
        });
        sleep(SLEEP_DURATION);
    });
    group("/fake/inline-additionalProperties", () => {
        let url = BASE_URL + `/fake/inline-additionalProperties`;
        // Request No. 1
        // TODO: edit the parameters of the request body.
        let body = {"param": "request body"};
        let params = {headers: {"Content-Type": "application/json", "Accept": "application/json"}};
        let request = http.post(url, body, params);
        check(request, {
            "successful operation": (r) => r.status === 200
        });
        sleep(SLEEP_DURATION);
    });
    group("/fake/body-with-query-params", () => {
        let query = "TODO_EDIT_THE_QUERY";
        let url = BASE_URL + `/fake/body-with-query-params?query=${query}`;
        // Request No. 1
        // TODO: edit the parameters of the request body.
        let body = {"id": "integer", "username": "string", "firstName": "string", "lastName": "string", "email": "string", "password": "string", "phone": "string", "userStatus": "integer", "body": "this is a standard form field"};
        let params = {headers: {"Content-Type": "application/json", "Accept": "application/json"}};
        let request = http.put(url, body, params);
        check(request, {
            "Success": (r) => r.status === 200
        });
        sleep(SLEEP_DURATION);
    });
    group("/another-fake/dummy", () => {
        let url = BASE_URL + `/another-fake/dummy`;
        // Request No. 1
        // TODO: edit the parameters of the request body.
        let body = {"client": "string", "body": "client model"};
        let params = {headers: {"Content-Type": "application/json", "Accept": "application/json"}};
        let request = http.patch(url, body, params);
        check(request, {
            "successful operation": (r) => r.status === 200
        });
        sleep(SLEEP_DURATION);
    });
}
