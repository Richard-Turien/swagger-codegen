<?php
/**
 *  Copyright 2011 Wordnik, Inc.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
namespace com\wordnik\petstore\api;

use com\wordnik\client\APIClient;
use com\wordnik\petstore\model\User;


/**
 *
 * NOTE: This class is auto generated by the swagger code generator program. Do not edit the class manually.
 */
class UserApi {

	function __construct(APIClient $apiClient) {
		$this->apiClient = $apiClient;
	}

	/**
	 * Create user.
	 *
	* @param User $body Created user object (required)
	*/
	public function createUser($body) {

		//parse inputs
		$resourcePath = "/user";
		$resourcePath = str_replace("{format}", "json", $resourcePath);
		$method = "POST";
		$queryParams = array();
		$headerParams = array();

		//make the API Call
		if (!isset($body)) {
			$body = null;
		}
		$response = $this->apiClient->callAPI($resourcePath, $method, $queryParams, $body, $headerParams);
		
	}
	
	/**
	 * Creates list of users with given input array.
	 *
	* @param array[User] $body List of user object (required)
	*/
	public function createUsersWithArrayInput($body) {

		//parse inputs
		$resourcePath = "/user/createWithArray";
		$resourcePath = str_replace("{format}", "json", $resourcePath);
		$method = "POST";
		$queryParams = array();
		$headerParams = array();

		//make the API Call
		if (!isset($body)) {
			$body = null;
		}
		$response = $this->apiClient->callAPI($resourcePath, $method, $queryParams, $body, $headerParams);
		
	}
	
	/**
	 * Creates list of users with given list input.
	 *
	* @param array[User] $body List of user object (required)
	*/
	public function createUsersWithListInput($body) {

		//parse inputs
		$resourcePath = "/user/createWithList";
		$resourcePath = str_replace("{format}", "json", $resourcePath);
		$method = "POST";
		$queryParams = array();
		$headerParams = array();

		//make the API Call
		if (!isset($body)) {
			$body = null;
		}
		$response = $this->apiClient->callAPI($resourcePath, $method, $queryParams, $body, $headerParams);
		
	}
	
	/**
	 * Updated user.
	 *
	* @param string $username name that need to be deleted (required)
	* @param User $body Updated user object (required)
	*/
	public function updateUser($username, $body) {

		//parse inputs
		$resourcePath = "/user/{username}";
		$resourcePath = str_replace("{format}", "json", $resourcePath);
		$method = "PUT";
		$queryParams = array();
		$headerParams = array();

		if($username != null) {
			$resourcePath = str_replace("{" . "username" . "}", $this->apiClient->toPathValue($username), $resourcePath);
		}
		//make the API Call
		if (!isset($body)) {
			$body = null;
		}
		$response = $this->apiClient->callAPI($resourcePath, $method, $queryParams, $body, $headerParams);
		
	}
	
	/**
	 * Delete user.
	 *
	* @param string $username The name that needs to be deleted (required)
	*/
	public function deleteUser($username) {

		//parse inputs
		$resourcePath = "/user/{username}";
		$resourcePath = str_replace("{format}", "json", $resourcePath);
		$method = "DELETE";
		$queryParams = array();
		$headerParams = array();

		if($username != null) {
			$resourcePath = str_replace("{" . "username" . "}", $this->apiClient->toPathValue($username), $resourcePath);
		}
		//make the API Call
		if (!isset($body)) {
			$body = null;
		}
		$response = $this->apiClient->callAPI($resourcePath, $method, $queryParams, $body, $headerParams);
		
	}
	
	/**
	 * Get user by user name.
	 *
	* @param string $username The name that needs to be fetched. Use user1 for testing. (required)
	* @return User
	*/
	public function getUserByName($username) {

		//parse inputs
		$resourcePath = "/user/{username}";
		$resourcePath = str_replace("{format}", "json", $resourcePath);
		$method = "GET";
		$queryParams = array();
		$headerParams = array();

		if($username != null) {
			$resourcePath = str_replace("{" . "username" . "}", $this->apiClient->toPathValue($username), $resourcePath);
		}
		//make the API Call
		if (!isset($body)) {
			$body = null;
		}
		$response = $this->apiClient->callAPI($resourcePath, $method, $queryParams, $body, $headerParams);
		if(!$response){
			return null;
		}

		return $this->apiClient->deserialize($response, 'User');
		
	}
	
	/**
	 * Logs user into the system.
	 *
	* @param string $username The user name for login (required)
	* @param string $password The password for login in clear text (required)
	* @return string
	*/
	public function loginUser($username, $password) {

		//parse inputs
		$resourcePath = "/user/login";
		$resourcePath = str_replace("{format}", "json", $resourcePath);
		$method = "GET";
		$queryParams = array();
		$headerParams = array();

		if($username != null) {
			$queryParams['username'] = $this->apiClient->toQueryValue($username);
		}
		if($password != null) {
			$queryParams['password'] = $this->apiClient->toQueryValue($password);
		}
		//make the API Call
		if (!isset($body)) {
			$body = null;
		}
		$response = $this->apiClient->callAPI($resourcePath, $method, $queryParams, $body, $headerParams);
		if(!$response){
			return null;
		}

		return $this->apiClient->deserialize($response, 'string');
		
	}
	
	/**
	 * Logs out current logged in user session.
	 *
	*/
	public function logoutUser() {

		//parse inputs
		$resourcePath = "/user/logout";
		$resourcePath = str_replace("{format}", "json", $resourcePath);
		$method = "GET";
		$queryParams = array();
		$headerParams = array();

		//make the API Call
		if (!isset($body)) {
			$body = null;
		}
		$response = $this->apiClient->callAPI($resourcePath, $method, $queryParams, $body, $headerParams);
		
	}
	
	}

