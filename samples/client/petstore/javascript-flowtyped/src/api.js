// @flow
/* eslint-disable no-use-before-define */
/**
 * Swagger Petstore
 * This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


import * as url from "url";
import * as portableFetch from "portable-fetch";
import { Configuration } from "./configuration";

const BASE_PATH: string = "http://petstore.swagger.io:80/v2".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *
 * @export
 */
export type FetchAPI = {
    (url: string, init?: any): Promise<Response>;
}

/**
 *
 * @export
 */
export type FetchArgs = {
    url: string;
    options: {};
}


/**
 *
 * @export
 */
export type RequestOptions = {
    headers?: {};
    query?: {};
    body?: string | FormData;
}

/**
 * * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    name:string = "RequiredError"
    constructor(field: string, msg?: string) {
        super(msg);
    }
}

/**
 * 
 * @export
 */
export type AdditionalPropertiesClass = {
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof AdditionalPropertiesClass
     */
    mapProperty?: { [key: string]: string; };
    /**
     * 
     * @type {{ [key: string]: { [key: string]: string; }; }}
     * @memberof AdditionalPropertiesClass
     */
    mapOfMapProperty?: { [key: string]: { [key: string]: string; }; };
}


/**
 * 
 * @export
 */
export type Animal = {
    /**
     * 
     * @type {string}
     * @memberof Animal
     */
    className: string;
    /**
     * 
     * @type {string}
     * @memberof Animal
     */
    color?: string;
}


/**
 * 
 * @export
 */
export type AnimalFarm = {
}


/**
 * 
 * @export
 */
export type ApiResponse = {
    /**
     * 
     * @type {number}
     * @memberof ApiResponse
     */
    code?: number;
    /**
     * 
     * @type {string}
     * @memberof ApiResponse
     */
    type?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiResponse
     */
    message?: string;
}


/**
 * 
 * @export
 */
export type ArrayOfArrayOfNumberOnly = {
    /**
     * 
     * @type {Array<Array<number>>}
     * @memberof ArrayOfArrayOfNumberOnly
     */
    arrayArrayNumber?: Array<Array<number>>;
}


/**
 * 
 * @export
 */
export type ArrayOfNumberOnly = {
    /**
     * 
     * @type {Array<number>}
     * @memberof ArrayOfNumberOnly
     */
    arrayNumber?: Array<number>;
}


/**
 * 
 * @export
 */
export type ArrayTest = {
    /**
     * 
     * @type {Array<string>}
     * @memberof ArrayTest
     */
    arrayOfString?: Array<string>;
    /**
     * 
     * @type {Array<Array<number>>}
     * @memberof ArrayTest
     */
    arrayArrayOfInteger?: Array<Array<number>>;
    /**
     * 
     * @type {Array<Array<ReadOnlyFirst>>}
     * @memberof ArrayTest
     */
    arrayArrayOfModel?: Array<Array<ReadOnlyFirst>>;
}


/**
 * 
 * @export
 */
export type Capitalization = {
    /**
     * 
     * @type {string}
     * @memberof Capitalization
     */
    smallCamel?: string;
    /**
     * 
     * @type {string}
     * @memberof Capitalization
     */
    capitalCamel?: string;
    /**
     * 
     * @type {string}
     * @memberof Capitalization
     */
    smallSnake?: string;
    /**
     * 
     * @type {string}
     * @memberof Capitalization
     */
    capitalSnake?: string;
    /**
     * 
     * @type {string}
     * @memberof Capitalization
     */
    sCAETHFlowPoints?: string;
    /**
     * Name of the pet 
     * @type {string}
     * @memberof Capitalization
     */
    ATT_NAME?: string;
}


/**
 * 
 * @export
 */
export type Category = {
    /**
     * 
     * @type {number}
     * @memberof Category
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof Category
     */
    name?: string;
}


/**
 * Model for testing model with \"_class\" property
 * @export
 */
export type ClassModel = {
    /**
     * 
     * @type {string}
     * @memberof ClassModel
     */
    _class?: string;
}


/**
 * 
 * @export
 */
export type Client = {
    /**
     * 
     * @type {string}
     * @memberof Client
     */
    client?: string;
}



            export type EnumArraysJustSymbolEnum = '>=' | '$';

            export type EnumArraysArrayEnumEnum = 'fish' | 'crab';
/**
 * 
 * @export
 */
export type EnumArrays = {
    /**
     * 
     * @type {string}
     * @memberof EnumArrays
     */
    justSymbol?: EnumArraysJustSymbolEnum;
    /**
     * 
     * @type {Array<string>}
     * @memberof EnumArrays
     */
    arrayEnum?: Array<EnumArraysArrayEnumEnum>;
}


/**
 * 
 * @export
 * @enum {string}
 */
export type EnumClass = '_abc' | '-efg' | '(xyz)';


            export type EnumTestEnumStringEnum = 'UPPER' | 'lower' | '';

            export type EnumTestEnumStringRequiredEnum = 'UPPER' | 'lower' | '';

            export type EnumTestEnumIntegerEnum = 1 | -1;

            export type EnumTestEnumNumberEnum = 1.1 | -1.2;
/**
 * 
 * @export
 */
export type EnumTest = {
    /**
     * 
     * @type {string}
     * @memberof EnumTest
     */
    enumString?: EnumTestEnumStringEnum;
    /**
     * 
     * @type {string}
     * @memberof EnumTest
     */
    enumStringRequired: EnumTestEnumStringRequiredEnum;
    /**
     * 
     * @type {number}
     * @memberof EnumTest
     */
    enumInteger?: EnumTestEnumIntegerEnum;
    /**
     * 
     * @type {number}
     * @memberof EnumTest
     */
    enumNumber?: EnumTestEnumNumberEnum;
    /**
     * 
     * @type {OuterEnum}
     * @memberof EnumTest
     */
    outerEnum?: OuterEnum;
}


/**
 * 
 * @export
 */
export type FormatTest = {
    /**
     * 
     * @type {number}
     * @memberof FormatTest
     */
    integer?: number;
    /**
     * 
     * @type {number}
     * @memberof FormatTest
     */
    int32?: number;
    /**
     * 
     * @type {number}
     * @memberof FormatTest
     */
    int64?: number;
    /**
     * 
     * @type {number}
     * @memberof FormatTest
     */
    _number: number;
    /**
     * 
     * @type {number}
     * @memberof FormatTest
     */
    _float?: number;
    /**
     * 
     * @type {number}
     * @memberof FormatTest
     */
    _double?: number;
    /**
     * 
     * @type {string}
     * @memberof FormatTest
     */
    _string?: string;
    /**
     * 
     * @type {string}
     * @memberof FormatTest
     */
    _byte: string;
    /**
     * 
     * @type {string}
     * @memberof FormatTest
     */
    binary?: string;
    /**
     * 
     * @type {Date}
     * @memberof FormatTest
     */
    _date: Date;
    /**
     * 
     * @type {Date}
     * @memberof FormatTest
     */
    dateTime?: Date;
    /**
     * 
     * @type {string}
     * @memberof FormatTest
     */
    uuid?: string;
    /**
     * 
     * @type {string}
     * @memberof FormatTest
     */
    password: string;
}


/**
 * 
 * @export
 */
export type HasOnlyReadOnly = {
    /**
     * 
     * @type {string}
     * @memberof HasOnlyReadOnly
     */
    bar?: string;
    /**
     * 
     * @type {string}
     * @memberof HasOnlyReadOnly
     */
    foo?: string;
}


/**
 * 
 * @export
 */
export type List = {
    /**
     * 
     * @type {string}
     * @memberof List
     */
    _123List?: string;
}



            export type MapTestMapOfEnumStringEnum = 'UPPER' | 'lower';
/**
 * 
 * @export
 */
export type MapTest = {
    /**
     * 
     * @type {{ [key: string]: { [key: string]: string; }; }}
     * @memberof MapTest
     */
    mapMapOfString?: { [key: string]: { [key: string]: string; }; };
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof MapTest
     */
    mapOfEnumString?: { [key: string]: string; };
}


/**
 * 
 * @export
 */
export type MixedPropertiesAndAdditionalPropertiesClass = {
    /**
     * 
     * @type {string}
     * @memberof MixedPropertiesAndAdditionalPropertiesClass
     */
    uuid?: string;
    /**
     * 
     * @type {Date}
     * @memberof MixedPropertiesAndAdditionalPropertiesClass
     */
    dateTime?: Date;
    /**
     * 
     * @type {{ [key: string]: Animal; }}
     * @memberof MixedPropertiesAndAdditionalPropertiesClass
     */
    map?: { [key: string]: Animal; };
}


/**
 * Model for testing model name starting with number
 * @export
 */
export type Model200Response = {
    /**
     * 
     * @type {number}
     * @memberof Model200Response
     */
    name?: number;
    /**
     * 
     * @type {string}
     * @memberof Model200Response
     */
    _class?: string;
}


/**
 * Model for testing reserved words
 * @export
 */
export type ModelReturn = {
    /**
     * 
     * @type {number}
     * @memberof ModelReturn
     */
    _return?: number;
}


/**
 * Model for testing model name same as property name
 * @export
 */
export type Name = {
    /**
     * 
     * @type {number}
     * @memberof Name
     */
    name: number;
    /**
     * 
     * @type {number}
     * @memberof Name
     */
    snakeCase?: number;
    /**
     * 
     * @type {string}
     * @memberof Name
     */
    property?: string;
    /**
     * 
     * @type {number}
     * @memberof Name
     */
    _123Number?: number;
}


/**
 * 
 * @export
 */
export type NumberOnly = {
    /**
     * 
     * @type {number}
     * @memberof NumberOnly
     */
    justNumber?: number;
}



            export type OrderStatusEnum = 'placed' | 'approved' | 'delivered';
/**
 * 
 * @export
 */
export type Order = {
    /**
     * 
     * @type {number}
     * @memberof Order
     */
    id?: number;
    /**
     * 
     * @type {number}
     * @memberof Order
     */
    petId?: number;
    /**
     * 
     * @type {number}
     * @memberof Order
     */
    quantity?: number;
    /**
     * 
     * @type {Date}
     * @memberof Order
     */
    shipDate?: Date;
    /**
     * Order Status
     * @type {string}
     * @memberof Order
     */
    status?: OrderStatusEnum;
    /**
     * 
     * @type {Boolean}
     * @memberof Order
     */
    complete?: Boolean;
}


/**
 * 
 * @export
 */
export type OuterBoolean = {
}


/**
 * 
 * @export
 */
export type OuterComposite = {
    /**
     * 
     * @type {OuterNumber}
     * @memberof OuterComposite
     */
    myNumber?: OuterNumber;
    /**
     * 
     * @type {OuterString}
     * @memberof OuterComposite
     */
    myString?: OuterString;
    /**
     * 
     * @type {OuterBoolean}
     * @memberof OuterComposite
     */
    myBoolean?: OuterBoolean;
}


/**
 * 
 * @export
 * @enum {string}
 */
export type OuterEnum = 'placed' | 'approved' | 'delivered';

/**
 * 
 * @export
 */
export type OuterNumber = {
}


/**
 * 
 * @export
 */
export type OuterString = {
}



            export type PetStatusEnum = 'available' | 'pending' | 'sold';
/**
 * 
 * @export
 */
export type Pet = {
    /**
     * 
     * @type {number}
     * @memberof Pet
     */
    id?: number;
    /**
     * 
     * @type {Category}
     * @memberof Pet
     */
    category?: Category;
    /**
     * 
     * @type {string}
     * @memberof Pet
     */
    name: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof Pet
     */
    photoUrls: Array<string>;
    /**
     * 
     * @type {Array<Tag>}
     * @memberof Pet
     */
    tags?: Array<Tag>;
    /**
     * pet status in the store
     * @type {string}
     * @memberof Pet
     */
    status?: PetStatusEnum;
}


/**
 * 
 * @export
 */
export type ReadOnlyFirst = {
    /**
     * 
     * @type {string}
     * @memberof ReadOnlyFirst
     */
    bar?: string;
    /**
     * 
     * @type {string}
     * @memberof ReadOnlyFirst
     */
    baz?: string;
}


/**
 * 
 * @export
 */
export type SpecialModelName = {
    /**
     * 
     * @type {number}
     * @memberof SpecialModelName
     */
    specialPropertyName?: number;
}


/**
 * 
 * @export
 */
export type Tag = {
    /**
     * 
     * @type {number}
     * @memberof Tag
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof Tag
     */
    name?: string;
}


/**
 * 
 * @export
 */
export type User = {
    /**
     * 
     * @type {number}
     * @memberof User
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    username?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    firstName?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    lastName?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    email?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    password?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    phone?: string;
    /**
     * User Status
     * @type {number}
     * @memberof User
     */
    userStatus?: number;
}


/**
 * 
 * @export
 */
export type Cat = {
    /**
     * 
     * @type {Boolean}
     * @memberof Cat
     */
    declawed?: Boolean;
}


/**
 * 
 * @export
 */
export type Dog = {
    /**
     * 
     * @type {string}
     * @memberof Dog
     */
    breed?: string;
}




/**
 * AnotherFakeApi - fetch parameter creator
 * @export
 */
export const AnotherFakeApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * To test special tags
         * @summary To test special tags
         * @throws {RequiredError}
         */
        testSpecialTags(body: Client, options: RequestOptions): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling testSpecialTags.');
            }
            const localVarPath = `/another-fake/dummy`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'PATCH' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (((body:any):string) || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

export type AnotherFakeApiType = { 
    testSpecialTags(body: Client, options?: RequestOptions): Promise<Client>,
}

/**
 * AnotherFakeApi - factory function to inject configuration 
 * @export
 */
export const AnotherFakeApi = function(configuration?: Configuration, fetch: FetchAPI = portableFetch): AnotherFakeApiType {
    const basePath: string = (configuration && configuration.basePath) || BASE_PATH;
    return {
        /**
         * To test special tags
         * @summary To test special tags
         * @throws {RequiredError}
         */
        testSpecialTags(body: Client, options?: RequestOptions = {}): Promise<Client> {
            const localVarFetchArgs = AnotherFakeApiFetchParamCreator(configuration).testSpecialTags(body, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
    }
};

/**
 * FakeApi - fetch parameter creator
 * @export
 */
export const FakeApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Test serialization of outer boolean types
         * @throws {RequiredError}
         */
        fakeOuterBooleanSerialize(body?: OuterBoolean, options: RequestOptions): FetchArgs {
            const localVarPath = `/fake/outer/boolean`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (((body:any):string) || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Test serialization of object with outer number type
         * @throws {RequiredError}
         */
        fakeOuterCompositeSerialize(body?: OuterComposite, options: RequestOptions): FetchArgs {
            const localVarPath = `/fake/outer/composite`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (((body:any):string) || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Test serialization of outer number types
         * @throws {RequiredError}
         */
        fakeOuterNumberSerialize(body?: OuterNumber, options: RequestOptions): FetchArgs {
            const localVarPath = `/fake/outer/number`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (((body:any):string) || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Test serialization of outer string types
         * @throws {RequiredError}
         */
        fakeOuterStringSerialize(body?: OuterString, options: RequestOptions): FetchArgs {
            const localVarPath = `/fake/outer/string`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (((body:any):string) || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @throws {RequiredError}
         */
        testBodyWithQueryParams(body: User, query: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling testBodyWithQueryParams.');
            }
            // verify required parameter 'query' is not null or undefined
            if (query === null || query === undefined) {
                throw new RequiredError('query','Required parameter query was null or undefined when calling testBodyWithQueryParams.');
            }
            const localVarPath = `/fake/body-with-query-params`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'PUT' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (query !== undefined) {
                localVarQueryParameter['query'] = ((query:any):string);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (((body:any):string) || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * To test \"client\" model
         * @summary To test \"client\" model
         * @throws {RequiredError}
         */
        testClientModel(body: Client, options: RequestOptions): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling testClientModel.');
            }
            const localVarPath = `/fake`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'PATCH' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (((body:any):string) || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fake endpoint for testing various parameters 假端點 偽のエンドポイント 가짜 엔드 포인트 
         * @summary Fake endpoint for testing various parameters 假端點 偽のエンドポイント 가짜 엔드 포인트 
         * @throws {RequiredError}
         */
        testEndpointParameters(_number: number, _double: number, patternWithoutDelimiter: string, _byte: string, integer?: number, int32?: number, int64?: number, _float?: number, _string?: string, binary?: string, _date?: Date, dateTime?: Date, password?: string, callback?: string, options: RequestOptions): FetchArgs {
            // verify required parameter '_number' is not null or undefined
            if (_number === null || _number === undefined) {
                throw new RequiredError('_number','Required parameter _number was null or undefined when calling testEndpointParameters.');
            }
            // verify required parameter '_double' is not null or undefined
            if (_double === null || _double === undefined) {
                throw new RequiredError('_double','Required parameter _double was null or undefined when calling testEndpointParameters.');
            }
            // verify required parameter 'patternWithoutDelimiter' is not null or undefined
            if (patternWithoutDelimiter === null || patternWithoutDelimiter === undefined) {
                throw new RequiredError('patternWithoutDelimiter','Required parameter patternWithoutDelimiter was null or undefined when calling testEndpointParameters.');
            }
            // verify required parameter '_byte' is not null or undefined
            if (_byte === null || _byte === undefined) {
                throw new RequiredError('_byte','Required parameter _byte was null or undefined when calling testEndpointParameters.');
            }
            const localVarPath = `/fake`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const localVarFormParams = new FormData();

            // authentication http_basic_test required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            if (integer !== undefined) {
                localVarFormParams.set('integer', ((integer:any):string));
            }

            if (int32 !== undefined) {
                localVarFormParams.set('int32', ((int32:any):string));
            }

            if (int64 !== undefined) {
                localVarFormParams.set('int64', ((int64:any):string));
            }

            if (_number !== undefined) {
                localVarFormParams.set('number', ((_number:any):string));
            }

            if (_float !== undefined) {
                localVarFormParams.set('float', ((_float:any):string));
            }

            if (_double !== undefined) {
                localVarFormParams.set('double', ((_double:any):string));
            }

            if (_string !== undefined) {
                localVarFormParams.set('string', ((_string:any):string));
            }

            if (patternWithoutDelimiter !== undefined) {
                localVarFormParams.set('pattern_without_delimiter', ((patternWithoutDelimiter:any):string));
            }

            if (_byte !== undefined) {
                localVarFormParams.set('byte', ((_byte:any):string));
            }

            if (binary !== undefined) {
                localVarFormParams.set('binary', ((binary:any):string));
            }

            if (_date !== undefined) {
                localVarFormParams.set('date', ((_date:any):string));
            }

            if (dateTime !== undefined) {
                localVarFormParams.set('dateTime', ((dateTime:any):string));
            }

            if (password !== undefined) {
                localVarFormParams.set('password', ((password:any):string));
            }

            if (callback !== undefined) {
                localVarFormParams.set('callback', ((callback:any):string));
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            localVarRequestOptions.body = localVarFormParams;

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * To test enum parameters
         * @summary To test enum parameters
         * @throws {RequiredError}
         */
        testEnumParameters(enumFormStringArray?: Array<'>' | '$'>, enumFormString?: '_abc' | '-efg' | '(xyz)', enumHeaderStringArray?: Array<'>' | '$'>, enumHeaderString?: '_abc' | '-efg' | '(xyz)', enumQueryStringArray?: Array<'>' | '$'>, enumQueryString?: '_abc' | '-efg' | '(xyz)', enumQueryInteger?: 1 | -2, enumQueryDouble?: 1.1 | -1.2, options: RequestOptions): FetchArgs {
            const localVarPath = `/fake`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const localVarFormParams = new FormData();

            if (enumQueryStringArray) {
                localVarQueryParameter['enum_query_string_array'] = enumQueryStringArray.join(COLLECTION_FORMATS["csv"]);
            }

            if (enumQueryString !== undefined) {
                localVarQueryParameter['enum_query_string'] = ((enumQueryString:any):string);
            }

            if (enumQueryInteger !== undefined) {
                localVarQueryParameter['enum_query_integer'] = ((enumQueryInteger:any):string);
            }

            if (enumHeaderStringArray) {
                localVarHeaderParameter['enum_header_string_array'] = enumHeaderStringArray.join(COLLECTION_FORMATS["csv"]);
            }

            if (enumHeaderString !== undefined && enumHeaderString !== null) {
                localVarHeaderParameter['enum_header_string'] = ((enumHeaderString:any):string);
            }

            if (enumFormStringArray) {
                    localVarFormParams.set('enum_form_string_array', enumFormStringArray.join(COLLECTION_FORMATS["csv"]));
            }

            if (enumFormString !== undefined) {
                localVarFormParams.set('enum_form_string', ((enumFormString:any):string));
            }

            if (enumQueryDouble !== undefined) {
                localVarFormParams.set('enum_query_double', ((enumQueryDouble:any):string));
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            localVarRequestOptions.body = localVarFormParams;

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary test inline additionalProperties
         * @throws {RequiredError}
         */
        testInlineAdditionalProperties(param: any, options: RequestOptions): FetchArgs {
            // verify required parameter 'param' is not null or undefined
            if (param === null || param === undefined) {
                throw new RequiredError('param','Required parameter param was null or undefined when calling testInlineAdditionalProperties.');
            }
            const localVarPath = `/fake/inline-additionalProperties`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (typeof param !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(param || {}) : (((param:any):string) || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary test json serialization of form data
         * @throws {RequiredError}
         */
        testJsonFormData(param: string, param2: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'param' is not null or undefined
            if (param === null || param === undefined) {
                throw new RequiredError('param','Required parameter param was null or undefined when calling testJsonFormData.');
            }
            // verify required parameter 'param2' is not null or undefined
            if (param2 === null || param2 === undefined) {
                throw new RequiredError('param2','Required parameter param2 was null or undefined when calling testJsonFormData.');
            }
            const localVarPath = `/fake/jsonFormData`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const localVarFormParams = new FormData();

            if (param !== undefined) {
                localVarFormParams.set('param', ((param:any):string));
            }

            if (param2 !== undefined) {
                localVarFormParams.set('param2', ((param2:any):string));
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            localVarRequestOptions.body = localVarFormParams;

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

export type FakeApiType = { 
    fakeOuterBooleanSerialize(body?: OuterBoolean, options?: RequestOptions): Promise<OuterBoolean>,

    fakeOuterCompositeSerialize(body?: OuterComposite, options?: RequestOptions): Promise<OuterComposite>,

    fakeOuterNumberSerialize(body?: OuterNumber, options?: RequestOptions): Promise<OuterNumber>,

    fakeOuterStringSerialize(body?: OuterString, options?: RequestOptions): Promise<OuterString>,

    testBodyWithQueryParams(body: User, query: string, options?: RequestOptions): Promise<Response>,

    testClientModel(body: Client, options?: RequestOptions): Promise<Client>,

    testEndpointParameters(_number: number, _double: number, patternWithoutDelimiter: string, _byte: string, integer?: number, int32?: number, int64?: number, _float?: number, _string?: string, binary?: string, _date?: Date, dateTime?: Date, password?: string, callback?: string, options?: RequestOptions): Promise<Response>,

    testEnumParameters(enumFormStringArray?: Array<'>' | '$'>, enumFormString?: '_abc' | '-efg' | '(xyz)', enumHeaderStringArray?: Array<'>' | '$'>, enumHeaderString?: '_abc' | '-efg' | '(xyz)', enumQueryStringArray?: Array<'>' | '$'>, enumQueryString?: '_abc' | '-efg' | '(xyz)', enumQueryInteger?: 1 | -2, enumQueryDouble?: 1.1 | -1.2, options?: RequestOptions): Promise<Response>,

    testInlineAdditionalProperties(param: any, options?: RequestOptions): Promise<Response>,

    testJsonFormData(param: string, param2: string, options?: RequestOptions): Promise<Response>,
}

/**
 * FakeApi - factory function to inject configuration 
 * @export
 */
export const FakeApi = function(configuration?: Configuration, fetch: FetchAPI = portableFetch): FakeApiType {
    const basePath: string = (configuration && configuration.basePath) || BASE_PATH;
    return {
        /**
         * Test serialization of outer boolean types
         * @throws {RequiredError}
         */
        fakeOuterBooleanSerialize(body?: OuterBoolean, options?: RequestOptions = {}): Promise<OuterBoolean> {
            const localVarFetchArgs = FakeApiFetchParamCreator(configuration).fakeOuterBooleanSerialize(body, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Test serialization of object with outer number type
         * @throws {RequiredError}
         */
        fakeOuterCompositeSerialize(body?: OuterComposite, options?: RequestOptions = {}): Promise<OuterComposite> {
            const localVarFetchArgs = FakeApiFetchParamCreator(configuration).fakeOuterCompositeSerialize(body, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Test serialization of outer number types
         * @throws {RequiredError}
         */
        fakeOuterNumberSerialize(body?: OuterNumber, options?: RequestOptions = {}): Promise<OuterNumber> {
            const localVarFetchArgs = FakeApiFetchParamCreator(configuration).fakeOuterNumberSerialize(body, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Test serialization of outer string types
         * @throws {RequiredError}
         */
        fakeOuterStringSerialize(body?: OuterString, options?: RequestOptions = {}): Promise<OuterString> {
            const localVarFetchArgs = FakeApiFetchParamCreator(configuration).fakeOuterStringSerialize(body, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @throws {RequiredError}
         */
        testBodyWithQueryParams(body: User, query: string, options?: RequestOptions = {}): Promise<Response> {
            const localVarFetchArgs = FakeApiFetchParamCreator(configuration).testBodyWithQueryParams(body, query, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        },
        /**
         * To test \"client\" model
         * @summary To test \"client\" model
         * @throws {RequiredError}
         */
        testClientModel(body: Client, options?: RequestOptions = {}): Promise<Client> {
            const localVarFetchArgs = FakeApiFetchParamCreator(configuration).testClientModel(body, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Fake endpoint for testing various parameters 假端點 偽のエンドポイント 가짜 엔드 포인트 
         * @summary Fake endpoint for testing various parameters 假端點 偽のエンドポイント 가짜 엔드 포인트 
         * @throws {RequiredError}
         */
        testEndpointParameters(_number: number, _double: number, patternWithoutDelimiter: string, _byte: string, integer?: number, int32?: number, int64?: number, _float?: number, _string?: string, binary?: string, _date?: Date, dateTime?: Date, password?: string, callback?: string, options?: RequestOptions = {}): Promise<Response> {
            const localVarFetchArgs = FakeApiFetchParamCreator(configuration).testEndpointParameters(_number, _double, patternWithoutDelimiter, _byte, integer, int32, int64, _float, _string, binary, _date, dateTime, password, callback, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        },
        /**
         * To test enum parameters
         * @summary To test enum parameters
         * @throws {RequiredError}
         */
        testEnumParameters(enumFormStringArray?: Array<'>' | '$'>, enumFormString?: '_abc' | '-efg' | '(xyz)', enumHeaderStringArray?: Array<'>' | '$'>, enumHeaderString?: '_abc' | '-efg' | '(xyz)', enumQueryStringArray?: Array<'>' | '$'>, enumQueryString?: '_abc' | '-efg' | '(xyz)', enumQueryInteger?: 1 | -2, enumQueryDouble?: 1.1 | -1.2, options?: RequestOptions = {}): Promise<Response> {
            const localVarFetchArgs = FakeApiFetchParamCreator(configuration).testEnumParameters(enumFormStringArray, enumFormString, enumHeaderStringArray, enumHeaderString, enumQueryStringArray, enumQueryString, enumQueryInteger, enumQueryDouble, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @summary test inline additionalProperties
         * @throws {RequiredError}
         */
        testInlineAdditionalProperties(param: any, options?: RequestOptions = {}): Promise<Response> {
            const localVarFetchArgs = FakeApiFetchParamCreator(configuration).testInlineAdditionalProperties(param, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @summary test json serialization of form data
         * @throws {RequiredError}
         */
        testJsonFormData(param: string, param2: string, options?: RequestOptions = {}): Promise<Response> {
            const localVarFetchArgs = FakeApiFetchParamCreator(configuration).testJsonFormData(param, param2, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        },
    }
};

/**
 * FakeClassnameTags123Api - fetch parameter creator
 * @export
 */
export const FakeClassnameTags123ApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * To test class name in snake case
         * @summary To test class name in snake case
         * @throws {RequiredError}
         */
        testClassname(body: Client, options: RequestOptions): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling testClassname.');
            }
            const localVarPath = `/fake_classname_test`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'PATCH' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication api_key_query required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("api_key_query")
					: configuration.apiKey;
                localVarQueryParameter["api_key_query"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (((body:any):string) || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

export type FakeClassnameTags123ApiType = { 
    testClassname(body: Client, options?: RequestOptions): Promise<Client>,
}

/**
 * FakeClassnameTags123Api - factory function to inject configuration 
 * @export
 */
export const FakeClassnameTags123Api = function(configuration?: Configuration, fetch: FetchAPI = portableFetch): FakeClassnameTags123ApiType {
    const basePath: string = (configuration && configuration.basePath) || BASE_PATH;
    return {
        /**
         * To test class name in snake case
         * @summary To test class name in snake case
         * @throws {RequiredError}
         */
        testClassname(body: Client, options?: RequestOptions = {}): Promise<Client> {
            const localVarFetchArgs = FakeClassnameTags123ApiFetchParamCreator(configuration).testClassname(body, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
    }
};

/**
 * PetApi - fetch parameter creator
 * @export
 */
export const PetApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add a new pet to the store
         * @throws {RequiredError}
         */
        addPet(body: Pet, options: RequestOptions): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling addPet.');
            }
            const localVarPath = `/pet`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication petstore_auth required
            // oauth required
            if (configuration && configuration.accessToken) {
				const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
					? configuration.accessToken("petstore_auth", ["write:pets", "read:pets"])
					: configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (((body:any):string) || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Deletes a pet
         * @throws {RequiredError}
         */
        deletePet(petId: number, apiKey?: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'petId' is not null or undefined
            if (petId === null || petId === undefined) {
                throw new RequiredError('petId','Required parameter petId was null or undefined when calling deletePet.');
            }
            const localVarPath = `/pet/{petId}`
                .replace(`{${"petId"}}`, encodeURIComponent(String(petId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'DELETE' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication petstore_auth required
            // oauth required
            if (configuration && configuration.accessToken) {
				const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
					? configuration.accessToken("petstore_auth", ["write:pets", "read:pets"])
					: configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (apiKey !== undefined && apiKey !== null) {
                localVarHeaderParameter['api_key'] = ((apiKey:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Multiple status values can be provided with comma separated strings
         * @summary Finds Pets by status
         * @throws {RequiredError}
         */
        findPetsByStatus(status: Array<'available' | 'pending' | 'sold'>, options: RequestOptions): FetchArgs {
            // verify required parameter 'status' is not null or undefined
            if (status === null || status === undefined) {
                throw new RequiredError('status','Required parameter status was null or undefined when calling findPetsByStatus.');
            }
            const localVarPath = `/pet/findByStatus`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication petstore_auth required
            // oauth required
            if (configuration && configuration.accessToken) {
				const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
					? configuration.accessToken("petstore_auth", ["write:pets", "read:pets"])
					: configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (status) {
                localVarQueryParameter['status'] = status.join(COLLECTION_FORMATS["csv"]);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
         * @summary Finds Pets by tags
         * @throws {RequiredError}
         */
        findPetsByTags(tags: Array<string>, options: RequestOptions): FetchArgs {
            // verify required parameter 'tags' is not null or undefined
            if (tags === null || tags === undefined) {
                throw new RequiredError('tags','Required parameter tags was null or undefined when calling findPetsByTags.');
            }
            const localVarPath = `/pet/findByTags`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication petstore_auth required
            // oauth required
            if (configuration && configuration.accessToken) {
				const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
					? configuration.accessToken("petstore_auth", ["write:pets", "read:pets"])
					: configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (tags) {
                localVarQueryParameter['tags'] = tags.join(COLLECTION_FORMATS["csv"]);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a single pet
         * @summary Find pet by ID
         * @throws {RequiredError}
         */
        getPetById(petId: number, options: RequestOptions): FetchArgs {
            // verify required parameter 'petId' is not null or undefined
            if (petId === null || petId === undefined) {
                throw new RequiredError('petId','Required parameter petId was null or undefined when calling getPetById.');
            }
            const localVarPath = `/pet/{petId}`
                .replace(`{${"petId"}}`, encodeURIComponent(String(petId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("api_key")
					: configuration.apiKey;
                localVarHeaderParameter["api_key"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update an existing pet
         * @throws {RequiredError}
         */
        updatePet(body: Pet, options: RequestOptions): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updatePet.');
            }
            const localVarPath = `/pet`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'PUT' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication petstore_auth required
            // oauth required
            if (configuration && configuration.accessToken) {
				const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
					? configuration.accessToken("petstore_auth", ["write:pets", "read:pets"])
					: configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (((body:any):string) || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Updates a pet in the store with form data
         * @throws {RequiredError}
         */
        updatePetWithForm(petId: number, name?: string, status?: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'petId' is not null or undefined
            if (petId === null || petId === undefined) {
                throw new RequiredError('petId','Required parameter petId was null or undefined when calling updatePetWithForm.');
            }
            const localVarPath = `/pet/{petId}`
                .replace(`{${"petId"}}`, encodeURIComponent(String(petId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const localVarFormParams = new FormData();

            // authentication petstore_auth required
            // oauth required
            if (configuration && configuration.accessToken) {
				const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
					? configuration.accessToken("petstore_auth", ["write:pets", "read:pets"])
					: configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (name !== undefined) {
                localVarFormParams.set('name', ((name:any):string));
            }

            if (status !== undefined) {
                localVarFormParams.set('status', ((status:any):string));
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            localVarRequestOptions.body = localVarFormParams;

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary uploads an image
         * @throws {RequiredError}
         */
        uploadFile(petId: number, additionalMetadata?: string, file?: any, options: RequestOptions): FetchArgs {
            // verify required parameter 'petId' is not null or undefined
            if (petId === null || petId === undefined) {
                throw new RequiredError('petId','Required parameter petId was null or undefined when calling uploadFile.');
            }
            const localVarPath = `/pet/{petId}/uploadImage`
                .replace(`{${"petId"}}`, encodeURIComponent(String(petId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const localVarFormParams = new FormData();

            // authentication petstore_auth required
            // oauth required
            if (configuration && configuration.accessToken) {
				const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
					? configuration.accessToken("petstore_auth", ["write:pets", "read:pets"])
					: configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (additionalMetadata !== undefined) {
                localVarFormParams.set('additionalMetadata', ((additionalMetadata:any):string));
            }

            if (file !== undefined) {
                localVarFormParams.set('file', ((file:any):string));
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            localVarRequestOptions.body = localVarFormParams;

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

export type PetApiType = { 
    addPet(body: Pet, options?: RequestOptions): Promise<Response>,

    deletePet(petId: number, apiKey?: string, options?: RequestOptions): Promise<Response>,

    findPetsByStatus(status: Array<'available' | 'pending' | 'sold'>, options?: RequestOptions): Promise<Array<Pet>>,

    findPetsByTags(tags: Array<string>, options?: RequestOptions): Promise<Array<Pet>>,

    getPetById(petId: number, options?: RequestOptions): Promise<Pet>,

    updatePet(body: Pet, options?: RequestOptions): Promise<Response>,

    updatePetWithForm(petId: number, name?: string, status?: string, options?: RequestOptions): Promise<Response>,

    uploadFile(petId: number, additionalMetadata?: string, file?: any, options?: RequestOptions): Promise<ApiResponse>,
}

/**
 * PetApi - factory function to inject configuration 
 * @export
 */
export const PetApi = function(configuration?: Configuration, fetch: FetchAPI = portableFetch): PetApiType {
    const basePath: string = (configuration && configuration.basePath) || BASE_PATH;
    return {
        /**
         * 
         * @summary Add a new pet to the store
         * @throws {RequiredError}
         */
        addPet(body: Pet, options?: RequestOptions = {}): Promise<Response> {
            const localVarFetchArgs = PetApiFetchParamCreator(configuration).addPet(body, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @summary Deletes a pet
         * @throws {RequiredError}
         */
        deletePet(petId: number, apiKey?: string, options?: RequestOptions = {}): Promise<Response> {
            const localVarFetchArgs = PetApiFetchParamCreator(configuration).deletePet(petId, apiKey, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        },
        /**
         * Multiple status values can be provided with comma separated strings
         * @summary Finds Pets by status
         * @throws {RequiredError}
         */
        findPetsByStatus(status: Array<'available' | 'pending' | 'sold'>, options?: RequestOptions = {}): Promise<Array<Pet>> {
            const localVarFetchArgs = PetApiFetchParamCreator(configuration).findPetsByStatus(status, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
         * @summary Finds Pets by tags
         * @throws {RequiredError}
         */
        findPetsByTags(tags: Array<string>, options?: RequestOptions = {}): Promise<Array<Pet>> {
            const localVarFetchArgs = PetApiFetchParamCreator(configuration).findPetsByTags(tags, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Returns a single pet
         * @summary Find pet by ID
         * @throws {RequiredError}
         */
        getPetById(petId: number, options?: RequestOptions = {}): Promise<Pet> {
            const localVarFetchArgs = PetApiFetchParamCreator(configuration).getPetById(petId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @summary Update an existing pet
         * @throws {RequiredError}
         */
        updatePet(body: Pet, options?: RequestOptions = {}): Promise<Response> {
            const localVarFetchArgs = PetApiFetchParamCreator(configuration).updatePet(body, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @summary Updates a pet in the store with form data
         * @throws {RequiredError}
         */
        updatePetWithForm(petId: number, name?: string, status?: string, options?: RequestOptions = {}): Promise<Response> {
            const localVarFetchArgs = PetApiFetchParamCreator(configuration).updatePetWithForm(petId, name, status, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @summary uploads an image
         * @throws {RequiredError}
         */
        uploadFile(petId: number, additionalMetadata?: string, file?: any, options?: RequestOptions = {}): Promise<ApiResponse> {
            const localVarFetchArgs = PetApiFetchParamCreator(configuration).uploadFile(petId, additionalMetadata, file, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
    }
};

/**
 * StoreApi - fetch parameter creator
 * @export
 */
export const StoreApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors
         * @summary Delete purchase order by ID
         * @throws {RequiredError}
         */
        deleteOrder(orderId: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'orderId' is not null or undefined
            if (orderId === null || orderId === undefined) {
                throw new RequiredError('orderId','Required parameter orderId was null or undefined when calling deleteOrder.');
            }
            const localVarPath = `/store/order/{order_id}`
                .replace(`{${"order_id"}}`, encodeURIComponent(String(orderId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'DELETE' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a map of status codes to quantities
         * @summary Returns pet inventories by status
         * @throws {RequiredError}
         */
        getInventory(options: RequestOptions): FetchArgs {
            const localVarPath = `/store/inventory`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("api_key")
					: configuration.apiKey;
                localVarHeaderParameter["api_key"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * For valid response try integer IDs with value <= 5 or > 10. Other values will generated exceptions
         * @summary Find purchase order by ID
         * @throws {RequiredError}
         */
        getOrderById(orderId: number, options: RequestOptions): FetchArgs {
            // verify required parameter 'orderId' is not null or undefined
            if (orderId === null || orderId === undefined) {
                throw new RequiredError('orderId','Required parameter orderId was null or undefined when calling getOrderById.');
            }
            const localVarPath = `/store/order/{order_id}`
                .replace(`{${"order_id"}}`, encodeURIComponent(String(orderId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Place an order for a pet
         * @throws {RequiredError}
         */
        placeOrder(body: Order, options: RequestOptions): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling placeOrder.');
            }
            const localVarPath = `/store/order`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (((body:any):string) || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

export type StoreApiType = { 
    deleteOrder(orderId: string, options?: RequestOptions): Promise<Response>,

    getInventory(options?: RequestOptions): Promise<{ [key: string]: number; }>,

    getOrderById(orderId: number, options?: RequestOptions): Promise<Order>,

    placeOrder(body: Order, options?: RequestOptions): Promise<Order>,
}

/**
 * StoreApi - factory function to inject configuration 
 * @export
 */
export const StoreApi = function(configuration?: Configuration, fetch: FetchAPI = portableFetch): StoreApiType {
    const basePath: string = (configuration && configuration.basePath) || BASE_PATH;
    return {
        /**
         * For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors
         * @summary Delete purchase order by ID
         * @throws {RequiredError}
         */
        deleteOrder(orderId: string, options?: RequestOptions = {}): Promise<Response> {
            const localVarFetchArgs = StoreApiFetchParamCreator(configuration).deleteOrder(orderId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        },
        /**
         * Returns a map of status codes to quantities
         * @summary Returns pet inventories by status
         * @throws {RequiredError}
         */
        getInventory(options?: RequestOptions = {}): Promise<{ [key: string]: number; }> {
            const localVarFetchArgs = StoreApiFetchParamCreator(configuration).getInventory(options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * For valid response try integer IDs with value <= 5 or > 10. Other values will generated exceptions
         * @summary Find purchase order by ID
         * @throws {RequiredError}
         */
        getOrderById(orderId: number, options?: RequestOptions = {}): Promise<Order> {
            const localVarFetchArgs = StoreApiFetchParamCreator(configuration).getOrderById(orderId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @summary Place an order for a pet
         * @throws {RequiredError}
         */
        placeOrder(body: Order, options?: RequestOptions = {}): Promise<Order> {
            const localVarFetchArgs = StoreApiFetchParamCreator(configuration).placeOrder(body, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
    }
};

/**
 * UserApi - fetch parameter creator
 * @export
 */
export const UserApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This can only be done by the logged in user.
         * @summary Create user
         * @throws {RequiredError}
         */
        createUser(body: User, options: RequestOptions): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createUser.');
            }
            const localVarPath = `/user`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (((body:any):string) || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Creates list of users with given input array
         * @throws {RequiredError}
         */
        createUsersWithArrayInput(body: Array<User>, options: RequestOptions): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createUsersWithArrayInput.');
            }
            const localVarPath = `/user/createWithArray`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (((body:any):string) || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Creates list of users with given input array
         * @throws {RequiredError}
         */
        createUsersWithListInput(body: Array<User>, options: RequestOptions): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createUsersWithListInput.');
            }
            const localVarPath = `/user/createWithList`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (((body:any):string) || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This can only be done by the logged in user.
         * @summary Delete user
         * @throws {RequiredError}
         */
        deleteUser(username: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'username' is not null or undefined
            if (username === null || username === undefined) {
                throw new RequiredError('username','Required parameter username was null or undefined when calling deleteUser.');
            }
            const localVarPath = `/user/{username}`
                .replace(`{${"username"}}`, encodeURIComponent(String(username)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'DELETE' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get user by user name
         * @throws {RequiredError}
         */
        getUserByName(username: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'username' is not null or undefined
            if (username === null || username === undefined) {
                throw new RequiredError('username','Required parameter username was null or undefined when calling getUserByName.');
            }
            const localVarPath = `/user/{username}`
                .replace(`{${"username"}}`, encodeURIComponent(String(username)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Logs user into the system
         * @throws {RequiredError}
         */
        loginUser(username: string, password: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'username' is not null or undefined
            if (username === null || username === undefined) {
                throw new RequiredError('username','Required parameter username was null or undefined when calling loginUser.');
            }
            // verify required parameter 'password' is not null or undefined
            if (password === null || password === undefined) {
                throw new RequiredError('password','Required parameter password was null or undefined when calling loginUser.');
            }
            const localVarPath = `/user/login`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (username !== undefined) {
                localVarQueryParameter['username'] = ((username:any):string);
            }

            if (password !== undefined) {
                localVarQueryParameter['password'] = ((password:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Logs out current logged in user session
         * @throws {RequiredError}
         */
        logoutUser(options: RequestOptions): FetchArgs {
            const localVarPath = `/user/logout`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This can only be done by the logged in user.
         * @summary Updated user
         * @throws {RequiredError}
         */
        updateUser(username: string, body: User, options: RequestOptions): FetchArgs {
            // verify required parameter 'username' is not null or undefined
            if (username === null || username === undefined) {
                throw new RequiredError('username','Required parameter username was null or undefined when calling updateUser.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updateUser.');
            }
            const localVarPath = `/user/{username}`
                .replace(`{${"username"}}`, encodeURIComponent(String(username)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'PUT' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (((body:any):string) || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

export type UserApiType = { 
    createUser(body: User, options?: RequestOptions): Promise<Response>,

    createUsersWithArrayInput(body: Array<User>, options?: RequestOptions): Promise<Response>,

    createUsersWithListInput(body: Array<User>, options?: RequestOptions): Promise<Response>,

    deleteUser(username: string, options?: RequestOptions): Promise<Response>,

    getUserByName(username: string, options?: RequestOptions): Promise<User>,

    loginUser(username: string, password: string, options?: RequestOptions): Promise<string>,

    logoutUser(options?: RequestOptions): Promise<Response>,

    updateUser(username: string, body: User, options?: RequestOptions): Promise<Response>,
}

/**
 * UserApi - factory function to inject configuration 
 * @export
 */
export const UserApi = function(configuration?: Configuration, fetch: FetchAPI = portableFetch): UserApiType {
    const basePath: string = (configuration && configuration.basePath) || BASE_PATH;
    return {
        /**
         * This can only be done by the logged in user.
         * @summary Create user
         * @throws {RequiredError}
         */
        createUser(body: User, options?: RequestOptions = {}): Promise<Response> {
            const localVarFetchArgs = UserApiFetchParamCreator(configuration).createUser(body, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @summary Creates list of users with given input array
         * @throws {RequiredError}
         */
        createUsersWithArrayInput(body: Array<User>, options?: RequestOptions = {}): Promise<Response> {
            const localVarFetchArgs = UserApiFetchParamCreator(configuration).createUsersWithArrayInput(body, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @summary Creates list of users with given input array
         * @throws {RequiredError}
         */
        createUsersWithListInput(body: Array<User>, options?: RequestOptions = {}): Promise<Response> {
            const localVarFetchArgs = UserApiFetchParamCreator(configuration).createUsersWithListInput(body, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        },
        /**
         * This can only be done by the logged in user.
         * @summary Delete user
         * @throws {RequiredError}
         */
        deleteUser(username: string, options?: RequestOptions = {}): Promise<Response> {
            const localVarFetchArgs = UserApiFetchParamCreator(configuration).deleteUser(username, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @summary Get user by user name
         * @throws {RequiredError}
         */
        getUserByName(username: string, options?: RequestOptions = {}): Promise<User> {
            const localVarFetchArgs = UserApiFetchParamCreator(configuration).getUserByName(username, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @summary Logs user into the system
         * @throws {RequiredError}
         */
        loginUser(username: string, password: string, options?: RequestOptions = {}): Promise<string> {
            const localVarFetchArgs = UserApiFetchParamCreator(configuration).loginUser(username, password, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @summary Logs out current logged in user session
         * @throws {RequiredError}
         */
        logoutUser(options?: RequestOptions = {}): Promise<Response> {
            const localVarFetchArgs = UserApiFetchParamCreator(configuration).logoutUser(options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        },
        /**
         * This can only be done by the logged in user.
         * @summary Updated user
         * @throws {RequiredError}
         */
        updateUser(username: string, body: User, options?: RequestOptions = {}): Promise<Response> {
            const localVarFetchArgs = UserApiFetchParamCreator(configuration).updateUser(username, body, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        },
    }
};

export type ApiTypes = { 
    AnotherFakeApi: AnotherFakeApiType,

    FakeApi: FakeApiType,

    FakeClassnameTags123Api: FakeClassnameTags123ApiType,

    PetApi: PetApiType,

    StoreApi: StoreApiType,

    UserApi: UserApiType,
 }
