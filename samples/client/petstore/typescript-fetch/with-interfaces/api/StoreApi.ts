/* tslint:disable */
/**
 * Swagger Petstore
 * This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import * as IsomorphicFetch                                  from 'isomorphic-fetch';
import * as url                                              from 'url';
import * as models                                           from '../model/models';
import { COLLECTION_FORMATS }                                from '../variables';
import { Configuration }                                     from '../configuration';
import { StoreApiInterface }                            from './StoreApiInterface';

export class StoreApi implements StoreApiInterface {

    protected basePath = 'http://petstore.swagger.io/v2';
    public defaultHeaders: Headers = new Headers();
    public configuration: Configuration = new Configuration();

    constructor(protected isomorphicFetch = IsomorphicFetch, basePath?: string, configuration?: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
        }
    }

    /**
     * For valid response try integer IDs with value &lt; 1000. Anything above 1000 or nonintegers will generate API errors
     * @summary Delete purchase order by ID
     * @param orderId ID of the order that needs to be deleted
     */
    public deleteOrder(orderId: string, extraRequestOptions?: any): Promise<{}> {
        return this.deleteOrderWithHttpInfo(orderId, extraRequestOptions)
            .then((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else if (response.status >= 200 && response.status < 300) {
                    return response.json() || {} as any;
                } else {
                    throw response;
                }
            });
    }

    /**
     * Returns a map of status codes to quantities
     * @summary Returns pet inventories by status
     */
    public getInventory(extraRequestOptions?: any): Promise<{ [key: string]: number; }> {
        return this.getInventoryWithHttpInfo(extraRequestOptions)
            .then((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else if (response.status >= 200 && response.status < 300) {
                    return response.json() || {} as any;
                } else {
                    throw response;
                }
            });
    }

    /**
     * For valid response try integer IDs with value &lt;&#x3D; 5 or &gt; 10. Other values will generated exceptions
     * @summary Find purchase order by ID
     * @param orderId ID of pet that needs to be fetched
     */
    public getOrderById(orderId: number, extraRequestOptions?: any): Promise<models.Order> {
        return this.getOrderByIdWithHttpInfo(orderId, extraRequestOptions)
            .then((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else if (response.status >= 200 && response.status < 300) {
                    return response.json() || {} as any;
                } else {
                    throw response;
                }
            });
    }

    /**
     * 
     * @summary Place an order for a pet
     * @param body order placed for purchasing the pet
     */
    public placeOrder(body: models.Order, extraRequestOptions?: any): Promise<models.Order> {
        return this.placeOrderWithHttpInfo(body, extraRequestOptions)
            .then((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else if (response.status >= 200 && response.status < 300) {
                    return response.json() || {} as any;
                } else {
                    throw response;
                }
            });
    }


    /**
     * Delete purchase order by ID
     * For valid response try integer IDs with value &lt; 1000. Anything above 1000 or nonintegers will generate API errors
     * @param orderId ID of the order that needs to be deleted
     */
    public deleteOrderWithHttpInfo(orderId: string, extraRequestOptions?: any): Promise<Response> {
        const path = '/store/order/{orderId}'
                    .replace('${' + 'orderId' + '}', String(orderId));

        const urlObj = new url.URL(path, this.basePath);
        const headers = new Headers(this.defaultHeaders);
        // verify required parameter 'orderId' is not null or undefined
        if (orderId === null || orderId === undefined) {
            throw new Error('Required parameter orderId was null or undefined when calling deleteOrder.');
        }
        // to determine the Content-Type header
        let consumes = [
        ] as string[];

        // to determine the Accept header
        let produces = [
            'application/xml',
            'application/json'
        ] as string[];

        let requestOptions = {
            method: 'DELETE',
            headers: headers,
        } as RequestInit;
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraRequestOptions) {
            requestOptions = Object.assign(requestOptions, extraRequestOptions);
        }
        return this.isomorphicFetch(url.format(urlObj), requestOptions);
    }

    /**
     * Returns pet inventories by status
     * Returns a map of status codes to quantities
     */
    public getInventoryWithHttpInfo(extraRequestOptions?: any): Promise<Response> {
        const path = '/store/inventory';

        const urlObj = new url.URL(path, this.basePath);
        const headers = new Headers(this.defaultHeaders);
        // to determine the Content-Type header
        let consumes = [
        ] as string[];

        // to determine the Accept header
        let produces = [
            'application/json'
        ] as string[];

        // authentication (api_key) required
        if (this.configuration.apiKey) {
            headers.set('api_key', this.configuration.apiKey);
        }

        let requestOptions = {
            method: 'GET',
            headers: headers,
        } as RequestInit;
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraRequestOptions) {
            requestOptions = Object.assign(requestOptions, extraRequestOptions);
        }
        return this.isomorphicFetch(url.format(urlObj), requestOptions);
    }

    /**
     * Find purchase order by ID
     * For valid response try integer IDs with value &lt;&#x3D; 5 or &gt; 10. Other values will generated exceptions
     * @param orderId ID of pet that needs to be fetched
     */
    public getOrderByIdWithHttpInfo(orderId: number, extraRequestOptions?: any): Promise<Response> {
        const path = '/store/order/{orderId}'
                    .replace('${' + 'orderId' + '}', String(orderId));

        const urlObj = new url.URL(path, this.basePath);
        const headers = new Headers(this.defaultHeaders);
        // verify required parameter 'orderId' is not null or undefined
        if (orderId === null || orderId === undefined) {
            throw new Error('Required parameter orderId was null or undefined when calling getOrderById.');
        }
        // to determine the Content-Type header
        let consumes = [
        ] as string[];

        // to determine the Accept header
        let produces = [
            'application/xml',
            'application/json'
        ] as string[];

        let requestOptions = {
            method: 'GET',
            headers: headers,
        } as RequestInit;
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraRequestOptions) {
            requestOptions = Object.assign(requestOptions, extraRequestOptions);
        }
        return this.isomorphicFetch(url.format(urlObj), requestOptions);
    }

    /**
     * Place an order for a pet
     * 
     * @param body order placed for purchasing the pet
     */
    public placeOrderWithHttpInfo(body: models.Order, extraRequestOptions?: any): Promise<Response> {
        const path = '/store/order';

        const urlObj = new url.URL(path, this.basePath);
        const headers = new Headers(this.defaultHeaders);
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling placeOrder.');
        }
        // to determine the Content-Type header
        let consumes = [
        ] as string[];

        // to determine the Accept header
        let produces = [
            'application/xml',
            'application/json'
        ] as string[];

        headers.set('Content-Type', 'application/json');

        let requestOptions = {
            method: 'POST',
            headers: headers,
            body: body == null ? '' : JSON.stringify(body),
        } as RequestInit;
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraRequestOptions) {
            requestOptions = Object.assign(requestOptions, extraRequestOptions);
        }
        return this.isomorphicFetch(url.format(urlObj), requestOptions);
    }

}
