/* tslint:disable */
/**
 * Swagger Petstore
 * This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import * as IsomorphicFetch                                  from 'isomorphic-fetch';
import * as url                                              from 'url';
import * as models                                           from '../model/models';
import { COLLECTION_FORMATS }                                from '../variables';
import { Configuration }                                     from '../configuration';
import { UserApiInterface }                            from './UserApiInterface';

export class UserApi implements UserApiInterface {

    protected basePath = 'http://petstore.swagger.io/v2';
    public defaultHeaders: Headers = new Headers();
    public configuration: Configuration = new Configuration();

    constructor(protected isomorphicFetch = IsomorphicFetch, basePath?: string, configuration?: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
        }
    }

    /**
     * This can only be done by the logged in user.
     * @summary Create user
     * @param body Created user object
     */
    public createUser(body: models.User, extraRequestOptions?: any): Promise<{}> {
        return this.createUserWithHttpInfo(body, extraRequestOptions)
            .then((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else if (response.status >= 200 && response.status < 300) {
                    return response.json() || {} as any;
                } else {
                    throw response;
                }
            });
    }

    /**
     * 
     * @summary Creates list of users with given input array
     * @param body List of user object
     */
    public createUsersWithArrayInput(body: Array<models.User>, extraRequestOptions?: any): Promise<{}> {
        return this.createUsersWithArrayInputWithHttpInfo(body, extraRequestOptions)
            .then((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else if (response.status >= 200 && response.status < 300) {
                    return response.json() || {} as any;
                } else {
                    throw response;
                }
            });
    }

    /**
     * 
     * @summary Creates list of users with given input array
     * @param body List of user object
     */
    public createUsersWithListInput(body: Array<models.User>, extraRequestOptions?: any): Promise<{}> {
        return this.createUsersWithListInputWithHttpInfo(body, extraRequestOptions)
            .then((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else if (response.status >= 200 && response.status < 300) {
                    return response.json() || {} as any;
                } else {
                    throw response;
                }
            });
    }

    /**
     * This can only be done by the logged in user.
     * @summary Delete user
     * @param username The name that needs to be deleted
     */
    public deleteUser(username: string, extraRequestOptions?: any): Promise<{}> {
        return this.deleteUserWithHttpInfo(username, extraRequestOptions)
            .then((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else if (response.status >= 200 && response.status < 300) {
                    return response.json() || {} as any;
                } else {
                    throw response;
                }
            });
    }

    /**
     * 
     * @summary Get user by user name
     * @param username The name that needs to be fetched. Use user1 for testing. 
     */
    public getUserByName(username: string, extraRequestOptions?: any): Promise<models.User> {
        return this.getUserByNameWithHttpInfo(username, extraRequestOptions)
            .then((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else if (response.status >= 200 && response.status < 300) {
                    return response.json() || {} as any;
                } else {
                    throw response;
                }
            });
    }

    /**
     * 
     * @summary Logs user into the system
     * @param username The user name for login
     * @param password The password for login in clear text
     */
    public loginUser(username: string, password: string, extraRequestOptions?: any): Promise<string> {
        return this.loginUserWithHttpInfo(username, password, extraRequestOptions)
            .then((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else if (response.status >= 200 && response.status < 300) {
                    return response.json() || {} as any;
                } else {
                    throw response;
                }
            });
    }

    /**
     * 
     * @summary Logs out current logged in user session
     */
    public logoutUser(extraRequestOptions?: any): Promise<{}> {
        return this.logoutUserWithHttpInfo(extraRequestOptions)
            .then((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else if (response.status >= 200 && response.status < 300) {
                    return response.json() || {} as any;
                } else {
                    throw response;
                }
            });
    }

    /**
     * This can only be done by the logged in user.
     * @summary Updated user
     * @param username name that need to be deleted
     * @param body Updated user object
     */
    public updateUser(username: string, body: models.User, extraRequestOptions?: any): Promise<{}> {
        return this.updateUserWithHttpInfo(username, body, extraRequestOptions)
            .then((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else if (response.status >= 200 && response.status < 300) {
                    return response.json() || {} as any;
                } else {
                    throw response;
                }
            });
    }


    /**
     * Create user
     * This can only be done by the logged in user.
     * @param body Created user object
     */
    public createUserWithHttpInfo(body: models.User, extraRequestOptions?: any): Promise<Response> {
        const path = '/user';

        const urlObj = new url.URL(path, this.basePath);
        const headers = new Headers(this.defaultHeaders);
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling createUser.');
        }
        // to determine the Content-Type header
        let consumes = [
        ] as string[];

        // to determine the Accept header
        let produces = [
            'application/xml',
            'application/json'
        ] as string[];

        headers.set('Content-Type', 'application/json');

        let requestOptions = {
            method: 'POST',
            headers: headers,
            body: body == null ? '' : JSON.stringify(body),
        } as RequestInit;
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraRequestOptions) {
            requestOptions = Object.assign(requestOptions, extraRequestOptions);
        }
        return this.isomorphicFetch(url.format(urlObj), requestOptions);
    }

    /**
     * Creates list of users with given input array
     * 
     * @param body List of user object
     */
    public createUsersWithArrayInputWithHttpInfo(body: Array<models.User>, extraRequestOptions?: any): Promise<Response> {
        const path = '/user/createWithArray';

        const urlObj = new url.URL(path, this.basePath);
        const headers = new Headers(this.defaultHeaders);
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling createUsersWithArrayInput.');
        }
        // to determine the Content-Type header
        let consumes = [
        ] as string[];

        // to determine the Accept header
        let produces = [
            'application/xml',
            'application/json'
        ] as string[];

        headers.set('Content-Type', 'application/json');

        let requestOptions = {
            method: 'POST',
            headers: headers,
            body: body == null ? '' : JSON.stringify(body),
        } as RequestInit;
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraRequestOptions) {
            requestOptions = Object.assign(requestOptions, extraRequestOptions);
        }
        return this.isomorphicFetch(url.format(urlObj), requestOptions);
    }

    /**
     * Creates list of users with given input array
     * 
     * @param body List of user object
     */
    public createUsersWithListInputWithHttpInfo(body: Array<models.User>, extraRequestOptions?: any): Promise<Response> {
        const path = '/user/createWithList';

        const urlObj = new url.URL(path, this.basePath);
        const headers = new Headers(this.defaultHeaders);
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling createUsersWithListInput.');
        }
        // to determine the Content-Type header
        let consumes = [
        ] as string[];

        // to determine the Accept header
        let produces = [
            'application/xml',
            'application/json'
        ] as string[];

        headers.set('Content-Type', 'application/json');

        let requestOptions = {
            method: 'POST',
            headers: headers,
            body: body == null ? '' : JSON.stringify(body),
        } as RequestInit;
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraRequestOptions) {
            requestOptions = Object.assign(requestOptions, extraRequestOptions);
        }
        return this.isomorphicFetch(url.format(urlObj), requestOptions);
    }

    /**
     * Delete user
     * This can only be done by the logged in user.
     * @param username The name that needs to be deleted
     */
    public deleteUserWithHttpInfo(username: string, extraRequestOptions?: any): Promise<Response> {
        const path = '/user/{username}'
                    .replace('${' + 'username' + '}', String(username));

        const urlObj = new url.URL(path, this.basePath);
        const headers = new Headers(this.defaultHeaders);
        // verify required parameter 'username' is not null or undefined
        if (username === null || username === undefined) {
            throw new Error('Required parameter username was null or undefined when calling deleteUser.');
        }
        // to determine the Content-Type header
        let consumes = [
        ] as string[];

        // to determine the Accept header
        let produces = [
            'application/xml',
            'application/json'
        ] as string[];

        let requestOptions = {
            method: 'DELETE',
            headers: headers,
        } as RequestInit;
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraRequestOptions) {
            requestOptions = Object.assign(requestOptions, extraRequestOptions);
        }
        return this.isomorphicFetch(url.format(urlObj), requestOptions);
    }

    /**
     * Get user by user name
     * 
     * @param username The name that needs to be fetched. Use user1 for testing. 
     */
    public getUserByNameWithHttpInfo(username: string, extraRequestOptions?: any): Promise<Response> {
        const path = '/user/{username}'
                    .replace('${' + 'username' + '}', String(username));

        const urlObj = new url.URL(path, this.basePath);
        const headers = new Headers(this.defaultHeaders);
        // verify required parameter 'username' is not null or undefined
        if (username === null || username === undefined) {
            throw new Error('Required parameter username was null or undefined when calling getUserByName.');
        }
        // to determine the Content-Type header
        let consumes = [
        ] as string[];

        // to determine the Accept header
        let produces = [
            'application/xml',
            'application/json'
        ] as string[];

        let requestOptions = {
            method: 'GET',
            headers: headers,
        } as RequestInit;
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraRequestOptions) {
            requestOptions = Object.assign(requestOptions, extraRequestOptions);
        }
        return this.isomorphicFetch(url.format(urlObj), requestOptions);
    }

    /**
     * Logs user into the system
     * 
     * @param username The user name for login
     * @param password The password for login in clear text
     */
    public loginUserWithHttpInfo(username: string, password: string, extraRequestOptions?: any): Promise<Response> {
        const path = '/user/login';

        const urlObj = new url.URL(path, this.basePath);
        const headers = new Headers(this.defaultHeaders);
        // verify required parameter 'username' is not null or undefined
        if (username === null || username === undefined) {
            throw new Error('Required parameter username was null or undefined when calling loginUser.');
        }
        // verify required parameter 'password' is not null or undefined
        if (password === null || password === undefined) {
            throw new Error('Required parameter password was null or undefined when calling loginUser.');
        }
        if (username !== undefined) {
            urlObj.searchParams.set('username', username as any);
        }
        if (password !== undefined) {
            urlObj.searchParams.set('password', password as any);
        }
        // to determine the Content-Type header
        let consumes = [
        ] as string[];

        // to determine the Accept header
        let produces = [
            'application/xml',
            'application/json'
        ] as string[];

        let requestOptions = {
            method: 'GET',
            headers: headers,
        } as RequestInit;
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraRequestOptions) {
            requestOptions = Object.assign(requestOptions, extraRequestOptions);
        }
        return this.isomorphicFetch(url.format(urlObj), requestOptions);
    }

    /**
     * Logs out current logged in user session
     * 
     */
    public logoutUserWithHttpInfo(extraRequestOptions?: any): Promise<Response> {
        const path = '/user/logout';

        const urlObj = new url.URL(path, this.basePath);
        const headers = new Headers(this.defaultHeaders);
        // to determine the Content-Type header
        let consumes = [
        ] as string[];

        // to determine the Accept header
        let produces = [
            'application/xml',
            'application/json'
        ] as string[];

        let requestOptions = {
            method: 'GET',
            headers: headers,
        } as RequestInit;
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraRequestOptions) {
            requestOptions = Object.assign(requestOptions, extraRequestOptions);
        }
        return this.isomorphicFetch(url.format(urlObj), requestOptions);
    }

    /**
     * Updated user
     * This can only be done by the logged in user.
     * @param username name that need to be deleted
     * @param body Updated user object
     */
    public updateUserWithHttpInfo(username: string, body: models.User, extraRequestOptions?: any): Promise<Response> {
        const path = '/user/{username}'
                    .replace('${' + 'username' + '}', String(username));

        const urlObj = new url.URL(path, this.basePath);
        const headers = new Headers(this.defaultHeaders);
        // verify required parameter 'username' is not null or undefined
        if (username === null || username === undefined) {
            throw new Error('Required parameter username was null or undefined when calling updateUser.');
        }
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling updateUser.');
        }
        // to determine the Content-Type header
        let consumes = [
        ] as string[];

        // to determine the Accept header
        let produces = [
            'application/xml',
            'application/json'
        ] as string[];

        headers.set('Content-Type', 'application/json');

        let requestOptions = {
            method: 'PUT',
            headers: headers,
            body: body == null ? '' : JSON.stringify(body),
        } as RequestInit;
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraRequestOptions) {
            requestOptions = Object.assign(requestOptions, extraRequestOptions);
        }
        return this.isomorphicFetch(url.format(urlObj), requestOptions);
    }

}
