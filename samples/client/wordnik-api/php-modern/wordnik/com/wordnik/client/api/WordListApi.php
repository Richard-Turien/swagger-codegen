<?php
/**
 *  Copyright 2011 Wordnik, Inc.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
namespace com\wordnik\client\api;

use com\wordnik\client\common\APIClient;
use com\wordnik\client\model\WordListWord;
use com\wordnik\client\model\WordList;
use com\wordnik\client\model\StringValue;


/**
 *
 * NOTE: This class is auto generated by the swagger code generator program. Do not edit the class manually.
 */
class WordListApi {

	function __construct(APIClient $apiClient) {
		$this->apiClient = $apiClient;
	}

	/**
	 * Updates an existing WordList.
	 *
	* @param string $permalink permalink of WordList to update (required)
	* @param WordList $body Updated WordList (optional)
	* @param string $auth_token The auth token of the logged-in user, obtained by calling /account.{format}/authenticate/{username} (described above) (required)
	*/
	public function updateWordList($permalink, $body=null, $auth_token) {

		//parse inputs
		$resourcePath = "/wordList.{format}/{permalink}";
		$resourcePath = str_replace("{format}", "json", $resourcePath);
		$method = "PUT";
		$queryParams = array();
		$headerParams = array();

		if($auth_token != null) {
			$headerParams['auth_token'] = $this->apiClient->toHeaderValue($auth_token);
		}
		if($permalink != null) {
			$resourcePath = str_replace("{" . "permalink" . "}", $this->apiClient->toPathValue($permalink), $resourcePath);
		}
		//make the API Call
		if (!isset($body)) {
			$body = null;
		}
		$response = $this->apiClient->callAPI($resourcePath, $method, $queryParams, $body, $headerParams);
		
	}
	
	/**
	 * Deletes an existing WordList.
	 *
	* @param string $permalink ID of WordList to delete (required)
	* @param string $auth_token The auth token of the logged-in user, obtained by calling /account.{format}/authenticate/{username} (described above) (required)
	*/
	public function deleteWordList($permalink, $auth_token) {

		//parse inputs
		$resourcePath = "/wordList.{format}/{permalink}";
		$resourcePath = str_replace("{format}", "json", $resourcePath);
		$method = "DELETE";
		$queryParams = array();
		$headerParams = array();

		if($auth_token != null) {
			$headerParams['auth_token'] = $this->apiClient->toHeaderValue($auth_token);
		}
		if($permalink != null) {
			$resourcePath = str_replace("{" . "permalink" . "}", $this->apiClient->toPathValue($permalink), $resourcePath);
		}
		//make the API Call
		if (!isset($body)) {
			$body = null;
		}
		$response = $this->apiClient->callAPI($resourcePath, $method, $queryParams, $body, $headerParams);
		
	}
	
	/**
	 * Fetches a WordList by ID.
	 *
	* @param string $permalink permalink of WordList to fetch (required)
	* @param string $auth_token The auth token of the logged-in user, obtained by calling /account.{format}/authenticate/{username} (described above) (required)
	* @return WordList
	*/
	public function getWordListByPermalink($permalink, $auth_token) {

		//parse inputs
		$resourcePath = "/wordList.{format}/{permalink}";
		$resourcePath = str_replace("{format}", "json", $resourcePath);
		$method = "GET";
		$queryParams = array();
		$headerParams = array();

		if($auth_token != null) {
			$headerParams['auth_token'] = $this->apiClient->toHeaderValue($auth_token);
		}
		if($permalink != null) {
			$resourcePath = str_replace("{" . "permalink" . "}", $this->apiClient->toPathValue($permalink), $resourcePath);
		}
		//make the API Call
		if (!isset($body)) {
			$body = null;
		}
		$response = $this->apiClient->callAPI($resourcePath, $method, $queryParams, $body, $headerParams);
		if(!$response){
			return null;
		}

		return $this->apiClient->deserialize($response, 'WordList');
		
	}
	
	/**
	 * Adds words to a WordList.
	 *
	* @param string $permalink permalink of WordList to user (required)
	* @param array[StringValue] $body Array of words to add to WordList (optional)
	* @param string $auth_token The auth token of the logged-in user, obtained by calling /account.{format}/authenticate/{username} (described above) (required)
	*/
	public function addWordsToWordList($permalink, $body=null, $auth_token) {

		//parse inputs
		$resourcePath = "/wordList.{format}/{permalink}/words";
		$resourcePath = str_replace("{format}", "json", $resourcePath);
		$method = "POST";
		$queryParams = array();
		$headerParams = array();

		if($auth_token != null) {
			$headerParams['auth_token'] = $this->apiClient->toHeaderValue($auth_token);
		}
		if($permalink != null) {
			$resourcePath = str_replace("{" . "permalink" . "}", $this->apiClient->toPathValue($permalink), $resourcePath);
		}
		//make the API Call
		if (!isset($body)) {
			$body = null;
		}
		$response = $this->apiClient->callAPI($resourcePath, $method, $queryParams, $body, $headerParams);
		
	}
	
	/**
	 * Fetches words in a WordList.
	 *
	* @param string $permalink ID of WordList to use (required)
	* @param string $auth_token The auth token of the logged-in user, obtained by calling /account.{format}/authenticate/{username} (described above) (required)
	* @param string $sortBy Field to sort by (optional)
	* @param string $sortOrder Direction to sort (optional)
	* @param int $skip Results to skip (optional)
	* @param int $limit Maximum number of results to return (optional)
	* @return array[WordListWord]
	*/
	public function getWordListWords($permalink, $auth_token, $sortBy=null, $sortOrder=null, $skip=null, $limit=null) {

		//parse inputs
		$resourcePath = "/wordList.{format}/{permalink}/words";
		$resourcePath = str_replace("{format}", "json", $resourcePath);
		$method = "GET";
		$queryParams = array();
		$headerParams = array();

		if($sortBy != null) {
			$queryParams['sortBy'] = $this->apiClient->toQueryValue($sortBy);
		}
		if($sortOrder != null) {
			$queryParams['sortOrder'] = $this->apiClient->toQueryValue($sortOrder);
		}
		if($skip != null) {
			$queryParams['skip'] = $this->apiClient->toQueryValue($skip);
		}
		if($limit != null) {
			$queryParams['limit'] = $this->apiClient->toQueryValue($limit);
		}
		if($auth_token != null) {
			$headerParams['auth_token'] = $this->apiClient->toHeaderValue($auth_token);
		}
		if($permalink != null) {
			$resourcePath = str_replace("{" . "permalink" . "}", $this->apiClient->toPathValue($permalink), $resourcePath);
		}
		//make the API Call
		if (!isset($body)) {
			$body = null;
		}
		$response = $this->apiClient->callAPI($resourcePath, $method, $queryParams, $body, $headerParams);
		if(!$response){
			return null;
		}

		return $this->apiClient->deserialize($response, 'array[WordListWord]');
		
	}
	
	/**
	 * Removes words from a WordList.
	 *
	* @param string $permalink permalink of WordList to use (required)
	* @param array[StringValue] $body Words to remove from WordList (optional)
	* @param string $auth_token The auth token of the logged-in user, obtained by calling /account.{format}/authenticate/{username} (described above) (required)
	*/
	public function deleteWordsFromWordList($permalink, $body=null, $auth_token) {

		//parse inputs
		$resourcePath = "/wordList.{format}/{permalink}/deleteWords";
		$resourcePath = str_replace("{format}", "json", $resourcePath);
		$method = "POST";
		$queryParams = array();
		$headerParams = array();

		if($auth_token != null) {
			$headerParams['auth_token'] = $this->apiClient->toHeaderValue($auth_token);
		}
		if($permalink != null) {
			$resourcePath = str_replace("{" . "permalink" . "}", $this->apiClient->toPathValue($permalink), $resourcePath);
		}
		//make the API Call
		if (!isset($body)) {
			$body = null;
		}
		$response = $this->apiClient->callAPI($resourcePath, $method, $queryParams, $body, $headerParams);
		
	}
	
	}

