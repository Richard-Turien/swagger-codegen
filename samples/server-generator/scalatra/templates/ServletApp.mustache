package com.wordnik.swagger.sample

import {{apiPackage}}._

import com.wordnik.swagger.core.SwaggerSpec

import org.scalatra.{ ScalatraServlet }
import org.scalatra.swagger.{ Swagger, SwaggerBase }

import org.eclipse.jetty.server.nio.SelectChannelConnector
import org.eclipse.jetty.server.Server
import org.eclipse.jetty.server.handler.ContextHandlerCollection
import org.eclipse.jetty.servlet.{ ServletContextHandler, ServletHolder }

object ServletApp extends App {
  val server = new Server
  implicit val swagger = new SwaggerApp

  server setGracefulShutdown 5000
  server setSendServerVersion false
  server setSendDateHeader true
  server setStopAtShutdown true

  val connector = new SelectChannelConnector
  connector setPort 8002
  connector setMaxIdleTime 90000

  server addConnector connector

  val apiServlets = new ServletContextHandler(ServletContextHandler.SESSIONS)
  apiServlets setContextPath "/api"

  val handlers = new ContextHandlerCollection
  handlers addHandler apiServlets

  {{#apis}}
  val {{name}}Servlet = new {{className}}
  swagger register ("{{name}}", "/{{name}}", "{{{description}}}", {{name}}Servlet)
  apiServlets addServlet (new ServletHolder({{name}}Servlet), "/pet/*")
  apiServlets addServlet (new ServletHolder(new ResourcesApp), "/*")

  {{/apis}}

  server setHandler handlers
  server start ()
}

class ResourcesApp(implicit val swagger: Swagger) extends ScalatraServlet with SwaggerBase {
  before() {
    response.headers += ("Access-Control-Allow-Origin" -> "*")
  }

  protected def buildFullUrl(path: String) = if (path.startsWith("http")) path else {
    "http://%s:%s%s%s".format(
      request.getServerName,
      request.getServerPort,
      request.getContextPath,
      path)
  }
}

class SwaggerApp extends Swagger(SwaggerSpec.version, "1")