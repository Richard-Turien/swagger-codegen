package {{package}}

import json.JsonUtil
import com.wordnik.swagger.core.ApiPropertiesReader
{{#imports}}import {{import}}
{{/imports}}
import org.scalatra.ScalatraServlet
import org.scalatra.swagger._

import scala.collection.JavaConverters._

class {{name}} (implicit val swagger: Swagger) extends ScalatraServlet with SwaggerBase with SwaggerSupport {
  protected def buildFullUrl(path: String) = "{{basePath}}/%s" format path

//  val data = new PetData
  val m = JsonUtil.mapper

//  models = Map(swaggerToModel(classOf[Pet]))

  {{#operations}}
  {{#operation}}
  {{httpMethod}}("{{path}}",
    summary("{{{summary}}}"),
    nickname("{{nickname}}"),
    responseClass("{{#returnType}}{{returnType}}{{/returnType}}{{^returnType}}void{{/returnType}}"),
    endpoint("{NOT SURE}"),
    notes("{{{notes}}}"),
    parameters(
      {{#allParams}}
      {{#queryParam}}
      // it's a query param
      Parameter("{{paramName}}", "{{{description}}}",
        paramType = ParamType.Query,
        required = {{required}},
        allowMultiple = {{allowMultiple}},
        {{#allowableValues}}allowableValues = "{{{allowableValues}}}",{{/allowableValues}}
        defaultValue = {{#defaultValue}}Some({{{defaultValue}}}){{/defaultValue}}{{^defaultValue}}None{{/defaultValue}},
        dataType = DataType("{{dataType}}"))
      {{/queryParam}}
      {{#pathParam}}
      // it's a path param
      Parameter("{{paramName}}", "{{{description}}}",
        dataType = DataType.String,
        paramType = ParamType.Path)
      {{/pathParam}}
      {{#headerParam}}
      // it's a header param
      Parameter("{{paramName}}", "{{{description}}}",
        dataType = DataType("{{dataType}}"),
        paramType = ParamType.Header)
      {{/headerParam}}
      {{#bodyParam}}
      // it's a body param
      Parameter("{{paramName}}", "{{{description}}}",
        dataType = DataType("{{dataType}}"),
        paramType = ParamType.Body)
      {{/bodyParam}}
      {{#hasMore}},{{/hasMore}}{{newline}}
      {{/allParams}}
      )) {
  }

  {{/operation}}
  {{/operations}}
}