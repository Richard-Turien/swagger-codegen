/**
* Swagger Petstore
* This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.
*
* OpenAPI spec version: 1.0.0
* Contact: apiteam@swagger.io
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/
package io.swagger.server

import io.ktor.application.ApplicationCall
import io.ktor.http.HttpMethod
import io.ktor.locations.*
import io.ktor.pipeline.PipelineContext
import io.ktor.routing.Route
import io.ktor.routing.method
import io.swagger.server.models.*


// NOTE: ktor-location@0.9.0 is missing extension for Route.delete. This includes it.
inline fun <reified T : Any> Route.delete(noinline body: suspend PipelineContext<Unit, ApplicationCall>.(T) -> Unit): Route {
    return location(T::class) {
        method(HttpMethod.Delete) {
            handle(body)
        }
    }
}

object Paths {
    /**
     * Add a new pet to the store
     * 
     * @param body Pet object that needs to be added to the store 
     */
    @location("/pet") class addPet(val body: Pet)

    /**
     * Deletes a pet
     * 
     * @param petId Pet id to delete 
     * @param apiKey  (optional)
     */
    @location("/pet/{petId}") class deletePet(val petId: kotlin.Long, val apiKey: kotlin.String)

    /**
     * Finds Pets by status
     * Multiple status values can be provided with comma separated strings
     * @param status Status values that need to be considered for filter 
     */
    @location("/pet/findByStatus") class findPetsByStatus(val status: kotlin.Array<kotlin.String>)

    /**
     * Finds Pets by tags
     * Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
     * @param tags Tags to filter by 
     */
    @location("/pet/findByTags") class findPetsByTags(val tags: kotlin.Array<kotlin.String>)

    /**
     * Find pet by ID
     * Returns a single pet
     * @param petId ID of pet to return 
     */
    @location("/pet/{petId}") class getPetById(val petId: kotlin.Long)

    /**
     * Update an existing pet
     * 
     * @param body Pet object that needs to be added to the store 
     */
    @location("/pet") class updatePet(val body: Pet)

    /**
     * Updates a pet in the store with form data
     * 
     * @param petId ID of pet that needs to be updated 
     * @param name Updated name of the pet (optional)
     * @param status Updated status of the pet (optional)
     */
    @location("/pet/{petId}") class updatePetWithForm(val petId: kotlin.Long, val name: kotlin.String, val status: kotlin.String)

    /**
     * uploads an image
     * 
     * @param petId ID of pet to update 
     * @param additionalMetadata Additional data to pass to server (optional)
     * @param file file to upload (optional)
     */
    @location("/pet/{petId}/uploadImage") class uploadFile(val petId: kotlin.Long, val additionalMetadata: kotlin.String, val file: java.io.File)

    /**
     * Delete purchase order by ID
     * For valid response try integer IDs with value &lt; 1000. Anything above 1000 or nonintegers will generate API errors
     * @param orderId ID of the order that needs to be deleted 
     */
    @location("/store/order/{orderId}") class deleteOrder(val orderId: kotlin.String)

    /**
     * Returns pet inventories by status
     * Returns a map of status codes to quantities
     */
    @location("/store/inventory") class getInventory()

    /**
     * Find purchase order by ID
     * For valid response try integer IDs with value &lt;&#x3D; 5 or &gt; 10. Other values will generated exceptions
     * @param orderId ID of pet that needs to be fetched 
     */
    @location("/store/order/{orderId}") class getOrderById(val orderId: kotlin.Long)

    /**
     * Place an order for a pet
     * 
     * @param body order placed for purchasing the pet 
     */
    @location("/store/order") class placeOrder(val body: Order)

    /**
     * Create user
     * This can only be done by the logged in user.
     * @param body Created user object 
     */
    @location("/user") class createUser(val body: User)

    /**
     * Creates list of users with given input array
     * 
     * @param body List of user object 
     */
    @location("/user/createWithArray") class createUsersWithArrayInput(val body: kotlin.Array<User>)

    /**
     * Creates list of users with given input array
     * 
     * @param body List of user object 
     */
    @location("/user/createWithList") class createUsersWithListInput(val body: kotlin.Array<User>)

    /**
     * Delete user
     * This can only be done by the logged in user.
     * @param username The name that needs to be deleted 
     */
    @location("/user/{username}") class deleteUser(val username: kotlin.String)

    /**
     * Get user by user name
     * 
     * @param username The name that needs to be fetched. Use user1 for testing.  
     */
    @location("/user/{username}") class getUserByName(val username: kotlin.String)

    /**
     * Logs user into the system
     * 
     * @param username The user name for login 
     * @param password The password for login in clear text 
     */
    @location("/user/login") class loginUser(val username: kotlin.String, val password: kotlin.String)

    /**
     * Logs out current logged in user session
     * 
     */
    @location("/user/logout") class logoutUser()

    /**
     * Updated user
     * This can only be done by the logged in user.
     * @param username name that need to be deleted 
     * @param body Updated user object 
     */
    @location("/user/{username}") class updateUser(val username: kotlin.String, val body: User)

}
