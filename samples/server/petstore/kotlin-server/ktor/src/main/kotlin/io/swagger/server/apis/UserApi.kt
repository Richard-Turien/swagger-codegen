/**
* Swagger Petstore
* This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.
*
* OpenAPI spec version: 1.0.0
* Contact: apiteam@swagger.io
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/
package io.swagger.server.apis

import com.google.gson.*
import io.ktor.application.*
import io.ktor.auth.*
import io.ktor.http.*
import io.ktor.locations.*
import io.ktor.response.*
import io.ktor.routing.*
import io.swagger.server.*
import io.swagger.server.infrastructure.*
import io.swagger.server.*

import io.swagger.server.models.User

fun Route.UserApi() {
    val gson = Gson()
    route("/user") {
        post {
            call.respond(HttpStatusCode.NotImplemented)
        }
    }
    route("/user/createWithArray") {
        post {
            call.respond(HttpStatusCode.NotImplemented)
        }
    }
    route("/user/createWithList") {
        post {
            call.respond(HttpStatusCode.NotImplemented)
        }
    }
    delete<Paths.deleteUser> {
        call.respond(HttpStatusCode.NotImplemented)
    }
    get<Paths.getUserByName> {
        val exampleContentType = "application/xml"
        val exampleContentString = """<User>
          <id>123456789</id>
          <username>aeiou</username>
          <firstName>aeiou</firstName>
          <lastName>aeiou</lastName>
          <email>aeiou</email>
          <password>aeiou</password>
          <phone>aeiou</phone>
          <userStatus>123</userStatus>
        </User>"""
        
        when(exampleContentType) {
            "application/json" -> call.respond(gson.fromJson(exampleContentString, MutableMap::class.java))
            "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
            else -> call.respondText(exampleContentString)
        }
    }
    get<Paths.loginUser> {
        val exampleContentType = "application/xml"
        val exampleContentString = """aeiou"""
        
        when(exampleContentType) {
            "application/json" -> call.respond(gson.fromJson(exampleContentString, MutableMap::class.java))
            "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
            else -> call.respondText(exampleContentString)
        }
    }
    get<Paths.logoutUser> {
        call.respond(HttpStatusCode.NotImplemented)
    }
    route("/user/{username}") {
        put {
            call.respond(HttpStatusCode.NotImplemented)
        }
    }
}
