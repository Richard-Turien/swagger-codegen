/**
* Swagger Petstore
* This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.
*
* OpenAPI spec version: 1.0.0
* Contact: apiteam@swagger.io
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/
package io.swagger.server.apis

import com.google.gson.Gson
import io.ktor.application.call
import io.ktor.auth.UserIdPrincipal
import io.ktor.auth.authentication
import io.ktor.auth.basicAuthentication
import io.ktor.auth.OAuthAccessTokenResponse
import io.ktor.auth.OAuthServerSettings
import io.ktor.http.ContentType
import io.ktor.http.HttpStatusCode
import io.ktor.locations.location
import io.ktor.locations.oauthAtLocation
import io.ktor.response.respond
import io.ktor.response.respondText
import io.ktor.routing.Route
import io.ktor.routing.delete as DELETE
import io.ktor.routing.get as GET
import io.ktor.routing.head as HEAD
import io.ktor.routing.options as OPTIONS
import io.ktor.routing.patch as PATCH
import io.ktor.routing.post as POST
import io.ktor.routing.put as PUT

import kotlinx.coroutines.experimental.asCoroutineDispatcher

import io.swagger.server.ApplicationAuthProviders
import io.swagger.server.Paths
import io.swagger.server.ApplicationExecutors
import io.swagger.server.HTTP.client
import io.swagger.server.infrastructure.ApiPrincipal
import io.swagger.server.infrastructure.apiKeyAuth

import io.swagger.server.models.User

fun Route.UserApi() {
    val gson = Gson()
    val empty = mutableMapOf<String, Any?>()
    location<Paths.createUser> {
        POST {
            call.respond(HttpStatusCode.NotImplemented)
        }
    }
    location<Paths.createUsersWithArrayInput> {
        POST {
            call.respond(HttpStatusCode.NotImplemented)
        }
    }
    location<Paths.createUsersWithListInput> {
        POST {
            call.respond(HttpStatusCode.NotImplemented)
        }
    }
    location<Paths.deleteUser> {
        DELETE {
            call.respond(HttpStatusCode.NotImplemented)
        }
    }
    location<Paths.getUserByName> {
        GET {
                val exampleContentType = "application/xml"
                val exampleContentString = """<User>
  <id>123456789</id>
  <username>aeiou</username>
  <firstName>aeiou</firstName>
  <lastName>aeiou</lastName>
  <email>aeiou</email>
  <password>aeiou</password>
  <phone>aeiou</phone>
  <userStatus>123</userStatus>
</User>"""

                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
        }
    }
    location<Paths.loginUser> {
        GET {
                val exampleContentType = "application/xml"
                val exampleContentString = """aeiou"""

                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
        }
    }
    location<Paths.logoutUser> {
        GET {
            call.respond(HttpStatusCode.NotImplemented)
        }
    }
    location<Paths.updateUser> {
        PUT {
            call.respond(HttpStatusCode.NotImplemented)
        }
    }
}
