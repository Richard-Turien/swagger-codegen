/*
 * Swagger Petstore
 *
 * This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{

    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class EnumTest :  IEquatable<EnumTest>
    {
                /// <summary>
        /// Gets or Sets EnumString
        /// </summary>
        public enum EnumStringEnum
        {
            
            /// <summary>
            /// Enum UPPEREnum for "UPPER"
            /// </summary>
            [EnumMember(Value = "UPPER")]
            UPPEREnum,
            
            /// <summary>
            /// Enum LowerEnum for "lower"
            /// </summary>
            [EnumMember(Value = "lower")]
            LowerEnum,
            
            /// <summary>
            /// Enum Empty for ""
            /// </summary>
            [EnumMember(Value = "")]
            Empty
        }
                /// <summary>
        /// Gets or Sets EnumInteger
        /// </summary>
        public enum EnumIntegerEnum
        {
            
            /// <summary>
            /// Enum _1Enum for "1"
            /// </summary>
            [EnumMember(Value = ""1"")]
            _1Enum = "1",
            
            /// <summary>
            /// Enum _1Enum for "-1"
            /// </summary>
            [EnumMember(Value = ""-1"")]
            _1Enum = "-1"
        }
                /// <summary>
        /// Gets or Sets EnumNumber
        /// </summary>
        public enum EnumNumberEnum
        {
            
            /// <summary>
            /// Enum _11Enum for "1.1"
            /// </summary>
            [EnumMember(Value = ""1.1"")]
            _11Enum,
            
            /// <summary>
            /// Enum _12Enum for "-1.2"
            /// </summary>
            [EnumMember(Value = ""-1.2"")]
            _12Enum
        }
        /// <summary>
        /// Gets or Sets EnumString
        /// </summary>
        [DataMember(Name="enum_string")]
        public EnumStringEnum? EnumString { get; set; }
        /// <summary>
        /// Gets or Sets EnumInteger
        /// </summary>
        [DataMember(Name="enum_integer")]
        public EnumIntegerEnum? EnumInteger { get; set; }
        /// <summary>
        /// Gets or Sets EnumNumber
        /// </summary>
        [DataMember(Name="enum_number")]
        public EnumNumberEnum? EnumNumber { get; set; }

        /// <summary>
        /// Initializes a new instance of the <see cref="EnumTest" /> class.
        /// </summary>
        /// <param name="EnumString">EnumString.</param>
        /// <param name="EnumInteger">EnumInteger.</param>
        /// <param name="EnumNumber">EnumNumber.</param>
        /// <param name="OuterEnum">OuterEnum.</param>
        public EnumTest(EnumStringEnum? EnumString = default(EnumStringEnum?), EnumIntegerEnum? EnumInteger = default(EnumIntegerEnum?), EnumNumberEnum? EnumNumber = default(EnumNumberEnum?), OuterEnum OuterEnum = default(OuterEnum))
        {
            this.EnumString = EnumString;
            this.EnumInteger = EnumInteger;
            this.EnumNumber = EnumNumber;
            this.OuterEnum = OuterEnum;
            
        }

        /// <summary>
        /// Gets or Sets OuterEnum
        /// </summary>
        [DataMember(Name="outerEnum")]
        public OuterEnum OuterEnum { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EnumTest {\n");
            sb.Append("  EnumString: ").Append(EnumString).Append("\n");
            sb.Append("  EnumInteger: ").Append(EnumInteger).Append("\n");
            sb.Append("  EnumNumber: ").Append(EnumNumber).Append("\n");
            sb.Append("  OuterEnum: ").Append(OuterEnum).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            if (obj.GetType() != GetType()) return false;
            return Equals((EnumTest)obj);
        }

        /// <summary>
        /// Returns true if EnumTest instances are equal
        /// </summary>
        /// <param name="other">Instance of EnumTest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EnumTest other)
        {

            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    this.EnumString == other.EnumString ||
                    this.EnumString != null &&
                    this.EnumString.Equals(other.EnumString)
                ) && 
                (
                    this.EnumInteger == other.EnumInteger ||
                    this.EnumInteger != null &&
                    this.EnumInteger.Equals(other.EnumInteger)
                ) && 
                (
                    this.EnumNumber == other.EnumNumber ||
                    this.EnumNumber != null &&
                    this.EnumNumber.Equals(other.EnumNumber)
                ) && 
                (
                    this.OuterEnum == other.OuterEnum ||
                    this.OuterEnum != null &&
                    this.OuterEnum.Equals(other.OuterEnum)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                    if (this.EnumString != null)
                    hash = hash * 59 + this.EnumString.GetHashCode();
                    if (this.EnumInteger != null)
                    hash = hash * 59 + this.EnumInteger.GetHashCode();
                    if (this.EnumNumber != null)
                    hash = hash * 59 + this.EnumNumber.GetHashCode();
                    if (this.OuterEnum != null)
                    hash = hash * 59 + this.OuterEnum.GetHashCode();
                return hash;
            }
        }

        #region Operators

        public static bool operator ==(EnumTest left, EnumTest right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(EnumTest left, EnumTest right)
        {
            return !Equals(left, right);
        }

        #endregion Operators

    }
}
