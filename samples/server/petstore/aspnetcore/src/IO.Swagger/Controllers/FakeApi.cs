/*
 * Swagger Petstore
 *
 * This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.IO;
using System.Linq;
using System.Net;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json;
using Swashbuckle.SwaggerGen.Annotations;
using IO.Swagger.Models;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    public class FakeApiController : Controller
    { 

        /// <summary>
        /// To test \&quot;client\&quot; model
        /// </summary>
        /// <remarks>To test \&quot;client\&quot; model</remarks>
        /// <param name="body">client model</param>
        /// <response code="200">successful operation</response>
        [HttpPatch]
        [Route("/v2/fake")]
        [SwaggerOperation("TestClientModel")]
        [SwaggerResponse(200, type: typeof(Client))]
        public virtual IActionResult TestClientModel([FromBody]Client body)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Client>(exampleJson)
            : default(Client);
            return new ObjectResult(example);
        }


        /// <summary>
        /// Fake endpoint for testing various parameters 假端點 偽のエンドポイント 가짜 엔드 포인트 
        /// </summary>
        /// <remarks>Fake endpoint for testing various parameters 假端點 偽のエンドポイント 가짜 엔드 포인트 </remarks>
        /// <param name="number">None</param>
        /// <param name="double">None</param>
        /// <param name="patternWithoutDelimiter">None</param>
        /// <param name="byte">None</param>
        /// <param name="integer">None</param>
        /// <param name="int32">None</param>
        /// <param name="int64">None</param>
        /// <param name="float">None</param>
        /// <param name="string">None</param>
        /// <param name="binary">None</param>
        /// <param name="date">None</param>
        /// <param name="dateTime">None</param>
        /// <param name="password">None</param>
        /// <param name="callback">None</param>
        /// <response code="400">Invalid username supplied</response>
        /// <response code="404">User not found</response>
        [HttpPost]
        [Route("/v2/fake")]
        [SwaggerOperation("TestEndpointParameters")]
        public virtual void TestEndpointParameters([FromForm]decimal? number, [FromForm]double? double, [FromForm]string patternWithoutDelimiter, [FromForm]byte[] byte, [FromForm]int? integer, [FromForm]int? int32, [FromForm]long? int64, [FromForm]float? float, [FromForm]string string, [FromForm]byte[] binary, [FromForm]DateTime? date, [FromForm]DateTime? dateTime, [FromForm]string password, [FromForm]string callback)
        { 
            throw new NotImplementedException();
        }


        /// <summary>
        /// To test enum parameters
        /// </summary>
        /// <remarks>To test enum parameters</remarks>
        /// <param name="enumFormStringArray">Form parameter enum test (string array)</param>
        /// <param name="enumFormString">Form parameter enum test (string)</param>
        /// <param name="enumHeaderStringArray">Header parameter enum test (string array)</param>
        /// <param name="enumHeaderString">Header parameter enum test (string)</param>
        /// <param name="enumQueryStringArray">Query parameter enum test (string array)</param>
        /// <param name="enumQueryString">Query parameter enum test (string)</param>
        /// <param name="enumQueryInteger">Query parameter enum test (double)</param>
        /// <param name="enumQueryDouble">Query parameter enum test (double)</param>
        /// <response code="400">Invalid request</response>
        /// <response code="404">Not found</response>
        [HttpGet]
        [Route("/v2/fake")]
        [SwaggerOperation("TestEnumParameters")]
        public virtual void TestEnumParameters([FromForm]List<string> enumFormStringArray, [FromForm]string enumFormString, [FromHeader]List<string> enumHeaderStringArray, [FromHeader]string enumHeaderString, [FromQuery]List<string> enumQueryStringArray, [FromQuery]string enumQueryString, [FromQuery]int? enumQueryInteger, [FromForm]double? enumQueryDouble)
        { 
            throw new NotImplementedException();
        }
    }
}
