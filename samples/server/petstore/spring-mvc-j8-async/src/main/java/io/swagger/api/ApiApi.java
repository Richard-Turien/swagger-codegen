/**
 * NOTE: This class is auto generated by the swagger code generator program (2.3.0-SNAPSHOT).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

package io.swagger.api;

import io.swagger.model.Definition1;
import io.swagger.model.Definition2;
import io.swagger.model.Definition3;

import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import java.io.IOException;

import java.util.List;
import java.util.concurrent.CompletableFuture;
import javax.validation.constraints.*;
import javax.validation.Valid;

@Api(value = "api", description = "the api API")
public interface ApiApi {

    @ApiOperation(value = "Definition 1", notes = "", response = Definition1.class, responseContainer = "List", tags={ "Catalog", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Definition 1", response = Definition1.class),
        @ApiResponse(code = 404, message = "Not found", response = Definition1.class) })
    @RequestMapping(value = "/api/fakedef1",
        produces = { "application/json", "text/json", "application/xml", "text/xml" }, 
        method = RequestMethod.GET)
    default CompletableFuture<ResponseEntity<List<Definition1>>> definition1( @RequestHeader("Accept") String accept) throws IOException {
        // do some magic!
        return CompletableFuture.completedFuture(new ResponseEntity<List<Definition1>>(HttpStatus.OK));
    }


    @ApiOperation(value = "Definition 2", notes = "", response = Definition2.class, responseContainer = "List", tags={ "Catalog", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Definition 2", response = Definition2.class),
        @ApiResponse(code = 404, message = "Not found", response = Definition2.class) })
    @RequestMapping(value = "/api/fakedef2",
        produces = { "application/json", "text/json", "application/xml", "text/xml" }, 
        method = RequestMethod.GET)
    default CompletableFuture<ResponseEntity<List<Definition2>>> definition2( @RequestHeader("Accept") String accept) throws IOException {
        // do some magic!
        return CompletableFuture.completedFuture(new ResponseEntity<List<Definition2>>(HttpStatus.OK));
    }


    @ApiOperation(value = "Definition 3", notes = "", response = Definition3.class, responseContainer = "List", tags={ "Catalog", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Definition 3", response = Definition3.class),
        @ApiResponse(code = 404, message = "Not found", response = Definition3.class) })
    @RequestMapping(value = "/api/fakedef3",
        produces = { "application/json", "text/json", "application/xml", "text/xml" }, 
        method = RequestMethod.GET)
    default CompletableFuture<ResponseEntity<List<Definition3>>> definition3( @RequestHeader("Accept") String accept) throws IOException {
        // do some magic!
        return CompletableFuture.completedFuture(new ResponseEntity<List<Definition3>>(HttpStatus.OK));
    }

}
