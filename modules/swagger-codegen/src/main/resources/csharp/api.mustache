using System;
using System.Collections.Generic;
using {{invokerPackage}};
using {{modelPackage}};
{{#imports}}
{{/imports}}

namespace {{package}} {
  {{#operations}}
  public class {{classname}} {
    private readonly ApiInvoker _apiInvoker = ApiInvoker.GetInstance();

    public {{classname}}(String basePath = "{{basePath}}")
    {
      BasePath = basePath;
    }

    public ApiInvoker GetInvoker() {
      return _apiInvoker;
    }

    public string BasePath { get; set; }

    {{#operation}}

    /// <summary>
    /// {{summary}} {{notes}}
    /// </summary>
    {{#allParams}}/// <param name="{{paramName}}">{{description}}</param>
    {{#hasMore}} {{/hasMore}}{{/allParams}}
    /// <returns></returns>
    public {{#returnType}}{{{returnType}}} {{/returnType}}{{^returnType}}void {{/returnType}} {{nickname}} ({{#allParams}}{{{dataType}}} {{paramName}}{{#hasMore}}, {{/hasMore}}{{/allParams}}) {
      // create path and map variables
      var path = "{{path}}".Replace("{format}","json"){{#pathParams}}.Replace("{" + "{{baseName}}" + "}", _apiInvoker.EscapeString({{{paramName}}}.ToString())){{/pathParams}};

      // query params
      var queryParams = new Dictionary<String, String>();
      var headerParams = new Dictionary<String, String>();
      var formParams = new Dictionary<String, object>();

      {{#requiredParamCount}}
      // verify required params are set
      if ({{/requiredParamCount}}{{#requiredParams}} {{paramName}} == null {{#hasMore}}|| {{/hasMore}}{{/requiredParams}}{{#requiredParamCount}}) {
         throw new ApiException(400, "missing required params");
      }
      {{/requiredParamCount}}

      {{#queryParams}}if ({{paramName}} != null){
        string paramStr = ApiInvoker.ParameterToQueryString({{paramName}});
        queryParams.Add("{{baseName}}", paramStr);
      }
      {{/queryParams}}

      {{#headerParams}}headerParams.Add("{{baseName}}", {{paramName}});
      {{/headerParams}}

      {{#formParams}}if ({{paramName}} != null){
        if({{paramName}} is byte[]) {
          formParams.Add("{{baseName}}", {{paramName}});
        } else {
          string paramStr = ({{paramName}} is DateTime) ? ((DateTime)(object){{paramName}}).ToString("u") : Convert.ToString({{paramName}});
          formParams.Add("{{baseName}}", paramStr);
        }
      }
      {{/formParams}}

      try {
        if (typeof({{#returnType}}{{{returnType}}}{{/returnType}}{{^returnType}}void{{/returnType}}) == typeof(byte[])) {
          {{#returnType}}
          var response = _apiInvoker.InvokeBinaryApi(BasePath, path, "GET", queryParams, null, headerParams, formParams);
          return ((object)response) as {{{returnType}}};
          {{/returnType}}
          {{^returnType}}
          _apiInvoker.InvokeBinaryApi(BasePath, path, "GET", queryParams, null, headerParams, formParams);
          return;
          {{/returnType}}
        } else {
          {{#returnType}}
          var response = _apiInvoker.InvokeApi(BasePath, path, "{{httpMethod}}", queryParams, {{#bodyParam}}{{paramName}}{{/bodyParam}}{{^bodyParam}}null{{/bodyParam}}, headerParams, formParams);
          if (response != null){
             return ({{{returnType}}}) ApiInvoker.Deserialize(response, typeof({{{returnType}}}));
          }
          else {
            return null;
          }
          {{/returnType}}
          {{^returnType}}
          _apiInvoker.InvokeApi(BasePath, path, "{{httpMethod}}", queryParams, {{#bodyParam}}{{paramName}}{{/bodyParam}}{{^bodyParam}}null{{/bodyParam}}, headerParams, formParams);
          return;
          {{/returnType}}
        }
      } catch (ApiException ex) {
        if(ex.ErrorCode == 404) {
          return {{#returnType}}null{{/returnType}};
        }
        else {
          throw;
        }
      }
    }
    {{/operation}}
  }
  {{/operations}}
}
