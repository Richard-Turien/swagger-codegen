{{>partial_header}}
package {{packageName}}

{{#operations}}
import (
	"net/url"
	"net/http"
	"strings"
	"errors"
	"golang.org/x/net/context"
{{#imports}}	"{{import}}"
{{/imports}}
)

var _ context.Context

type {{classname}}Service service

{{#operation}}

// {{{classname}}}Service {{summary}}{{#notes}}
// {{notes}}{{/notes}}
//
//{{#authMethods}} * @param ctx context.Context Authentication Context {{/authMethods}}
//{{#allParams}}{{#required}} @param {{paramName}} {{description}}
//{{/required}}{{/allParams}}{{#hasOptionalParams}} @param optional (nil or map[string]interface{}) with one or more of:
//{{#allParams}}{{^required}}     @param "{{paramName}}" ({{dataType}}) {{description}}
//{{/required}}{{/allParams}}{{/hasOptionalParams}} @return {{#returnType}}{{{returnType}}}{{/returnType}}
func (a {{{classname}}}Service) {{{nickname}}}({{#authMethods}}ctx context.Context, {{/authMethods}}{{#allParams}}{{#required}}{{paramName}} {{{dataType}}}{{#hasMore}}, {{/hasMore}}{{/required}}{{/allParams}}{{#hasOptionalParams}}localVarOptionals map[string]interface{}{{/hasOptionalParams}}) ({{#returnType}}{{{returnType}}}, {{/returnType}} *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("{{httpMethod}}")
		localVarPostBody interface{}
		localVarFileName string
		localVarFileBytes []byte
{{#returnType}}
	 	successPayload  {{returnType}}
{{/returnType}}
	)

	// create path and map variables
	localVarPath := "{{{basePath}}}{{path}}"{{#pathParams}}
	localVarPath = strings.Replace(localVarPath, "{"+"{{baseName}}"+"}", fmt.Sprintf("%v", {{paramName}}), -1){{/pathParams}}

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	{{#hasQueryParams}}
	{{#queryParams}}
	{{#required}}
	localVarQueryParams.Add("{{baseName}}", parameterToString({{paramName}}, "{{#collectionFormat}}{{collectionFormat}}{{/collectionFormat}}"))
	{{/required}}
	{{^required}}
	if localVarTempParam, localVarOk := localVarOptionals["{{paramName}}"].({{dataType}}); localVarOk {
		localVarQueryParams.Add("{{baseName}}", parameterToString(localVarTempParam, "{{#collectionFormat}}{{collectionFormat}}{{/collectionFormat}}"))
	}
	{{/required}}
	{{/queryParams}}
	{{/hasQueryParams}}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{ {{#consumes}}"{{{mediaType}}}", {{/consumes}} }

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{
		{{#produces}}
		"{{{mediaType}}}",
		{{/produces}}
		}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
{{#hasHeaderParams}}
{{#headerParams}}
	{{#required}}
	localVarHeaderParams["{{baseName}}"] = parameterToString({{paramName}}, "{{#collectionFormat}}{{collectionFormat}}{{/collectionFormat}}")
	{{/required}}
	{{^required}}
	if localVarTempParam, localVarOk := localVarOptionals["{{paramName}}"].({{dataType}}); localVarOk {
		localVarHeaderParams["{{baseName}}"] = parameterToString(localVarTempParam, "{{#collectionFormat}}{{collectionFormat}}{{/collectionFormat}}")
	}
	{{/required}}
{{/headerParams}}
{{/hasHeaderParams}}
{{#hasFormParams}}
{{#formParams}}
{{#isFile}}
{{^required}}
	var file ({{dataType}})
	if localVarTempParam, localVarOk := localVarOptionals["{{paramName}}"].({{dataType}}); localVarOk {
		file = localVarTempParam
	}
{{/required}}
	if file != nil {
		fbs, _ := ioutil.ReadAll(file)
		localVarFileBytes = fbs
		localVarFileName = file.Name()
		file.Close()
	}
{{/isFile}}
{{^isFile}}
{{#required}}
	localVarFormParams.Add("{{baseName}}", parameterToString({{paramName}}, "{{#collectionFormat}}{{collectionFormat}}{{/collectionFormat}}"))
{{/required}}
{{^required}}
	if localVarTempParam, localVarOk := localVarOptionals["{{paramName}}"].({{dataType}}); localVarOk {
		localVarFormParams.Add("{{baseName}}", parameterToString(localVarTempParam, "{{#collectionFormat}}{{collectionFormat}}{{/collectionFormat}}"))
	}
{{/required}}
{{/isFile}}
{{/formParams}}
{{/hasFormParams}}
{{#hasBodyParam}}
{{#bodyParams}}	// body params
{{#required}}
	 localVarPostBody = &{{paramName}}
{{/required}}
{{^required}}
	if localVarTempParam, localVarOk := localVarOptionals["{{paramName}}"].({{dataType}}); localVarOk {
		localVarPostBody = &localVarTempParam
	}
{{/required}}
{{/bodyParams}}
{{/hasBodyParam}}

	 r, err := a.client.prepareRequest({{#authMethods}}ctx{{/authMethods}}{{^authMethods}}nil{{/authMethods}}, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	 if err != nil {
		  return {{#returnType}}successPayload, {{/returnType}}nil, err
	 }

	 localVarHttpResponse, err := a.client.callAPI(r)
	 if err != nil || localVarHttpResponse == nil {
		  return {{#returnType}}successPayload, {{/returnType}}localVarHttpResponse, err
	 }
	 defer localVarHttpResponse.Body.Close()
	 if localVarHttpResponse.StatusCode >= 300 {
		return {{#returnType}}successPayload, {{/returnType}}localVarHttpResponse, errors.New(localVarHttpResponse.Status)
	 }
{{#returnType}}
	
	if err = json.NewDecoder(localVarHttpResponse.Body).Decode(&successPayload); err != nil {
	 	return {{#returnType}}successPayload, {{/returnType}}localVarHttpResponse, err
	}

{{/returnType}}

	return {{#returnType}}successPayload, {{/returnType}}localVarHttpResponse, err
}
{{/operation}}{{/operations}}
