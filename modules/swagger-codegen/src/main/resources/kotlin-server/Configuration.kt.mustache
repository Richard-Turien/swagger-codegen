package {{packageName}}

// Use this file to hold package-level internal functions that return receiver object passed to the `install` method.
import com.codahale.metrics.*
import com.typesafe.config.*
import io.ktor.application.*
import io.ktor.client.*
import io.ktor.client.engine.apache.*
import io.ktor.config.*
import io.ktor.features.*
import io.ktor.gson.*
import io.ktor.http.*
import io.ktor.locations.*
import io.ktor.metrics.*
import io.ktor.routing.*
import io.ktor.server.engine.*
import io.ktor.server.netty.*
import io.ktor.auth.*
import java.time.*
import java.util.concurrent.*
import {{packageName}}.infrastructure.*
import {{packageName}}.apis.*

{{#featureCORS}}
/**
 * Application block for [CORS] configuration.
 *
 * This file may be excluded in .swagger-codegen-ignore,
 * and application specific configuration can be applied in this function.
 *
 * See http://ktor.io/features/cors.html
 */
internal fun ApplicationCORSConfiguration(): CORS.Configuration.() -> Unit {
    return {
        // method(HttpMethod.Options)
        // header(HttpHeaders.XForwardedProto)
        // anyHost()
        // host("my-host")
        // host("my-host:80")
        // host("my-host", subDomains = listOf("www"))
        // host("my-host", schemes = listOf("http", "https"))
        // allowCredentials = true
        // maxAge = Duration.ofDays(1)
    }
}
{{/featureCORS}}

{{#featureHSTS}}
/**
 * Application block for [HSTS] configuration.
 *
 * This file may be excluded in .swagger-codegen-ignore,
 * and application specific configuration can be applied in this function.
 *
 * See http://ktor.io/features/hsts.html
 */
internal fun ApplicationHstsConfiguration(): HSTS.Configuration.() -> Unit {
    return {
        maxAge = Duration.ofDays(365)
        includeSubDomains = true
        preload = false

        // You may also apply any custom directives supported by specific user-agent. For example:
        // customDirectives.put("redirectHttpToHttps", "false")
    }
}
{{/featureHSTS}}

{{#featureCompression}}
/**
 * Application block for [Compression] configuration.
 *
 * This file may be excluded in .swagger-codegen-ignore,
 * and application specific configuration can be applied in this function.
 *
 * See http://ktor.io/features/compression.html
 */
internal fun ApplicationCompressionConfiguration(): Compression.Configuration.() -> Unit {
    return {
        gzip {
            priority = 1.0
        }
        deflate {
            priority = 10.0
            minimumSize(1024) // condition
        }
    }
}
{{/featureCompression}}

{{#hasAuthMethods}}
// Defines authentication mechanisms used throughout the application.
internal fun Application.installAuthProviders() {
    install(Authentication) {
    {{#authMethods}}
        {{#isBasic}}
        basic("basic-{{{name}}}") {
            realm = "swagger-realm"
            validate = { credentials ->
                // TODO: "Apply your basic authentication functionality."
                // Accessible in-method via call.principal<UserIdPrincipal>()
                if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                    UserIdPrincipal(credentials.name)
                } else {
                    null
                }
            }
        }
        {{/isBasic}}
        {{#isApiKey}}
        // "Implement API key auth ({{{name}}}) for parameter name '{{{keyParamName}}}'."
        apiKey("apikey-{{{name}}}") {
            apiKeyName = "{{{keyParamName}}}"
            authLocation = {{#isKeyInQuery}}"query"{{/isKeyInQuery}}{{#isKeyInHeader}}"header"{{/isKeyInHeader}}
            validate {
                // TODO: "Verify key here , accessible as it.value"
                if (it.value == "keyboardcat") {
                    ApiPrincipal(it)
                } else {
                    null
                }
            }
        }
        {{/isApiKey}}
        {{#isOAuth}}
        oauth("oauth-{{name}}") {
            client = HttpClient(Apache).apply {
                environment.monitor.subscribe(ApplicationStopping) {
                    close()
                }
            }
            providerLookup = {
                OAuthServerSettings.OAuth2ServerSettings(
                    name = "{{name}}",
                    authorizeUrl = "{{authorizationUrl}}",
                    accessTokenUrl = "{{tokenUrl}}",
                    requestMethod = HttpMethod.Get,
                    {{! TODO: flow, doesn't seem to be supported yet by ktor }}
                    clientId = environment.config.property("auth.oauth.{{name}}.clientId").getString(),
                    clientSecret = environment.config.property("auth.oauth.{{name}}.clientSecret").getString(),
                    defaultScopes = listOf({{#scopes}}"{{scope}}"{{#hasMore}}, {{/hasMore}}{{/scopes}})
                )
            }
            urlProvider = { "/TODO/login/${it.name}" } // TODO: define a callback url here.
        }
        {{/isOAuth}}
    {{/authMethods}}
    }
}
{{/hasAuthMethods}}

// Provides an application-level fixed thread pool on which to execute coroutines (mainly)
internal val ApplicationExecutors = Executors.newFixedThreadPool(Runtime.getRuntime().availableProcessors() * 4)
