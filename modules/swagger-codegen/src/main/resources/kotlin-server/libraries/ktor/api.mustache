{{>licenseInfo}}
package {{apiPackage}}

import com.google.gson.Gson
import io.ktor.application.call
import io.ktor.auth.UserIdPrincipal
import io.ktor.auth.authentication
import io.ktor.auth.basicAuthentication
import io.ktor.auth.OAuthAccessTokenResponse
import io.ktor.auth.OAuthServerSettings
import io.ktor.http.ContentType
import io.ktor.http.HttpStatusCode
import io.ktor.locations.location
import io.ktor.locations.oauthAtLocation
import io.ktor.response.respond
import io.ktor.response.respondText
import io.ktor.routing.Route
import io.ktor.routing.delete as DELETE
import io.ktor.routing.get as GET
import io.ktor.routing.head as HEAD
import io.ktor.routing.options as OPTIONS
import io.ktor.routing.patch as PATCH
import io.ktor.routing.post as POST
import io.ktor.routing.put as PUT

import kotlinx.coroutines.experimental.asCoroutineDispatcher

import {{packageName}}.ApplicationAuthProviders
import {{packageName}}.Paths
import {{packageName}}.ApplicationExecutors
import {{packageName}}.HTTP.client
import {{packageName}}.infrastructure.ApiPrincipal
import {{packageName}}.infrastructure.apiKeyAuth

{{#imports}}import {{import}}
{{/imports}}

{{#operations}}
fun Route.{{classname}}() {
    val gson = Gson()
    val empty = mutableMapOf<String, Any?>()
{{#operation}}
    location<Paths.{{operationId}}> {
        {{! This format allows us to support authentication strategies }}
        {{#hasAuthMethods}}
        authentication {
            {{#authMethods}}
            {{#isBasic}}
            basicAuthentication("{{{name}}}") { credentials ->
                // TODO: "Apply your basic authentication functionality."
                // Accessible in-method via call.principal<UserIdPrincipal>()
                if (credentials.name == "Swagger" && "Codegen" == credentials.password) {
                     UserIdPrincipal(credentials.name)
                } else {
                    null
                }
            }
            {{/isBasic}}
            {{#isApiKey}}
            // "Implement API key auth ({{{name}}}) for parameter name '{{{keyParamName}}}'."
            apiKeyAuth("{{{keyParamName}}}", {{#isKeyInQuery}}"query"{{/isKeyInQuery}}{{#isKeyInHeader}}"header"{{/isKeyInHeader}}) {
                // TODO: "Verify key here , accessible as it.value"
                if (it.value == "keyboardcat") {
                     ApiPrincipal(it)
                } else {
                    null
                }
            }
            {{/isApiKey}}
            {{#isOAuth}}
            oauthAtLocation<Paths.{{operationId}}>(client, ApplicationExecutors.asCoroutineDispatcher(),
                    providerLookup = { ApplicationAuthProviders["{{{name}}}"] },
                    urlProvider = { currentLocation, provider ->
                        TODO()
                    })
            {{/isOAuth}}
            {{/authMethods}}
        }
        {{/hasAuthMethods}}
        {{httpMethod}} {
            {{#hasAuthMethods}}
            {{#authMethods}}
            {{#isBasic}}
            val principal = call.authentication.principal<UserIdPrincipal>()
            {{/isBasic}}
            {{#isApiKey}}
            val principal = call.authentication.principal<ApiPrincipal>()
            {{/isApiKey}}
            {{#isOAuth}}
            val principal = call.authentication.principal<OAuthAccessTokenResponse>()
            {{/isOAuth}}
            {{/authMethods}}
            if (principal == null) {
                call.respond(HttpStatusCode.Unauthorized)
            } else {
            {{/hasAuthMethods}}
            {{#examples}}
            {{#-first}}
                val exampleContentType = "{{{contentType}}}"
                val exampleContentString = """{{&example}}"""

                when(exampleContentType) {
                    "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                    "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                    else -> call.respondText(exampleContentString)
                }
            {{/-first}}
            {{/examples}}
            {{^examples}}
            {{#hasAuthMethods}}    {{/hasAuthMethods}}call.respond(HttpStatusCode.NotImplemented)
            {{/examples}}
            {{#hasAuthMethods}}
            }
            {{/hasAuthMethods}}
        }
    }
{{/operation}}
}
{{/operations}}