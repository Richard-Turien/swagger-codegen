    public enum {{#isContainer}}{{enumName}}{{/isContainer}}{{^isContainer}}{{datatypeWithEnum}}{{/isContainer}} {

        {{#allowableValues}}
        {{#enumVars}}{{name}}({{#isContainer}}{{baseType}}{{/isContainer}}{{^isContainer}}{{#datatype}}{{datatype}}{{/datatype}}{{^datatype}}{{dataType}}{{/datatype}}{{/isContainer}}.valueOf({{{value}}})){{^-last}}, {{/-last}}{{#-last}};{{/-last}}{{/enumVars}}
        {{/allowableValues}}


        private {{#isContainer}}{{baseType}}{{/isContainer}}{{^isContainer}}{{#datatype}}{{datatype}}{{/datatype}}{{^datatype}}{{dataType}}{{/datatype}}{{/isContainer}} value;

        {{#isContainer}}{{enumName}}{{/isContainer}}{{^isContainer}}{{datatypeWithEnum}}{{/isContainer}} ({{#isContainer}}{{baseType}}{{/isContainer}}{{^isContainer}}{{#datatype}}{{datatype}}{{/datatype}}{{^datatype}}{{dataType}}{{/datatype}}{{/isContainer}} v) {
            value = v;
        }

        public String value() {
            return toString();
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        public static {{#isContainer}}{{enumName}}{{/isContainer}}{{^isContainer}}{{datatypeWithEnum}}{{/isContainer}} fromValue(String v) {
            for ({{#isContainer}}{{enumName}}{{/isContainer}}{{^isContainer}}{{datatypeWithEnum}}{{/isContainer}} b : {{#isContainer}}{{enumName}}{{/isContainer}}{{^isContainer}}{{datatypeWithEnum}}{{/isContainer}}.values()) {
                if (String.valueOf(b.value).equals(v)) {
                    return b;
                }
            }
            return null;
        }

        public static {{#isContainer}}{{enumName}}{{/isContainer}}{{^isContainer}}{{datatypeWithEnum}}{{/isContainer}} fromString(String v) {
            return fromValue(v);
        }
    }
