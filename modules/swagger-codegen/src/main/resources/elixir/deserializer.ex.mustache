{{>licenseInfo}}
defmodule {{moduleName}}.Deserializer do
  @moduledoc """
  Helper functions for deserializing responses into models
  """

  @type target_type() :: :list | :struct | :map | :date

  @doc """
  Update the provided model with a deserialization of a nested value
  """
  @spec deserialize(struct(), atom(), target_type(), any(), Poison.Decoder.options()) :: struct() | no_return()
  def deserialize(model, field, :list, mod, options) do
    model
    |> Map.update!(field, &decode!(&1, options, [struct(mod)]))
  end
  def deserialize(model, field, :struct, mod, options) do
    model
    |> Map.update!(field, &decode!(&1, options, struct(mod)))
  end
  def deserialize(model, field, :map, mod, options) do
    model
    |> Map.update!(field, &(Map.new(&1, fn {key, val} -> {key, decode!(val, options, struct(mod))} end)))
  end
  def deserialize(model, field, :date, _, _options) do
    value = Map.get(model, field)
    case is_binary(value) do
      true -> case DateTime.from_iso8601(value) do
                {:ok, datetime, _offset} ->
                  Map.put(model, field, datetime)
                _ ->
                  model
              end
      false -> model
    end
  end
  
  @spec decode!(any(), Poison.Decoder.options(), any()) :: any() | no_return()
  defp decode!(val, options, target), do: Poison.decode!(val, Map.put(options, :as, target))
end
