# coding: utf-8

from __future__ import absolute_import

import sys
import io
import json
import ssl
import certifi
import logging
import requests
import urllib3

from .configuration import configuration


try:
    # for python3
    from urllib.parse import urlencode
except ImportError:
    # for python2
    from urllib import urlencode


logger = logging.getLogger(__name__)


class RESTClient(object):

    def __init__(self):
        # urllib3.PoolManager will pass all kw parameters to connectionpool
        # https://github.com/shazow/urllib3/blob/f9409436f83aeb79fbaf090181cd81b784f1b8ce/urllib3/poolmanager.py#L75
        # https://github.com/shazow/urllib3/blob/f9409436f83aeb79fbaf090181cd81b784f1b8ce/urllib3/connectionpool.py#L680
        # ca_certs vs cert_file vs key_file
        # http://stackoverflow.com/a/23957365/2985775

        self.pool_manager = requests.Session()

    def request(self, method, url, query_params=None, headers=None,
                body=None, post_params=None):
        """
        :param method: http request method
        :param url: http request url
        :param query_params: query parameters in the url
        :param headers: http request headers
        :param body: request json body, for `application/json`
        :param post_params: request post parameters,
                            `application/x-www-form-urlencode`
                            and `multipart/form-data`
        """
        method = method.upper()
        assert method in ['GET', 'HEAD', 'DELETE', 'POST', 'PUT', 'PATCH', 'OPTIONS']
        
        verify = configuration.cert_file or configuration.verify_ssl
        cert = configuration.ssl_ca_cert

        if post_params and body:
            raise ValueError(
                "body parameter cannot be used with post_params parameter."
            )

        post_params = post_params or {}
        headers = headers or {}

        if 'Content-Type' not in headers:
            headers['Content-Type'] = 'application/json'

        try:
            # For `POST`, `PUT`, `PATCH`, `OPTIONS`
            if method in ['POST', 'PUT', 'PATCH', 'OPTIONS']:
                if query_params:
                    url += '?' + urlencode(query_params)
                if headers['Content-Type'] == 'application/json':
                    r = self.pool_manager.request(method, url,
                                                  body=json.dumps(body),
                                                  headers=headers,
                                                  cert=cert,
                                                  verify=verify)
                elif headers['Content-Type'] == 'application/x-www-form-urlencoded':
                    r = self.pool_manager.request(method, url,
                                                  data=post_params,
                                                  encode_multipart=False,
                                                  headers=headers,
                                                  cert=cert,
                                                  verify=verify)
                elif headers['Content-Type'] == 'multipart/form-data':
                    # must del headers['Content-Type'], or the correct Content-Type
                    # which generated by urllib3 will be overwritten.
                    del headers['Content-Type']
                    r = self.pool_manager.request(method, url,
                                                  data=post_params,
                                                  encode_multipart=True,
                                                  headers=headers,
                                                  cert=cert,
                                                  verify=verify)
                else:
                    assert False, 'Unsupported Content-Type %s' % headers['Content-Type']
            # For `GET`, `HEAD`, `DELETE`
            else:
                r = self.pool_manager.request(method, url,
                                              data=query_params,
                                              headers=headers,
                                              cert=cert,
                                              verify=verify)
        except requests.exceptions.SSLError as e:
            msg = "{0}\n{1}".format(type(e).__name__, str(e))
            raise ApiException(status=0, reason=msg)

        # log response body
        logger.debug("response body: %s" % r.content)

        if r.status_code not in range(200, 206):
            raise ApiException(http_resp=r)

        return r


class ApiException(Exception):

    def __init__(self, status=None, reason=None, http_resp=None):
        if http_resp is not None:
            self.status = http_resp.status_code
            self.reason = http_resp.reason
            self.body = http_resp.content
            self.headers = http_resp.headers
        else:
            self.status = status
            self.reason = reason
            self.body = None
            self.headers = None

    def __str__(self):
        """
        Custom error messages for exception
        """
        error_message = "({0})\n"\
                        "Reason: {1}\n".format(self.status, self.reason)
        if self.headers:
            error_message += "HTTP response headers: {0}\n".format(self.headers)

        if self.body:
            error_message += "HTTP response body: {0}\n".format(self.body)

        return error_message
