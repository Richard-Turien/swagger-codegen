# coding: utf-8
""""
NOTE: This file is auto generated by the swagger-codegen.
Do not edit manually.
"""

{{#models}}
{{#model}}
from pprint import pformat
from six import iteritems


class {{classname}}(object):
    """
    {{#vars}}:ivar {{name}}: {{description}}
    :type {{name}}: {{{datatype}}}
    {{/vars}}
    """
    def __init__(self{{#vars}}, {{name}}=None{{/vars}}):
        self.swagger_type_by_variable_name = {
            {{#vars}}'{{name}}': '{{{datatype}}}',
            {{/vars}}
        }

{{#vars}}
        self.{{#isEnum}}_{{/isEnum}}{{name}} = {{name}}
{{/vars}}
{{#vars}}
    {{#isEnum}}@property
    def {{name}}(self):
        return self._{{name}}

    @{{name}}.setter
    def {{name}}(self, {{name}}):
        allowed_values = [{{#allowableValues}}{{#values}}"{{{this}}}"{{^-last}}, {{/-last}}{{/values}}{{/allowableValues}}]
        if {{name}} not in allowed_values:
            raise ValueError(
                "Invalid value for `{{name}}`, must be one of {0}"
                .format(allowed_values)
            )
        self._{{name}} = {{name}}{{/isEnum}}
{{/vars}}

    def to_dict(self):
        def to_dict_internal(attr):
            value = getattr(self, attr)
            if isinstance(value, list):
                return [x.to_dict() if hasattr(x, "to_dict") else x for x in value]
            elif hasattr(value, "to_dict"):
                return value.to_dict()
            else:
                return value

        return {attr: to_dict_internal(attr) for attr in self.swagger_type_by_variable_name.keys()}

    def __repr__(self):
        return pformat(self.to_dict())
{{/model}}
{{/models}}
