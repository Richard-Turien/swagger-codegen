class {{classname}} {
  {{#vars}}{{#description}}/* {{{description}}} */{{/description}}
  {{{datatype}}} {{name}} = {{{defaultValue}}};
  {{#allowableValues}}{{#min}} // range from {{min}} to {{max}}{{/min}}//{{^min}}enum {{name}}Enum { {{#values}} {{.}}, {{/values}} };{{/min}}{{/allowableValues}}
  {{/vars}}
  {{classname}}();

  @override
  String toString() {
    return '{{classname}}[{{#vars}}{{name}}=${{name}}, {{/vars}}]';
  }

  {{classname}}.fromJson(Map<String, dynamic> json) {
    if (json == null) return;
  {{#vars}}
    {{#isDateTime}}{{name}} = json['{{name}}'] == null ? null : DateTime.parse(json['{{name}}']);{{/isDateTime}}{{^isDateTime}}{{name}} = {{#complexType}}{{#isListContainer}}{{complexType}}.listFromJson(json['{{name}}']){{/isListContainer}}{{^isListContainer}}new {{complexType}}.fromJson(json['{{name}}']){{/isListContainer}}{{/complexType}}{{^complexType}}json['{{name}}']{{/complexType}};{{/isDateTime}}
  {{/vars}}
  }

  static List<{{classname}}> listFromJson(List<Map<String, dynamic>> json) {
    var list = new List<{{classname}}>();
    if (json != null && json.length > 0) {
      json.forEach((Map<String, dynamic> value) => list.add(new {{classname}}.fromJson(value)));
    }
    return list;
  }

  static List<Map<String, dynamic>> toMapList(List<{{classname}}> list) {
    var listResult = new List<Map<String, dynamic>>();
    list.forEach(({{classname}} it) => listResult.add(it.toMap()));
    return listResult;
  }

  Map<String, dynamic> toMap() {
    return {
    {{#vars}}
      {{#isDateTime}}'{{name}}': {{name}} == null ? '' : {{name}}.toUtc().toIso8601String(){{^-last}},{{/-last}}{{/isDateTime}}{{^isDateTime}}'{{name}}': {{#complexType}}{{name}} == null ? null : {{#isListContainer}}{{complexType}}.toMapList({{name}}){{/isListContainer}}{{^isListContainer}}{{name}}.toMap(){{/isListContainer}}{{/complexType}}{{^complexType}}{{name}}{{/complexType}}{{^-last}},{{/-last}}{{/isDateTime}}
    {{/vars}}
     };
  }
}
