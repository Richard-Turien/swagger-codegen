{{>partial_header}}
use hyper;
use hyper::header::{HeaderName, HeaderValue};
use hyper::rt::{Future, Stream};
use serde_json;

use super::{Error, configuration, client};

pub struct {{{classname}}}Client<'a, C: hyper::client::connect::Connect> {
    configuration: &'a configuration::Configuration<C>,
}

impl<'a, C: hyper::client::connect::Connect> {{{classname}}}Client<'a, C> {
    pub fn new(configuration: &'a configuration::Configuration<C>) -> {{{classname}}}Client<'a, C> {
        {{{classname}}}Client {
            configuration: configuration,
        }
    }
}

pub trait {{classname}} {
{{#operations}}
{{#operation}}
    fn {{{operationId}}}(&self, {{#allParams}}{{paramName}}: {{#isString}}&str{{/isString}}{{#isUuid}}&str{{/isUuid}}{{^isString}}{{^isUuid}}{{^isPrimitiveType}}{{^isContainer}}::models::{{/isContainer}}{{/isPrimitiveType}}{{{dataType}}}{{/isUuid}}{{/isString}}{{#hasMore}}, {{/hasMore}}{{/allParams}}) -> Box<dyn Future<Item = {{^returnType}}(){{/returnType}}{{#returnType}}{{{returnType}}}{{/returnType}}, Error = Error>>;
{{/operation}}
{{/operations}}
}

impl<'a, C: hyper::client::connect::Connect>{{classname}} for {{classname}}Client<'a, C> where C: 'static {
{{#operations}}
{{#operation}}
    fn {{{operationId}}}(&self, {{#allParams}}{{paramName}}: {{#isString}}&str{{/isString}}{{#isUuid}}&str{{/isUuid}}{{^isString}}{{^isUuid}}{{^isPrimitiveType}}{{^isContainer}}::models::{{/isContainer}}{{/isPrimitiveType}}{{{dataType}}}{{/isUuid}}{{/isString}}{{#hasMore}}, {{/hasMore}}{{/allParams}}) -> Box<dyn Future<Item = {{^returnType}}(){{/returnType}}{{#returnType}}{{{.}}}{{/returnType}}, Error = Error>> {
        let method = hyper::Method::{{httpMethod}};
        {{#hasBodyParam}}
        {{#bodyParams}}
        let serialized = serde_json::to_string(&{{paramName}}).unwrap();
        let len = serialized.len();
        {{/bodyParams}}
        {{/hasBodyParam}}

{{#hasAuthMethods}}
        let mut auth_headers = std::collections::HashMap::<hyper::header::HeaderName, String>::new();
        let mut auth_query = std::collections::HashMap::<String, String>::new();
{{#authMethods}}
{{#isApiKey}}
        if let Some(ref apikey) = self.configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
        {{#isKeyInHeader}}
            auth_headers.insert("{{keyParamName}}".to_owned(), val);
        {{/isKeyInHeader}}
        {{#isKeyInQuery}}
            auth_query.insert("{{keyParamName}}".to_owned(), val);
        {{/isKeyInQuery}}
        };
{{/isApiKey}}
{{#isBasic}}
        if let Some(ref auth_conf) = configuration.basic_auth {
            let auth = hyper::header::Authorization(
                hyper::header::Basic {
                    username: auth_conf.0.to_owned(),
                    password: auth_conf.1.to_owned(),
                }
            );
            auth_headers.insert(hyper::header::AUTHORIZATION, auth.to_string());
        };
{{/isBasic}}
{{#isOAuth}}
        if let Some(ref token) = configuration.oauth_access_token {
            let auth = hyper::header::Authorization(
                hyper::header::Bearer {
                    token: token.to_owned(),
                }
            );
            auth_headers.insert(hyper::header::AUTHORIZATION, auth.to_string());
        };
{{/isOAuth}}
{{/authMethods}}
{{/hasAuthMethods}}

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());
{{#queryParams}}
            query.append_pair("{{baseName}}", &{{paramName}}{{#isListContainer}}.join(","){{/isListContainer}}.to_string());
{{/queryParams}}
{{#hasAuthMethods}}
            for (ref key, ref val) in &auth_query {
                query.append_pair(key, val);
            }
{{/hasAuthMethods}} 
            query.finish()
        };
        let uri_str = format!("{}{{{path}}}?{}", self.configuration.base_path, query_string{{#pathParams}}, {{baseName}}={{paramName}}{{#isListContainer}}.join(",").as_ref(){{/isListContainer}}{{/pathParams}});

        {{#hasBodyParam}}
        {{#bodyParams}}
        let mut req = hyper::Request::new(hyper::Body::from(serialized));
        {{/bodyParams}}
        {{/hasBodyParam}}
        {{^hasBodyParam}}
        let mut req = hyper::Request::new(hyper::Body::empty());
        {{/hasBodyParam}}
        *req.method_mut() = method.clone();

        let uri: hyper::Uri = uri_str.parse().unwrap();
        *req.uri_mut() = uri.clone();

        if let Some(ref user_agent) = self.configuration.user_agent {
            req.headers_mut().insert(hyper::header::CONTENT_TYPE, HeaderValue::from_str(&user_agent).unwrap());
        }

        {{#hasHeaderParams}}
        {
            let mut headers = req.headers_mut();
            {{#headerParams}}
            headers.set_raw("{{baseName}}", {{paramName}}{{#isListContainer}}.join(",").as_ref(){{/isListContainer}});
            {{/headerParams}}
        }
        {{/hasHeaderParams}}

        {{#hasAuthMethods}}
        for (ref key, ref val) in auth_headers {
            req.headers_mut().insert(key, HeaderValue::from_str(&val).unwrap());
        }
        {{/hasAuthMethods}}

        {{#hasBodyParam}}
        {{#bodyParams}}
        req.headers_mut().insert(hyper::header::CONTENT_TYPE, HeaderValue::from_static("application/json"));
        req.headers_mut().insert(hyper::header::CONTENT_LENGTH, HeaderValue::from_str(&len.to_string()).unwrap());
        {{/bodyParams}}
        {{/hasBodyParam}}

        // send request
        Box::new(
        self.configuration.client.request(req)
            .map_err(|e| Error::from(e))
            .and_then(|resp| {
                let status = resp.status();
                resp.into_body().concat2()
                    .and_then(move |body| Ok((status, body)))
                    .map_err(|e| Error::from(e))
            })
            .and_then(|(status, body)| {
                if status.is_success() {
                    Ok(body)
                } else {
                    Err(Error::from((status, &*body)))
                }
            })
            {{^returnType}}
            .and_then(|_| futures::future::ok(()))
            {{/returnType}}
            {{#returnType}}
            .and_then(|body| {
                let parsed: Result<{{{returnType}}}, _> = serde_json::from_slice(&body);
                parsed.map_err(|e| Error::from(e))
            })
            {{/returnType}}
        )
    }

{{/operation}}
{{/operations}}
}
