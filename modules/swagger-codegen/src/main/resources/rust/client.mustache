use hyper;
use super::configuration::Configuration;

pub struct APIClient<'a, C: hyper::client::connect::Connect> {
  #[allow(dead_code)]
  configuration: &'a Configuration<C>,
{{#apiInfo}}
{{#apis}}
{{#operations}}
{{#operation}}
  {{#-last}}
  {{classFilename}}: Box<dyn (::apis::{{classname}}) + 'a>,
  {{/-last}}
{{/operation}}
{{/operations}}
{{/apis}}
{{/apiInfo}}
}

impl<'a, C: hyper::client::connect::Connect> APIClient<'a, C> where C: 'static {
  pub fn new(configuration: &'a Configuration<C>) -> APIClient<C> where C: 'static {
    APIClient {
      configuration: configuration,
{{#apiInfo}}
{{#apis}}
{{#operations}}
{{#operation}}
      {{#-last}}
      {{classFilename}}: Box::new(::apis::{{classname}}Client::new(configuration)),
      {{/-last}}
{{/operation}}
{{/operations}}
{{/apis}}
{{/apiInfo}}
    }
  }

{{#apiInfo}}
{{#apis}}
{{#operations}}
{{#operation}}
{{#-last}}
  pub fn {{classFilename}}(&self) -> &dyn (::apis::{{classname}}) {
    self.{{classFilename}}.as_ref()
  }

{{/-last}}
{{/operation}}
{{/operations}}
{{/apis}}
{{/apiInfo}}

}
