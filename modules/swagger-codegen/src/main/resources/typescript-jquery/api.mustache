import * as $ from 'jquery';
import * as models from '../model/models';
import * as common from './common';

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================
{{#operations}}
{{#description}}
/**
* {{&description}}
*/
{{/description}}
export enum {{classname}}ApiKeys {
{{#authMethods}}
{{#isApiKey}}
    {{name}},
{{/isApiKey}}
{{/authMethods}}
}

export class {{classname}} {
    protected basePath = common.defaultBasePath;
    protected defaultHeaders : any = {};

    protected authentications = {
        'default': <common.Authentication>new common.VoidAuth(),
{{#authMethods}}
{{#isBasic}}
        '{{name}}': new common.HttpBasicAuth(),
{{/isBasic}}
{{#isApiKey}}
        '{{name}}': new common.ApiKeyAuth({{#isKeyInHeader}}'header'{{/isKeyInHeader}}{{^isKeyInHeader}}'query'{{/isKeyInHeader}}, '{{keyParamName}}'),
{{/isApiKey}}
{{#isOAuth}}
        '{{name}}': new common.OAuth(),
{{/isOAuth}}
{{/authMethods}}
    };

    constructor(basePath?: string);
{{#authMethods}}
{{#isBasic}}
    constructor(username: string, password: string, basePath?: string);
{{/isBasic}}
{{/authMethods}}
    constructor(basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
{{#authMethods}}
{{#isBasic}}
            this.username = basePathOrUsername;
            this.password = password;
{{/isBasic}}
{{/authMethods}}
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }

    public setApiKey(key: {{classname}}ApiKeys, value: string): void {
        this.authentications[{{classname}}ApiKeys[key]].apiKey = value;
    }
{{#authMethods}}
{{#isBasic}}

    set username(username: string): void {
        this.authentications.{{name}}.username = username;
    }

    set password(password: string): void {
        this.authentications.{{name}}.password = password;
    }
{{/isBasic}}
{{#isOAuth}}

    set accessToken(token: string): void {
        this.authentications.{{name}}.accessToken = token;
    }
{{/isOAuth}}
{{/authMethods}}
    private extendObj<T1, T2 extends T1>(objA: T2, objB: T2): T1|T2 {
        for (let key in objB) {
            if (objB.hasOwnProperty(key)) {
                objA[key] = objB[key];
            }
        }
        return objA;
    }

{{#operation}}
    /**
     * {{summary}}
     * {{notes}}
     {{#allParams}}* @param {{paramName}} {{description}}
     {{/allParams}}*/
    public {{nickname}} ({{#allParams}}{{paramName}}{{^required}}?{{/required}}: {{{dataType}}}{{#hasMore}}, {{/hasMore}}{{/allParams}}) : JQueryPromise<{ response: JQueryXHR; {{#returnType}}body: {{{returnType}}}; {{/returnType}}{{^returnType}}body?: any; {{/returnType}} }> {
        let localVarPath = this.basePath + '{{{path}}}'{{#pathParams}}
            .replace('{' + '{{baseName}}' + '}', String({{paramName}})){{/pathParams}};
        let queryParameters: any = {};
        let headerParams: any = this.extendObj({}, this.defaultHeaders);

{{#allParams}}{{#required}}
        // verify required parameter '{{paramName}}' is not null or undefined
        if ({{paramName}} === null || {{paramName}} === undefined) {
            throw new Error('Required parameter {{paramName}} was null or undefined when calling {{nickname}}.');
        }
{{/required}}{{/allParams}}
{{#queryParams}}
        if ({{paramName}} !== undefined) {
            queryParameters.{{baseName}} = {{paramName}};
        }

{{/queryParams}}

        localVarPath = localVarPath + "?" + $.param(queryParameters);

{{#headerParams}}
        headerParams.{{baseName}} = {{paramName}};

{{/headerParams}}

{{^bodyParam}}
        let reqHasFile = false;
        let reqDict: {
{{#formParams}}
            {{baseName}}?: {{{dataType}}}{{#hasMore}},{{/hasMore}}
{{/formParams}}
        } = {};
        let reqFormData = new FormData();
{{#formParams}}
{{#isFile}}
        reqHasFile = true;
{{/isFile}}
        if ({{paramName}} !== undefined) {
            reqFormData.append('{{baseName}}', {{paramName}});
            reqDict.{{baseName}} = {{paramName}};
        }

{{/formParams}}
{{/bodyParam}}
{{#bodyParam}}
        let reqDict = {{paramName}};
        let reqFormData = new FormData();
        reqFormData.append('{{paramName}}', {{paramName}});
{{#isFile}}
        let reqHasFile = true;
{{/isFile}}
{{^isFile}}
        let reqHasFile = false;
{{/isFile}}
{{/bodyParam}}

        let requestOptions: JQueryAjaxSettings = {
            url: localVarPath,
            type: '{{httpMethod}}',
            headers: headerParams,
            processData: false
        };

        if (Object.keys(reqDict).length) {
            requestOptions.data = reqHasFile ? reqFormData : JSON.stringify(reqDict);
            requestOptions.contentType = reqHasFile ? false : 'application/json; charset=utf-8';
        }

{{#authMethods}}
        this.authentications.{{name}}.applyToRequest(requestOptions);

{{/authMethods}}
        this.authentications.default.applyToRequest(requestOptions);

        let dfd = $.Deferred();
        $.ajax(requestOptions).then(
            (data: {{#returnType}}{{{returnType}}}{{/returnType}}{{^returnType}}any{{/returnType}}, textStatus: string, jqXHR: JQueryXHR) =>
                dfd.resolve({ response: jqXHR, body: data }),
            (xhr: JQueryXHR, textStatus: string, errorThrown: string) =>
                dfd.reject({ response: xhr, body: errorThrown })
        );
        return dfd.promise();
    }
{{/operation}}
}
{{/operations}}
