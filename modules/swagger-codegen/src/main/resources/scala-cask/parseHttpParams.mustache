        for {
{{#pathParams}}
            {{vendorExtensions.x-debug}}
    {{#isString}}
            {{paramName}} <- Parsed({{paramName}})
    {{/isString}}
    {{^isString}}
            {{paramName}} <- Parsed({{paramName}})
    {{/isString}}
{{/pathParams}}
{{#headerParams}}
            {{vendorExtensions.x-debug}}
            {{paramName}} <- request.headerSingleValue("{{paramName}}", {{required}})
{{/headerParams}}
{{#formParams}}
    {{vendorExtensions.x-debug}}
    {{paramName}} <- {{#isFile}}request.formValueAsFile("{{paramName}}", {{required}}){{/isFile}}{{^isFile}}request.formSingleValue("{{paramName}}", {{required}}){{/isFile}}
{{/formParams}}
{{#bodyParams}}
            {{vendorExtensions.x-debug}}
            /** TODO - this is a bit of a hack - we should do content type negotiation */
    {{#vendorExtensions.x-consumes-json}}
        {{#isListContainer}}
            {{paramName}} <- Parsed.eval({{vendorExtensions.x-container-type}}.manyFromJsonString(request.bodyAsString))
        {{/isListContainer}}
        {{^isListContainer}}
            {{#isMapContainer}}
            {{paramName}} <- Parsed.eval({{vendorExtensions.x-container-type}}.mapFromJsonString(request.bodyAsString))
            {{/isMapContainer}}
            {{^isMapContainer}}
            {{paramName}} <- Parsed.eval({{vendorExtensions.x-container-type}}.fromJsonString(request.bodyAsString))
            {{/isMapContainer}}
        {{/isListContainer}}
    {{/vendorExtensions.x-consumes-json}}
    {{^vendorExtensions.x-consumes-json}}
        {{#vendorExtensions.x-consumes-xml}}
            {{paramName}} <- Parsed.fail("TODO - xml deserialisation")
        {{/vendorExtensions.x-consumes-xml}}
        {{^vendorExtensions.x-consumes-xml}}
            {{paramName}} <- Parsed.fail("TODO - content deserialisation")
        {{/vendorExtensions.x-consumes-xml}}
    {{/vendorExtensions.x-consumes-json}}
{{/bodyParams}}
            result <- Parsed.eval(service.{{operationId}}({{vendorExtensions.x-param-list}}))
        } yield result