package {{package}} {


import flash.events.EventDispatcher;
import flash.utils.Dictionary;

import io.swagger.event.ApiClientEvent;
import io.swagger.event.Response;
import io.swagger.HttpClient;

import org.osflash.vanilla.extract;

{{#imports}}import {{import}};
{{/imports}}

{{#operations}}
public class {{classname}} extends EventDispatcher {

    public var client:HttpClient;

    /**
    * Constructor for the {{classname}} api client
    */
    public function {{classname}}( url:String )
    {
        client = new HttpClient( url, this );
    }

{{#operation}}
        public static const event_{{nickname}}: String = "{{nickname}}";
{{/operation}}

{{#operation}}

    /*
     * Returns {{#returnType}}{{{returnType}}} {{/returnType}}{{^returnType}}void {{/returnType}}
     */
    public function {{nickname}} ({{#allParams}}{{paramName}}:{{{dataType}}}{{#hasMore}}, {{/hasMore}}{{/allParams}}):void
    {
        // create path and map variables
       var path: String = "{{path}}"{{#pathParams}}.replace("{" + "{{paramName}}" + "}", {{{paramName}}}){{/pathParams}};

        var queryParams: Dictionary = new Dictionary();
		var headerParams: Dictionary = new Dictionary();

         {{#allParams}}{{#required}}
            // verify the required parameter '{{paramName}}' is set
            if ({{paramName}} == null) {
              throw new Error( "missing required params " + {{paramName}} );
            }
            {{/required}}{{/allParams}}

         {{#queryParams}}if("null" != String({{paramName}}))
                     queryParams["{{paramName}}"] = toPathValue({{paramName}});
                 {{/queryParams}}

                 {{#headerParams}}headerParams["{{paramName}}"] = toPathValue({{paramName}});
                 {{/headerParams}}
        headerParams["X-UA-VERSION"] = "{{packageVersion}}";
        headerParams["User-Agent"] = "Doorman-Client-Flash";

         client.call( path, on_{{nickname}}_response, queryParams, headerParams);

    }

    private function on_{{nickname}}_response( resp:Response ):void
    {
        if (resp.isSuccess)
        {
            // Convert the response into an object
            var response:{{{returnType}}} = extract( JSON.parse( resp.payload + "" ), {{{returnType}}} );
            resp.payload = response;
        }

        var event:ApiClientEvent = new ApiClientEvent( {{classname}}.event_{{nickname}} );
        event.response = resp;
        dispatchEvent( event );
    }

    {{/operation}}

    private function toPathValue(value: Object): String
    {
        if(value is Array){
            return (value as Array).join(",");
        }
        return  value == null ? "" : value.toString();
    }
}



        {{/operations}}


}
