{{>partial_header}}
{{#operations}}
#' @title {{baseName}} operations
#' @description {{importPath}}
#'
#' @field path Stores url path of the request.
#' @field apiClient Handles the client-server communication.
#' @field userAgent Set the user agent of the request.
#'
#' @importFrom R6 R6Class
#'
#' @section Methods:
#' \describe{
#' {{#operation}}
#' {{operationId}} 
#' {{/operation}}
#' }
#' @section Details:
#' 
#' @export
{{classname}} <- R6::R6Class(
  '{{classname}}',
  public = list(
    userAgent = "{{#httpUserAgent}}{{{.}}}{{/httpUserAgent}}{{^httpUserAgent}}Swagger-Codegen/{{{packageVersion}}}/r{{/httpUserAgent}}",
    path = "{{baseName}}",
    apiClient = NULL,
    initialize = function(apiClient){
      if (!missing(apiClient)) {
        self$apiClient <- apiClient
      }
    },
    {{#operation}}
    {{operationId}} = function({{#allParams}}{{#required}}{{paramName}}, {{/required}}{{/allParams}} ...){
      args <- list(...)
      body <- NULL
      queryParams <- list()
      headerParams <- character()
      {{#hasHeaderParams}}
      {{#headerParams}}
      if (!is.null(args$`{{paramName}}`)) {
        headerParams['{{baseName}}'] <- args$`{{paramName}}`
      }
      {{/headerParams}}
      {{/hasHeaderParams}}
      {{#hasQueryParams}}
      {{#queryParams}}
      {{#required}}
      queryParams['{{baseName}}'] <- {{paramName}}
      {{/required}}
      {{^required}}
      if (!is.null(args$`{{paramName}}`)) {
        queryParams['{{baseName}}'] <- args$`{{paramName}}`
      }
      {{/required}}
      {{/queryParams}}
      {{/hasQueryParams}}
      {{#hasFormParams}}
      body <- list(
        {{#formParams}}
          {{^isFile}}
          "{{baseName}}" = {{paramName}}{{#hasMore}},{{/hasMore}}
          {{/isFile}}
          {{#isFile}}
          "{{baseName}}" = httr::upload_file({{paramName}}){{#hasMore}},{{/hasMore}}
          {{/isFile}}
        {{/formParams}}
      ){{/hasFormParams}}     
      {{#hasBodyParam}}
      {{#bodyParams}}
      {{#required}}
      body <- `{{paramName}}`$toJSON()
      {{/required}}
      {{^required}}
      if (!is.null(args$`{{paramName}}`)) {
        body <- args$`{{paramName}}`$toJSON()
      }
      {{/required}}
      {{/bodyParams}}
      {{/hasBodyParam}}
      resp <- self$apiClient$callApi(url = paste0(self$apiClient$basePath, "/", self$path{{#pathParams}}, "/", {{paramName}}{{/pathParams}}),
                                 method = "{{httpMethod}}",
                                 queryParams = queryParams,
                                 headerParams = headerParams,
                                 body = body)
      
      if (httr::status_code(resp) >= 200 && httr::status_code(resp) <= 299) {
        {{#returnType}} 
        returnObject <- {{returnType}}$new()
        result <- returnObject$fromJSON(httr::content(resp, "text", encoding = "UTF-8"))
        Response$new(returnObject, resp)
        {{/returnType}}
        {{^returnType}}
        # void response, no need to return anything
        {{/returnType}}
      } else if (httr::status_code(resp) >= 400 && httr::status_code(resp) <= 499) {
        Response$new("API client error", resp)
      } else if (httr::status_code(resp) >= 500 && httr::status_code(resp) <= 599) {
        Response$new("API server error", resp)
      }

    }{{#hasMore}},{{/hasMore}}
    {{/operation}}
  )
) 
{{/operations}}
