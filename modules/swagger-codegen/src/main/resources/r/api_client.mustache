#' ApiClient Class
#'
#' Generic API client for Swagger client library builds.
#' Swagger generic API client. This client handles the client-
#' server communication, and is invariant across implementations. Specifics of
#' the methods and models for each application are generated from the Swagger
#' templates.
#'
#' NOTE: This class is auto generated by the swagger code generator program.
#' Ref: https://github.com/swagger-api/swagger-codegen
#' Do not edit the class manually.
#'
#' @export
ApiClient  <- R6::R6Class(
  'ApiClient',
  public = list(
    id = NULL,
    name = NULL,
    userAgent = NULL,
    initialize = function(id, configuration, ){
      if (!missing(id)) {
        stopifnot(is.numeric(id), length(id) == 1)
        self$id <- id
      }
      if (!missing(name)) {
        stopifnot(is.character(name), length(name) == 1)
        self$name <- name
      }
    },
    callApi = function(urlPath, method, pathParams, queryParams, headerParams, postParams, files, responseType){
        if (method == "GET") {
            httr::GET(urlPath, queryParams, headerParams)
        }
        else if (method == "POST") {
            httr::POST(urlPath, queryParams, headerParams)
        }
        else if (method == "PUT") {
            httr::PUT(urlPath, queryParams, headerParams)
        }
        else if (method == "PATCH") {
            httr::PATCH(urlPath, queryParams, headerParams)
        }
        else if (method == "HEAD") {
            httr::HEAD(urlPath, queryParams, headerParams)
        }
        else if (method == "DELETE") {
            httr::DELETE(urlPath, queryParams, headerParams)
        }
        else {
            stop("http method must be `GET`, `HEAD`, `OPTIONS`, `POST`, `PATCH`, `PUT` or `DELETE`.")
        }
    }
  )
)