-module({{classname}}_api).

-export([{{#operations}}{{#operation}}{{^-first}},
         {{/-first}}{{operationId}}/{{#length}}{{allParams}}{{/length}}{{/operation}}{{/operations}}]).

-define(BASE_URL, <<"{{{basePath}}}">>).

{{#operations}}
    {{#operation}}
%% @doc {{summary}}
{{^notes.isEmpty}}
%% {{notes}}
{{/notes.isEmpty}}
-spec {{operationId}}({{#allParams}}{{^-first}}, {{/-first}}{{dataType}}{{/allParams}}) -> {{#returnType}}{{returnBaseType}}{{/returnType}}{{^returnType}}ok{{/returnType}}.
{{operationId}}({{#allParams}}{{^-first}}, {{/-first}}{{paramName}}{{/allParams}}) ->
    Method = {{#lowercase}}{{httpMethod}}{{/lowercase}},
    Path = ["{{{replacedPathName}}}"],
    QS = lists:flatten([{{^queryParams.isEmpty}}{{#queryParams}}{{^-first}}, {{/-first}}{{#qsEncode}}{{this}}{{/qsEncode}}{{/queryParams}}{{/queryParams.isEmpty}}]),
    Headers = [{{^headerParams.isEmpty}}{{#headerParams}}{{^-first}}, {{/-first}}{<<"{{baseName}}">>, {{paramName}}}{{/headerParams}}{{/headerParams.isEmpty}}],
    Body1 = {{^formParams.isEmpty}}{form, [{{#formParams}}{{^-first}}, {{/-first}}{<<"{{baseName}}">>, {{paramName}}}{{/formParams}}]}{{/formParams.isEmpty}}{{#formParams.isEmpty}}{{#bodyParams.isEmpty}}[]{{/bodyParams.isEmpty}}{{^bodyParams.isEmpty}}{{#bodyParams}}{{paramName}}{{/bodyParams}}{{/bodyParams.isEmpty}}{{/formParams.isEmpty}},
    Opts = [],
    Url = hackney_url:make_url(?BASE_URL, Path, QS),


    case hackney:request(Method, Url, Headers, Body1, Opts) of
        {{#responses}}
        {ok, {{code}}, RespHeaders, ClientRef} ->
            case lists:keyfind(<<"Content-Type">>, 1, RespHeaders) of
            {{#hasProduces}}{{#produces}}
              <<"{{{mediaType}}}", _/binary>> ->
                  {ok, Body} = hackney:body(ClientRef),
                  jsx:decode(Body, [returns_maps, {labels, attempt_atom}]){{#hasMore}}; {{/hasMore}}{{/produces}}
            {{/hasProduces}}
            end{{^-last}}; {{/-last}}
        {{/responses}}
    end.

    {{/operation}}

{{/operations}}
