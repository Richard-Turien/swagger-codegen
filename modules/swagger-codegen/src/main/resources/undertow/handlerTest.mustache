package {{apiPackage}};

import com.networknt.client.Client;
import com.networknt.server.Server;
import com.networknt.exception.ClientException;
import com.networknt.exception.ApiException;
import org.apache.commons.io.IOUtils;
import org.apache.http.HttpResponse;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.ResponseHandler;
import org.apache.http.client.methods.*;
import org.apache.http.impl.client.CloseableHttpClient;
import org.junit.AfterClass;
import org.junit.Assert;
import org.junit.BeforeClass;
import org.junit.Test;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.IOException;

/**
* Generated by swagger-codegen
*/
public class PathHandlerProviderTest {
    static final Logger logger = LoggerFactory.getLogger(PathHandlerProviderTest.class);

    static Server server = null;

    @BeforeClass
    public static void setUp() {
        if (server == null) {
            logger.info("starting server");
            server.start();
        }
    }

    @AfterClass
    public static void tearDown() throws Exception {
        if (server != null) {
            try {
                Thread.sleep(100);
            } catch (InterruptedException ie) {

            }
            server.stop();
            logger.info("The server is stopped.");
        }
    }


{{#apiInfo}}
{{#apis}}
{{#operations}}
{{#operation}}
    @Test
    public void {{operationId}}Test() throws ClientException, ApiException {
        CloseableHttpClient client = Client.getInstance().getSyncClient();
        Http{{notes}} http{{notes}} = new Http{{notes}}("http://localhost:8080{{basePathWithoutHost}}{{unescapedNotes}}");
        /*
        Client.getInstance().addAuthorization(httpPost);
        try {
            CloseableHttpResponse response = client.execute(http{{notes}});
            Assert.assertEquals(200, response.getStatusLine().getStatusCode());
            Assert.assertEquals("{{operationId}}", IOUtils.toString(response.getEntity().getContent(), "utf8"));
        } catch (Exception e) {
            e.printStackTrace();
        }
        */
    }
{{/operation}}
{{/operations}}
{{/apis}}
{{/apiInfo}}
}
