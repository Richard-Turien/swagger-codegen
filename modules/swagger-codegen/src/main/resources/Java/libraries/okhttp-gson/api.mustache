{{>licenseInfo}}

package {{package}};

import {{invokerPackage}}.ApiCallback;
import {{invokerPackage}}.ApiClient;
import {{invokerPackage}}.ApiException;
import {{invokerPackage}}.ApiResponse;
import {{invokerPackage}}.Configuration;
import {{invokerPackage}}.Pair;
import {{invokerPackage}}.ProgressRequestBody;
import {{invokerPackage}}.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;

{{#imports}}import {{import}};
{{/imports}}

import java.lang.reflect.Type;
{{^fullJavaUtil}}
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
{{/fullJavaUtil}}

{{#operations}}
public class {{classname}} {
    private ApiClient {{localVariablePrefix}}apiClient;

    public {{classname}}() {
        this(Configuration.getDefaultApiClient());
    }

    public {{classname}}(ApiClient apiClient) {
        this.{{localVariablePrefix}}apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return {{localVariablePrefix}}apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.{{localVariablePrefix}}apiClient = apiClient;
    }

    {{#operation}}
    {{#collapsedParametersClassName}}
    public static class {{collapsedParametersClassName}}{
        {{#allParams}}
        {{{dataType}}} {{paramName}};
        {{/allParams}}

        {{#allParams}}{{#paramNameUpperInitial}}
        public void set{{paramNameUpperInitial}}({{{dataType}}} {{paramName}}) {
            this.{{paramName}} = {{paramName}};
        }

        public {{{dataType}}} get{{paramNameUpperInitial}}() {
            return {{paramName}};
            }
        {{/paramNameUpperInitial}}{{/allParams}}
    }
    {{/collapsedParametersClassName}}

    /* Build call for {{operationId}} */
    private com.squareup.okhttp.Call {{operationId}}Call(
            {{#collapsedParametersClassName}}{{collapsedParametersClassName}} params, {{/collapsedParametersClassName}}
            {{^collapsedParametersClassName}}{{#allParams}}{{{dataType}}} {{paramName}}, {{/allParams}}{{/collapsedParametersClassName}}
            final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object {{localVariablePrefix}}localVarPostBody = {{#bodyParam}}{{paramName}}{{/bodyParam}}{{^bodyParam}}null{{/bodyParam}};
        {{#allParams}}{{#required}}
        // verify the required parameter '{{paramName}}' is set
        if ({{#collapsedParametersClassName}}params.{{paramName}}{{/collapsedParametersClassName}}{{^collapsedParametersClassName}}{{paramName}}{{/collapsedParametersClassName}} == null) {
            throw new ApiException("Missing the required parameter '{{paramName}}' when calling {{operationId}}(Async)");
        }
        {{/required}}{{/allParams}}

        // create path and map variables
        String {{localVariablePrefix}}localVarPath = "{{{path}}}".replaceAll("\\{format\\}","json"){{#pathParams}}
        .replaceAll("\\{" + "{{baseName}}" + "\\}", {{localVariablePrefix}}apiClient.escapeString({{#collapsedParametersClassName}}params.{{paramName}}{{/collapsedParametersClassName}}{{^collapsedParametersClassName}}{{paramName}}{{/collapsedParametersClassName}}.toString())){{/pathParams}};

        {{javaUtilPrefix}}List<Pair> {{localVariablePrefix}}localVarQueryParams = new {{javaUtilPrefix}}ArrayList<Pair>();{{#queryParams}}
        if ({{#collapsedParametersClassName}}params.{{paramName}}{{/collapsedParametersClassName}}{{^collapsedParametersClassName}}{{paramName}}{{/collapsedParametersClassName}} != null)
        {{localVariablePrefix}}localVarQueryParams.addAll({{localVariablePrefix}}apiClient.parameterToPairs("{{#collectionFormat}}{{{collectionFormat}}}{{/collectionFormat}}", "{{baseName}}", {{#collapsedParametersClassName}}params.{{paramName}}{{/collapsedParametersClassName}}{{^collapsedParametersClassName}}{{paramName}}{{/collapsedParametersClassName}}));{{/queryParams}}

        {{javaUtilPrefix}}Map<String , String> {{localVariablePrefix}}localVarHeaderParams = new {{javaUtilPrefix}}HashMap<String , String>();{{#headerParams}}
        if ({{#collapsedParametersClassName}}params.{{paramName}}{{/collapsedParametersClassName}}{{^collapsedParametersClassName}}{{paramName}}{{/collapsedParametersClassName}} != null)
        {{localVariablePrefix}}localVarHeaderParams.put("{{baseName}}", {{localVariablePrefix}}apiClient.parameterToString({{#collapsedParametersClassName}}params.{{paramName}}{{/collapsedParametersClassName}}{{^collapsedParametersClassName}}{{paramName}}{{/collapsedParametersClassName}}));{{/headerParams}}

        {{javaUtilPrefix}}Map<String , Object> {{localVariablePrefix}}localVarFormParams = new {{javaUtilPrefix}}HashMap<String , Object>();{{#formParams}}
        if ({{#collapsedParametersClassName}}params.{{paramName}}{{/collapsedParametersClassName}}{{^collapsedParametersClassName}}{{paramName}}{{/collapsedParametersClassName}} != null)
        {{localVariablePrefix}}localVarFormParams.put("{{baseName}}", {{#collapsedParametersClassName}}params.{{paramName}}{{/collapsedParametersClassName}}{{^collapsedParametersClassName}}{{paramName}}{{/collapsedParametersClassName}});{{/formParams}}

        final String[] {{localVariablePrefix}}localVarAccepts = {
            {{#produces}}"{{{mediaType}}}"{{#hasMore}}, {{/hasMore}}{{/produces}}
        };
        final String {{localVariablePrefix}}localVarAccept = {{localVariablePrefix}}apiClient.selectHeaderAccept({{localVariablePrefix}}localVarAccepts);
        if ({{localVariablePrefix}}localVarAccept != null) {{localVariablePrefix}}localVarHeaderParams.put("Accept", {{localVariablePrefix}}localVarAccept);

        final String[] {{localVariablePrefix}}localVarContentTypes = {
            {{#consumes}}"{{{mediaType}}}"{{#hasMore}}, {{/hasMore}}{{/consumes}}
        };
        final String {{localVariablePrefix}}localVarContentType = {{localVariablePrefix}}apiClient.selectHeaderContentType({{localVariablePrefix}}localVarContentTypes);
        {{localVariablePrefix}}localVarHeaderParams.put("Content-Type", {{localVariablePrefix}}localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] {{localVariablePrefix}}localVarAuthNames = new String[] { {{#authMethods}}"{{name}}"{{#hasMore}}, {{/hasMore}}{{/authMethods}} };
        return {{localVariablePrefix}}apiClient.buildCall({{localVariablePrefix}}localVarPath, "{{httpMethod}}", {{localVariablePrefix}}localVarQueryParams, {{localVariablePrefix}}localVarPostBody, {{localVariablePrefix}}localVarHeaderParams, {{localVariablePrefix}}localVarFormParams, {{localVariablePrefix}}localVarAuthNames, progressRequestListener);
    }

    /**
     * {{summary}}
     * {{notes}}{{#allParams}}
     * @param {{paramName}} {{description}}{{#required}} (required){{/required}}{{^required}} (optional{{#defaultValue}}, default to {{{.}}}{{/defaultValue}}){{/required}}{{/allParams}}{{#returnType}}
     * @return {{returnType}}{{/returnType}}
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public {{#returnType}}{{{returnType}}} {{/returnType}}{{^returnType}}void {{/returnType}}{{operationId}}(
            {{#collapsedParametersClassName}}{{collapsedParametersClassName}} params{{/collapsedParametersClassName}}
            {{^collapsedParametersClassName}}{{#allParams}}{{{dataType}}} {{paramName}}{{#hasMore}}, {{/hasMore}}{{/allParams}}{{/collapsedParametersClassName}}
            ) throws ApiException {
        {{#returnType}}ApiResponse<{{{returnType}}}> {{localVariablePrefix}}resp = {{/returnType}}{{operationId}}WithHttpInfo(
                {{#collapsedParametersClassName}}params{{/collapsedParametersClassName}}
                {{^collapsedParametersClassName}}{{#allParams}}{{paramName}}{{#hasMore}}, {{/hasMore}}{{/allParams}}{{/collapsedParametersClassName}});{{#returnType}}
        return {{localVariablePrefix}}resp.getData();{{/returnType}}
    }

    /**
     * {{summary}}
     * {{notes}}{{#allParams}}
     * @param {{paramName}} {{description}}{{#required}} (required){{/required}}{{^required}} (optional{{#defaultValue}}, default to {{{.}}}{{/defaultValue}}){{/required}}{{/allParams}}
     * @return ApiResponse&lt;{{#returnType}}{{returnType}}{{/returnType}}{{^returnType}}Void{{/returnType}}&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    private ApiResponse<{{#returnType}}{{{returnType}}}{{/returnType}}{{^returnType}}Void{{/returnType}}> {{operationId}}WithHttpInfo(
            {{#collapsedParametersClassName}}{{collapsedParametersClassName}} params{{/collapsedParametersClassName}}
            {{^collapsedParametersClassName}}{{#allParams}}{{{dataType}}} {{paramName}}{{#hasMore}}, {{/hasMore}}{{/allParams}}{{/collapsedParametersClassName}}
            ) throws ApiException {
        com.squareup.okhttp.Call {{localVariablePrefix}}call = {{operationId}}Call(
                {{#collapsedParametersClassName}}params, {{/collapsedParametersClassName}}
                {{^collapsedParametersClassName}}{{#allParams}}{{paramName}}, {{/allParams}}{{/collapsedParametersClassName}}null, null);
        {{#returnType}}Type {{localVariablePrefix}}localVarReturnType = new TypeToken<{{{returnType}}}>(){}.getType();
        return {{localVariablePrefix}}apiClient.execute({{localVariablePrefix}}call, {{localVariablePrefix}}localVarReturnType);{{/returnType}}{{^returnType}}return {{localVariablePrefix}}apiClient.execute({{localVariablePrefix}}call);{{/returnType}}
    }

    /**
     * {{summary}} (asynchronously)
     * {{notes}}{{#allParams}}
     * @param {{paramName}} {{description}}{{#required}} (required){{/required}}{{^required}} (optional{{#defaultValue}}, default to {{{.}}}{{/defaultValue}}){{/required}}{{/allParams}}
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    private com.squareup.okhttp.Call {{operationId}}Async(
            {{#collapsedParametersClassName}}{{collapsedParametersClassName}} params, {{/collapsedParametersClassName}}
            {{^collapsedParametersClassName}}{{#allParams}}{{{dataType}}} {{paramName}}, {{/allParams}}{{/collapsedParametersClassName}}
            final ApiCallback<{{#returnType}}{{{returnType}}}{{/returnType}}{{^returnType}}Void{{/returnType}}> {{localVariablePrefix}}callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call {{localVariablePrefix}}call = {{operationId}}Call(
                {{#collapsedParametersClassName}}params, {{/collapsedParametersClassName}}
                {{^collapsedParametersClassName}}{{#allParams}}{{paramName}}, {{/allParams}}{{/collapsedParametersClassName}}progressListener, progressRequestListener);
        {{#returnType}}Type {{localVariablePrefix}}localVarReturnType = new TypeToken<{{{returnType}}}>(){}.getType();
        {{localVariablePrefix}}apiClient.executeAsync({{localVariablePrefix}}call, {{localVariablePrefix}}localVarReturnType, {{localVariablePrefix}}callback);{{/returnType}}{{^returnType}}{{localVariablePrefix}}apiClient.executeAsync({{localVariablePrefix}}call, {{localVariablePrefix}}callback);{{/returnType}}
        return {{localVariablePrefix}}call;
    }
    {{/operation}}
}
{{/operations}}
