  private Retrofit.Builder addMappingConverterFactory(Retrofit.Builder builder) {
    return builder.addConverterFactory(GsonCustomConverterFactory.create(json.getGson()));
  }

  public ApiClient setDateFormat(DateFormat dateFormat) {
    this.json.setDateFormat(dateFormat);
    return this;
  }

  public ApiClient setSqlDateFormat(DateFormat dateFormat) {
    this.json.setSqlDateFormat(dateFormat);
    return this;
  }

  {{#joda}}
  public ApiClient setDateTimeFormat(DateTimeFormatter dateFormat) {
    this.json.setDateTimeFormat(dateFormat);
    return this;
  }

  public ApiClient setLocalDateFormat(DateTimeFormatter dateFormat) {
    this.json.setLocalDateFormat(dateFormat);
    return this;
  }

  {{/joda}}
  {{#jsr310}}
  public ApiClient setOffsetDateTimeFormat(DateTimeFormatter dateFormat) {
    this.json.setOffsetDateTimeFormat(dateFormat);
    return this;
  }

  public ApiClient setLocalDateFormat(DateTimeFormatter dateFormat) {
    this.json.setLocalDateFormat(dateFormat);
    return this;
  }
  {{/jsr310}}

  /**
  * This wrapper is to take care of this case:
  * when the deserialization fails due to JsonParseException and the
  * expected type is String, then just return the body string.
  */
  private static class GsonResponseBodyConverterToString<T> implements Converter<ResponseBody, T> {
    private final Gson gson;
    private final Type type;

    GsonResponseBodyConverterToString(Gson gson, Type type) {
      this.gson = gson;
      this.type = type;
    }

    @Override
    public T convert(ResponseBody value) throws IOException {
      String returned = value.string();
      try {
        return gson.fromJson(returned, type);
      }
      catch (JsonParseException e) {
        return (T) returned;
      }
    }
  }

  private static class GsonCustomConverterFactory extends Converter.Factory {
    private final Gson gson;
    private final GsonConverterFactory gsonConverterFactory;

    public static GsonCustomConverterFactory create(Gson gson) {
      return new GsonCustomConverterFactory(gson);
    }

    private GsonCustomConverterFactory(Gson gson) {
      if (gson == null)
        throw new NullPointerException("gson == null");
      this.gson = gson;
      this.gsonConverterFactory = GsonConverterFactory.create(gson);
    }

    @Override
    public Converter<ResponseBody, ?> responseBodyConverter(Type type, Annotation[] annotations, Retrofit retrofit) {
      if (type.equals(String.class))
        return new GsonResponseBodyConverterToString<Object>(gson, type);
      else
        return gsonConverterFactory.responseBodyConverter(type, annotations, retrofit);
    }

    @Override
    public Converter<?, RequestBody> requestBodyConverter(Type type, Annotation[] parameterAnnotations, Annotation[] methodAnnotations, Retrofit retrofit) {
      return gsonConverterFactory.requestBodyConverter(type, parameterAnnotations, methodAnnotations, retrofit);
    }
  }