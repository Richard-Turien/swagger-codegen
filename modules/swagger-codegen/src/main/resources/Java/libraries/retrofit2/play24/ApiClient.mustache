package {{invokerPackage}};

import java.io.IOException;
import java.lang.annotation.Annotation;
import java.lang.reflect.Type;
import java.util.*;

import retrofit2.Retrofit;
import retrofit2.converter.scalars.ScalarsConverterFactory;
import retrofit2.converter.jackson.JacksonConverterFactory;

import play.libs.Json;
import play.libs.ws.WSClient;

import {{invokerPackage}}.Play24CallAdapterFactory;
import {{invokerPackage}}.Play24CallFactory;

import okhttp3.Interceptor;
import {{invokerPackage}}.auth.ApiKeyAuth;
import {{invokerPackage}}.auth.Authentication;

public class ApiClient {

    private WSClient wsClient;
    private Map<String, Authentication> authentications;

    public ApiClient(WSClient wsClient) {
        this();
        this.wsClient = wsClient;
    }

    public ApiClient() {
        // Setup authentications (key: authentication name, value: authentication).
        authentications = new HashMap<>();{{#authMethods}}{{#isBasic}}
        authentications.put("{{name}}", new HttpBasicAuth());{{/isBasic}}{{#isApiKey}}
        authentications.put("{{name}}", new ApiKeyAuth({{#isKeyInHeader}}"header"{{/isKeyInHeader}}{{^isKeyInHeader}}"query"{{/isKeyInHeader}}, "{{keyParamName}}"));{{/isApiKey}}{{#isOAuth}}
        authentications.put("{{name}}", new OAuth());{{/isOAuth}}{{/authMethods}}
        // Prevent the authentications from being modified.
        authentications = Collections.unmodifiableMap(authentications);

    }

    public <S> S createService(Class<S> serviceClass) {
        String baseUrl = "{{{basePath}}}";
        if(!baseUrl.endsWith("/")) {
            baseUrl = baseUrl + "/";
        }

        Map<String, String> extraHeaders = new HashMap<>();
        List<Pair> extraQueryParams = new ArrayList<>();

        for (String authName : authentications.keySet()) {
            Authentication auth = authentications.get(authName);
            if (auth == null) throw new RuntimeException("Authentication undefined: " + authName);

            auth.applyToParams(extraQueryParams, extraHeaders);
        }

        return new Retrofit.Builder()
                       .baseUrl(baseUrl)
                       .addConverterFactory(ScalarsConverterFactory.create())
                       .addConverterFactory(JacksonConverterFactory.create(Json.mapper()))
                       .callFactory(new Play24CallFactory(wsClient, extraHeaders, extraQueryParams))
                       .addCallAdapterFactory(new Play24CallAdapterFactory())
                       .build()
                       .create(serviceClass);
    }

      /**
       * Get authentications (key: authentication name, value: authentication).
       */
      public Map<String, Authentication> getAuthentications() {
        return authentications;
      }

      /**
       * Get authentication for the given name.
       *
       * @param authName The authentication name
       * @return The authentication, null if not found
       */
      public Authentication getAuthentication(String authName) {
        return authentications.get(authName);
      }

      /**
       * Helper method to set API key value for the first API key authentication.
       */
      public void setApiKey(String apiKey) {
        for (Authentication auth : authentications.values()) {
          if (auth instanceof ApiKeyAuth) {
            ((ApiKeyAuth) auth).setApiKey(apiKey);
            return;
          }
        }
        throw new RuntimeException("No API key authentication configured!");
      }

      /**
       * Helper method to set API key prefix for the first API key authentication.
       */
      public void setApiKeyPrefix(String apiKeyPrefix) {
        for (Authentication auth : authentications.values()) {
          if (auth instanceof ApiKeyAuth) {
            ((ApiKeyAuth) auth).setApiKeyPrefix(apiKeyPrefix);
            return;
          }
        }
        throw new RuntimeException("No API key authentication configured!");
      }


}


