using System;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;

{{#models}}
{{#model}}
namespace {{modelPackage}} {

  /// <summary>
  /// {{description}}
  /// </summary>
  [DataContract]
  public class {{classname}}{{#parent}} : {{{parent}}}{{/parent}} {


    /// <summary>
    /// {{summary}} {{notes}}
    /// </summary>
    public {{classname}} ({{#vars}}{{{datatype}}} {{name}}{{^required}}{{#name}} = null{{/name}}{{/required}} {{#required}}{{#name}} = null{{/name}}{{/required}}{{#hasMore}}, {{/hasMore}}{{/vars}}){
            {{#vars}}
            {{^isInherited}}
            {{^isReadOnly}}
            {{#required}}
            {{#defaultValue}}// do not set value if  "{{name}}" not provided
            if ({{name}} != null) this.{{name}} = {{name}};
            {{/defaultValue}}
            {{/required}}
            {{/isReadOnly}}
            {{/isInherited}}
            {{/vars}}
            {{#vars}}
            {{^isInherited}}
            {{^isReadOnly}}
            {{^required}}
            {{#defaultValue}}// do not set value if  "{{name}}" not provided
            if ({{name}} != null) this.{{name}} = {{name}};
            {{/defaultValue}}
            {{/required}}
            {{/isReadOnly}}
            {{/isInherited}}
            {{/vars}}

    }


    {{#vars}}
    /// <summary>
    /// {{^description}}Gets or Sets {{{name}}}{{/description}}{{#description}}{{{description}}}{{/description}}
    /// </summary>{{#description}}
    /// <value>{{{description}}}</value>{{/description}}
    [DataMember(Name="{{baseName}}", EmitDefaultValue=false)]
    [JsonProperty(PropertyName = "{{baseName}}")]
    public {{{datatype}}} {{name}} { get; set; }

    {{/vars}}

    /// <summary>
    /// Get the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()  {
      var sb = new StringBuilder();
      sb.Append("class {{classname}} {\n");
      {{#vars}}
      if ({{name}} != null) sb.Append("  {{name}}: ").Append({{name}}).Append("\n");
      {{/vars}}
      sb.Append("}\n");
      return sb.ToString();
    }

    /// <summary>
    /// Get the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public {{#parent}} new {{/parent}}string ToJson() {
      return JsonConvert.SerializeObject(this, Formatting.Indented , new JsonSerializerSettings() { NullValueHandling = NullValueHandling.Ignore });
    }

}
{{/model}}
{{/models}}
}
