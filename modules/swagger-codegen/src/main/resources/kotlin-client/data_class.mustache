{{#jvm}}{{#hasEnums}}import com.squareup.moshi.Json{{/hasEnums}}{{/jvm}}
{{#multiplatform}}
import kotlinx.serialization.*
import kotlinx.serialization.internal.CommonEnumSerializer
{{/multiplatform}}
/**
 * {{{description}}}
{{#vars}}
 * @param {{{vendorExtensions.x-escapedName}}} {{{description}}}
{{/vars}}
 */
{{#multiplatform}}@Serializable{{/multiplatform}}
data class {{classname}} (
{{#requiredVars}}
{{>data_class_req_var}}{{^-last}},
{{/-last}}{{/requiredVars}}{{#hasRequired}}{{#hasOptional}},
{{/hasOptional}}{{/hasRequired}}{{#optionalVars}}{{>data_class_opt_var}}{{^-last}},
{{/-last}}{{/optionalVars}}
) {
{{#hasEnums}}{{#vars}}{{#isEnum}}
    /**
    * {{{description}}}
    * Values: {{#allowableValues}}{{#enumVars}}{{{name}}}{{^-last}},{{/-last}}{{/enumVars}}{{/allowableValues}}
    */
    {{#multiplatform}}@Serializable(with = {{nameInCamelCase}}.Serializer::class){{/multiplatform}}
    enum class {{nameInCamelCase}}(val value: {{datatype}}){
    {{#allowableValues}}{{#enumVars}}
        {{#jvm}}@Json(name = {{{value}}}) {{/jvm}}{{{name}}}({{{value}}}){{^-last}},{{/-last}}{{#-last}};{{/-last}}
    {{/enumVars}}{{/allowableValues}}

    {{#multiplatform}}
        object Serializer : CommonEnumSerializer<{{nameInCamelCase}}>("{{nameInCamelCase}}", values(), values().map { it.value }.toTypedArray())
    {{/multiplatform}}
    }
{{/isEnum}}{{/vars}}{{/hasEnums}}
}
