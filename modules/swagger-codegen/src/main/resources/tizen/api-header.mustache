/*
 * Copyright (c) 2016 Samsung Electronics Co., Ltd All Rights Reserved
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#ifndef _{{classname}}_H_
#define _{{classname}}_H_

#include <string>
#include <cstring>
#include <list>
#include <glib.h>
{{#imports}}
{{{import}}}
{{/imports}}
#include "Error.h"

namespace Tizen{
namespace {{prefix}} {
{{#operations}}
class {{classname}} {
public:
	{{classname}}();
	virtual ~{{classname}}();

	{{#operation}}
/*! \brief {{{summary}}}. *Synchronous*
 *
 * {{{notes}}}{{#allParams}}
 * \param {{paramName}} {{{description}}}{{#required}} *Required*{{/required}}{{/allParams}}
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool {{nickname}}Sync(char * accessToken,
	{{#allParams}}{{#isContainer}}{{{dataType}}}<{{baseType}}> {{paramName}}{{/isContainer}}{{^isContainer}}{{{dataType}}} {{paramName}}{{/isContainer}}{{#hasMore}}, {{/hasMore}}{{/allParams}}{{#hasParams}}, {{/hasParams}}
	{{#returnType}}void(* handler)({{#returnContainer}}{{#isListContainer}}{{returnType}}<{{returnBaseType}}>{{/isListContainer}}{{#isMapContainer}}{{returnType}}<std::string,std::string>{{/isMapContainer}}{{/returnContainer}}{{^returnContainer}}{{returnType}}{{/returnContainer}}, Error, void* ){{/returnType}}
	{{^returnType}}void(* handler)(Error, void* ) {{/returnType}}, void* userData);

/*! \brief {{{summary}}}. *Asynchronous*
 *
 * {{{notes}}}{{#allParams}}
 * \param {{paramName}} {{{description}}}{{#required}} *Required*{{/required}}{{/allParams}}
 * \param handler The callback function to be invoked on completion. *Required*
 * \param accessToken The Authorization token. *Required*
 * \param userData The user data to be passed to the callback function.
 */
bool {{nickname}}Async(char * accessToken,
	{{#allParams}}{{#isContainer}}{{{dataType}}}<{{baseType}}> {{paramName}}{{/isContainer}}{{^isContainer}}{{{dataType}}} {{paramName}}{{/isContainer}}{{#hasMore}}, {{/hasMore}}{{/allParams}}{{#hasParams}}, {{/hasParams}}
	{{#returnType}}void(* handler)({{#returnContainer}}{{#isListContainer}}{{returnType}}<{{returnBaseType}}>{{/isListContainer}}{{#isMapContainer}}{{returnType}}<std::string,std::string>{{/isMapContainer}}{{/returnContainer}}{{^returnContainer}}{{returnType}}{{/returnContainer}}, Error, void* ){{/returnType}}
	{{^returnType}}void(* handler)(Error, void* ) {{/returnType}}, void* userData);
	{{/operation}}

	static std::string getBasePath()
	{
		return "{{basePath}}";
	}
};

{{/operations}}
}
}
#endif /* {{classname}}_H_ */
