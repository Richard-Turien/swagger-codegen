{{>noteinfo}}
{{#operations}}

class
	{{classname}}

inherit

	ANY
		redefine
			default_create
		select
			default_create
		end

	REFACTORING_HELPER
		rename
			default_create as default_create_rh
		end

create
	default_create, make

feature {NONE} -- Initialization

	default_create
			-- Initialize {{classname}} with default api_client.
		do
			api_client := (create {CONFIGURATION}).default_api_client
		end

	make (a_client: API_CLIENT)
			-- Initialize {{classname}} with `api_client' `a_client'.
		do
			api_client := a_client
		end

	api_client: API_CLIENT
			-- Api client.

feature -- Status Report

	last_error: detachable API_ERROR


feature -- API Access
{{#operation}}

	{{operationId}} {{#hasParams}}({{#allParams}}{{paramName}}: {{{dataType}}} {{#hasMore}}; {{/hasMore}}{{/allParams}}){{/hasParams}}{{#returnType}}: detachable {{{returnType}}}{{/returnType}}{{^returnType}}{{/returnType}}
			-- {{summary}}
			-- {{notes}}
			-- {{#allParams}}
			-- argument: {{paramName}} {{description}}{{#required}} (required){{/required}}{{^required}} (optional{{#defaultValue}}, default to {{{.}}}{{/defaultValue}}){{/required}}
			-- {{/allParams}}
			-- {{#returnType}}
			-- Result {{returnType}}{{/returnType}}
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
		do
			create l_request
			{{#bodyParam}}l_request.set_body({{paramName}}){{/bodyParam}}
			l_path := "{{{path}}}"
			{{#pathParams}}
			l_path.replace_substring_all ("{"+"{{baseName}}"+"}", api_client.url_encode ({{{paramName}}}.out))
			{{/pathParams}}
			{{#queryParams}}
			l_request.fill_query_params(api_client.parameter_to_tuple("{{#collectionFormat}}{{{collectionFormat}}}{{/collectionFormat}}", "{{baseName}}", {{paramName}}));
			{{/queryParams}}
			{{#headerParams}}
			l_request.add_header({{paramName}}.out,"{{baseName}}");
			{{/headerParams}}
			{{#formParams}}
			l_request.add_form({{paramName}},"{{baseName}}");
			{{/formParams}}

			if attached {STRING} api_client.select_header_accept (<<{{#produces}}"{{{mediaType}}}"{{#hasMore}}, {{/hasMore}}{{/produces}}>>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type (<<{{#consumes}}"{{{mediaType}}}"{{#hasMore}}, {{/hasMore}}{{/consumes}}>>),"Content-Type")
			l_request.set_auth_names (<<{{#authMethods}}"{{name}}"{{#hasMore}}, {{/hasMore}}{{/authMethods}}>>)
			l_response := api_client.call_api (l_path, "{{httpMethod}}", l_request, agent deserializer)
			{{#returnType}}	
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { {{{returnType}}} } l_response.data as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
			{{/returnType}}
			{{^returnType}}
			if l_response.has_error then
				last_error := l_response.error
			end
			{{/returnType}}
		end	
{{/operation}}


feature -- Deserializer

	deserializer (a_content_type: STRING; a_representation: STRING): detachable ANY
			-- Deserialize a representation `a_representation' with content type `a_content_type'.
			-- Return an object of type target if it's possible.
		local
			err: DEVELOPER_EXCEPTION
		do
			create err
			err.set_description ("Deserialization is not supported by default you will need to add it by hand.")
			err.raise
		end

feature -- Error

	reset_error
			-- reset `last_error' to void.
		do
			last_error := Void
		end

end
{{/operations}}