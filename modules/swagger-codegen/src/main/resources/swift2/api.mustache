{{#operations}}//
// {{classname}}.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire
import ObjectMapper
import AlamofireObjectMapper

{{#description}}
/** {{description}} */{{/description}}
class {{classname}} {
{{#operation}}

    enum {{operationId}}Response {
        {{#responses}}case Res{{code}}{{#dataType}}({{.}}){{/dataType}}{{#isDefault}}//default{{/isDefault}}
        {{/responses}}case Failure(NSError?)
    }

    /**
     {{#summary}}
     {{{summary}}}
     {{/summary}}
     - {{httpMethod}} {{path}}{{#notes}}
     - {{{notes}}}{{/notes}}
     */
    class func request{{operationId}}({{#allParams}}{{paramName}}: {{#isListContainer}}[{{/isListContainer}}{{{dataType}}}{{#isListContainer}}]{{/isListContainer}}{{^required}}?{{/required}}, {{/allParams}}callback:(({{operationId}}Response, NSURLRequest?, NSHTTPURLResponse?, NSData?) -> Void)?=nil) {
        {{^pathParams}}let{{/pathParams}}{{#pathParams}}{{^secondaryParam}}var{{/secondaryParam}}{{/pathParams}} path = "{{path}}"{{#pathParams}}
        path = path.stringByReplacingOccurrencesOfString("{{=<% %>=}}{<%paramName%>}<%={{ }}=%>", withString: "\({{paramName}})", options: .LiteralSearch, range: nil){{/pathParams}}
        let URLString = "{{basePath}}" + path
        
        let headerParams:[String:String]? = {{^headerParams}}nil{{/headerParams}}{{#headerParams}}{{^secondaryParam}}[{{/secondaryParam}}
            "{{baseName}}": {{#required}}"\({{paramName}})"{{/required}}{{^required}}{{paramName}} == nil ? "" : "\({{paramName}})"!{{/required}}{{#hasMore}},{{/hasMore}}{{^hasMore}}
        ]{{/hasMore}}{{/headerParams}}

        {{#bodyParam}}
        let data:NSData
        if let {{^required}}{{paramName}} = {{paramName}}, {{/required}}dataString = Mapper().toJSONString({{paramName}}), encodedData = dataString.dataUsingEncoding(NSUTF8StringEncoding) {
            data = encodedData
        } else {
            data = NSData()
        }
        {{/bodyParam}}
        {{^bodyParam}}
        let queryParams = APIHelper.prepareParameters({{^queryParams}}nil{{/queryParams}}{{#queryParams}}{{^secondaryParam}}[{{/secondaryParam}}
            "{{baseName}}": {{paramName}}{{#hasMore}},{{/hasMore}}{{^hasMore}}
        ]{{/hasMore}}{{/queryParams}})
        
        Alamofire.request(Method.{{httpMethod}}, URLString, parameters: queryParams, encoding: .URL, headers: headerParams){{/bodyParam}}{{#bodyParam}}        Alamofire.upload(Method.{{httpMethod}}, URLString, headers: headerParams, data: data){{/bodyParam}}.response { (urlRequest, nshttpUrlResponse, data, err) in
            guard let callback = callback else {
                return
            }
            if let err = err {
                callback(.Failure(err), urlRequest, nshttpUrlResponse, data)
                return
            }
            guard let nshttpUrlResponse = nshttpUrlResponse else {
                callback(.Failure(nil), urlRequest, nil, data)
                return
            }
            switch nshttpUrlResponse.statusCode {
            {{#responses}}
            case {{code}}:{{#dataType}}{{#primitiveType}}
                let responseSerializer = Request.stringResponseSerializer()
                {{/primitiveType}}{{^primitiveType}}{{#containerType}}
                let responseSerializer:ResponseSerializer<{{dataType}}, NSError> = Request.ObjectMapperArraySerializer("")
                {{/containerType}}{{^containerType}}
                let responseSerializer:ResponseSerializer<{{dataType}}, NSError> = Request.ObjectMapperSerializer("")
                {{/containerType}}{{/primitiveType}}
                let result = responseSerializer.serializeResponse(urlRequest, nshttpUrlResponse, data, err)
                if let value = result.value {
                    callback(.Res{{code}}(value), urlRequest, nshttpUrlResponse, data)
                } else {
                    callback(.Failure(result.error), urlRequest, nshttpUrlResponse, data)
                }
                {{/dataType}}{{^dataType}}
                callback(.Res{{code}}, urlRequest, nshttpUrlResponse, data){{/dataType}}
                break
            {{/responses}}
            default:
                let failureReason = "The status code \(nshttpUrlResponse.statusCode) is undefined in the swagger spec."
                callback(.Failure(Error.errorWithCode(.StatusCodeValidationFailed, failureReason: failureReason)), urlRequest, nshttpUrlResponse, data)
                break
            }
        }
    }

{{/operation}}
}
{{/operations}}
